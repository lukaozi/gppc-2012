!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABSNode	shared/aStar.h	/^	inline node *ABSNode(node *n) { return abstr->getNthParent(n, absLevel); }$/;"	f	class:aStar
ABSTRACTION_OBJ	Makefile	/^ABSTRACTION_OBJ = $(subst .cpp,.o,$(addprefix objs\/, $(notdir $(ABSTRACTION_SRC))))$/;"	m
ABSTRACTION_SRC	Makefile	/^ABSTRACTION_SRC = $(wildcard abstraction\/*.cpp)$/;"	m
ALTHEAP_H	util/altheap.h	/^#define ALTHEAP_H$/;"	d
APPSTARGET	Makefile	/^dev: APPSTARGET = dev$/;"	m
APPSTARGET	Makefile	/^fast: APPSTARGET = fast$/;"	m
ASTAR3_H	shared/aStar.h	/^#define ASTAR3_H$/;"	d
ASTAROld_H	shared/aStar3.h	/^#define ASTAROld_H$/;"	d
AStar3Util	shared/aStar.h	/^namespace AStar3Util$/;"	n
AbstractScenarioManager	extras/ScenarioManager.h	/^		AbstractScenarioManager(){};$/;"	f	class:AbstractScenarioManager
AbstractScenarioManager	extras/ScenarioManager.h	/^class AbstractScenarioManager $/;"	c
AddExperiment	apps/entry_jps/ScenarioLoader.cpp	/^void ScenarioLoader::AddExperiment(Experiment which)$/;"	f	class:ScenarioLoader
AddExperiment	apps/entry_jps_plus/ScenarioLoader.cpp	/^void ScenarioLoader::AddExperiment(Experiment which)$/;"	f	class:ScenarioLoader
CC	Makefile	/^CC = c++$/;"	m
CC	apps/apps.mk	/^CC = g++$/;"	m
CFLAGS	Makefile	/^dev: CFLAGS = $(DEV_CFLAGS) $(SYS_CFLAGS) $(HOGINCLUDES) $/;"	m
CFLAGS	Makefile	/^fast: CFLAGS = $(FAST_CFLAGS) $(SYS_CFLAGS) $(HOGINCLUDES)$/;"	m
CFLAGS	apps/entry_jps.mk	/^dev: CFLAGS=$(DEV_CFLAGS) $(_CFLAGS) $/;"	m
CFLAGS	apps/entry_jps.mk	/^fast: CFLAGS=$(FAST_CFLAGS) $(_CFLAGS)$/;"	m
CFLAGS	apps/entry_jps_plus.mk	/^dev: CFLAGS=$(DEV_CFLAGS) $(_CFLAGS) $/;"	m
CFLAGS	apps/entry_jps_plus.mk	/^fast: CFLAGS=$(FAST_CFLAGS) $(_CFLAGS)$/;"	m
CGPoint	driver/main.h	/^struct CGPoint {$/;"	s
CGPoint	driver/main.h	/^typedef struct CGPoint CGPoint;$/;"	t	typeref:struct:CGPoint
CGRect	driver/main.h	/^struct CGRect {$/;"	s
CGRect	driver/main.h	/^typedef struct CGRect CGRect;$/;"	t	typeref:struct:CGRect
CGSize	driver/main.h	/^struct CGSize {$/;"	s
CGSize	driver/main.h	/^typedef struct CGSize CGSize;$/;"	t	typeref:struct:CGSize
CLC	driver/common.h	/^	commandLineCallback CLC;$/;"	m	class:commandLineCallbackData
COMMON_H	driver/common.h	/^#define COMMON_H$/;"	d
CONSTANTS_H	simulation/constants.h	/^#define CONSTANTS_H$/;"	d
CORRIDORFILTER_H	filters/CorridorFilter.h	/^#define CORRIDORFILTER_H$/;"	d
CheckOpenGLCaps	driver/MAC/macGlCheck.cpp	/^void CheckOpenGLCaps (CGDisplayCount maxDspys, $/;"	f
CleanString	driver/MAC/HID Support/HID_Utilities.cpp	/^static void CleanString (char * targetString)$/;"	f	file:
ClosedList	shared/FlexibleAStar.h	/^typedef __gnu_cxx::hash_map<int,  node*> ClosedList; $/;"	t
CompositeGLBufferIntoFile	driver/MAC/mac_main.cpp	/^void CompositeGLBufferIntoFile(AGLContext ctx, Rect *bufferRect, const FSSpec *fileSpec)$/;"	f
CompositeGLBufferIntoWindow	driver/MAC/mac_main.cpp	/^void CompositeGLBufferIntoWindow(AGLContext ctx, Rect *bufferRect, WindowRef win)$/;"	f
Corridor	shared/aStar.h	/^		AStar3Util::NodeHash, AStar3Util::NodeEqual > Corridor;$/;"	t	namespace:AStar3Util
CorridorFilter	filters/CorridorFilter.cpp	/^CorridorFilter::CorridorFilter()$/;"	f	class:CorridorFilter
CorridorFilter	filters/CorridorFilter.h	/^class CorridorFilter : public NodeFilter$/;"	c
CycleCounter	apps/entry_jps/Timer.h	/^	CycleCounter() { stamp(); }$/;"	f	struct:Timer::CycleCounter
CycleCounter	apps/entry_jps/Timer.h	/^struct CycleCounter {$/;"	s	class:Timer
CycleCounter	apps/entry_jps_plus/Timer.h	/^	CycleCounter() { stamp(); }$/;"	f	struct:Timer::CycleCounter
CycleCounter	apps/entry_jps_plus/Timer.h	/^struct CycleCounter {$/;"	s	class:Timer
CycleCounter	extras/timer.h	/^	CycleCounter() { stamp(); }$/;"	f	struct:Timer::CycleCounter
CycleCounter	extras/timer.h	/^struct CycleCounter {$/;"	s	class:Timer
DEBUGUTILITY_H	util/DebugUtility.h	/^#define DEBUGUTILITY_H$/;"	d
DEFAULT_SIZE	util/heap.h	/^#define DEFAULT_SIZE /;"	d
DEV_CFLAGS	Makefile	/^DEV_CFLAGS = -Wall -Wno-long-long -Wno-deprecated -g -ggdb -ansi -pedantic$/;"	m
DEV_CFLAGS	apps/apps.mk	/^DEV_CFLAGS =  -Wall -Wno-long-long -Wno-deprecated -g -ggdb -ansi -pedantic$/;"	m
DRIVER_INCLUDE	apps/apps.mk	/^DRIVER_INCLUDE = -I..\/driver$/;"	m
DRIVER_OBJ	Makefile	/^DRIVER_OBJ = $(subst .cpp,.o,$(addprefix objs\/, $(notdir $(DRIVER_SRC))))$/;"	m
DRIVER_SRC	Makefile	/^DRIVER_SRC = $(wildcard driver\/*.cpp)$/;"	m
DebugUtility	util/DebugUtility.cpp	/^DebugUtility::DebugUtility(graphAbstraction* map, Heuristic* h)$/;"	f	class:DebugUtility
DebugUtility	util/DebugUtility.h	/^class DebugUtility$/;"	c
Direction	jump/Jump.h	/^	} Direction;$/;"	t	namespace:Jump	typeref:enum:Jump::__anon19
DirectionList	jump/RecursiveJumpPointExpansionPolicy.h	/^	typedef std::vector<Jump::Direction> DirectionList;$/;"	t	class:RecursiveJumpPointExpansionPolicy
E	jump/Jump.h	/^		E = 4, $/;"	e	enum:Jump::__anon19
EDGEFACTORY_H	util/EdgeFactory.h	/^#define EDGEFACTORY_H$/;"	d
ENDGROUPFLAG	Makefile	/^  ENDGROUPFLAG=$/;"	m
ENDGROUPFLAG	Makefile	/^ENDGROUPFLAG=-Wl,--end-group$/;"	m
ENTRY_H	apps/entry_jps/Entry.h	/^#define ENTRY_H$/;"	d
ENTRY_H	apps/entry_jps_plus/Entry.h	/^#define ENTRY_H$/;"	d
EXPANSIONPOLICY_H	policies/ExpansionPolicy.h	/^#define EXPANSIONPOLICY_H$/;"	d
EXPERIMENT_H	extras/Experiment.h	/^#define EXPERIMENT_H$/;"	d
EXTRAS_INCLUDE	apps/apps.mk	/^EXTRAS_INCLUDE = -I..\/extras$/;"	m
EXTRAS_OBJ	Makefile	/^EXTRAS_OBJ = $(subst .cpp,.o,$(addprefix objs\/, $(notdir $(EXTRAS_SRC))))$/;"	m
EXTRAS_SRC	Makefile	/^EXTRAS_SRC = $(wildcard extras\/*.cpp)$/;"	m
EdgeFactory	util/EdgeFactory.h	/^class EdgeFactory : public IEdgeFactory$/;"	c
EndHIDInput	driver/MAC/HID Support/HIDSupport.cpp	/^void EndHIDInput (void)$/;"	f
Error_Handler_h	driver/MAC/HID Support/HID_Error_Handler.h	/^#define Error_Handler_h$/;"	d
ExpansionPolicy	policies/ExpansionPolicy.cpp	/^ExpansionPolicy::ExpansionPolicy()$/;"	f	class:ExpansionPolicy
ExpansionPolicy	policies/ExpansionPolicy.h	/^class ExpansionPolicy$/;"	c
Experiment	apps/entry_jps/ScenarioLoader.h	/^	Experiment(int sx,int sy,int gx,int gy,int b, double d, string m)$/;"	f	class:Experiment
Experiment	apps/entry_jps/ScenarioLoader.h	/^	Experiment(int sx,int sy,int gx,int gy,int sizeX, int sizeY,int b, double d, string m)$/;"	f	class:Experiment
Experiment	apps/entry_jps/ScenarioLoader.h	/^class Experiment {$/;"	c
Experiment	apps/entry_jps_plus/ScenarioLoader.h	/^	Experiment(int sx,int sy,int gx,int gy,int b, double d, string m)$/;"	f	class:Experiment
Experiment	apps/entry_jps_plus/ScenarioLoader.h	/^	Experiment(int sx,int sy,int gx,int gy,int sizeX, int sizeY,int b, double d, string m)$/;"	f	class:Experiment
Experiment	apps/entry_jps_plus/ScenarioLoader.h	/^class Experiment {$/;"	c
Experiment	extras/Experiment.cpp	/^Experiment::Experiment(int sx,int sy,int gx,int gy,int b, double d, string m)$/;"	f	class:Experiment
Experiment	extras/Experiment.cpp	/^Experiment::Experiment(int sx,int sy,int gx,int gy,int sizeX, int sizeY,int b, $/;"	f	class:Experiment
Experiment	extras/Experiment.h	/^class Experiment{$/;"	c
FAST_CFLAGS	Makefile	/^FAST_CFLAGS = -O3 -ansi -DNDEBUG$/;"	m
FAST_CFLAGS	apps/apps.mk	/^FAST_CFLAGS =  -O3 -ansi -DNDEBUG$/;"	m
FILTERS_OBJ	Makefile	/^FILTERS_OBJ = $(subst .cpp,.o,$(addprefix objs\/, $(notdir $(FILTERS_SRC))))$/;"	m
FILTERS_SRC	Makefile	/^FILTERS_SRC = $(wildcard filters\/*.cpp)$/;"	m
FLEXIBLEASTARFACTORY_H	shared/FlexibleAStarFactory.h	/^#define FLEXIBLEASTARFACTORY_H$/;"	d
FLEXIBLEASTAR_H	shared/FlexibleAStar.h	/^#define FLEXIBLEASTAR_H$/;"	d
FlexibleAStar	shared/FlexibleAStar.cpp	/^FlexibleAStar::FlexibleAStar(ExpansionPolicy* policy, Heuristic* heuristic)$/;"	f	class:FlexibleAStar
FlexibleAStar	shared/FlexibleAStar.h	/^class FlexibleAStar : public searchAlgorithm$/;"	c
FlexibleAStarFactory	shared/FlexibleAStarFactory.cpp	/^FlexibleAStarFactory::FlexibleAStarFactory(IExpansionPolicyFactory* epf,$/;"	f	class:FlexibleAStarFactory
FlexibleAStarFactory	shared/FlexibleAStarFactory.h	/^class FlexibleAStarFactory : public ISearchAlgorithmFactory$/;"	c
GENERICIDASTAR_H	util/GenericIDAStar.h	/^#define GENERICIDASTAR_H$/;"	d
GLCaps	driver/MAC/macGlCheck.h	/^} GLCaps;$/;"	t	typeref:struct:__anon16
GLSTUB_OBJ	Makefile	/^GLSTUB_OBJ = $(subst .cpp,.o,$(addprefix objs\/, $(notdir $(GLSTUB_SRC))))$/;"	m
GLSTUB_SRC	Makefile	/^GLSTUB_SRC = $(wildcard driver\/STUB\/GL\/*.cpp)$/;"	m
GLUTIL_H	util/glUtil.h	/^#define GLUTIL_H$/;"	d
GLUT_ACTIVE_ALT	driver/STUB/GL/glut.h	/^#define GLUT_ACTIVE_ALT /;"	d
GLUT_ACTIVE_CTRL	driver/STUB/GL/glut.h	/^#define GLUT_ACTIVE_CTRL /;"	d
GLUT_ACTIVE_SHIFT	driver/STUB/GL/glut.h	/^#define GLUT_ACTIVE_SHIFT /;"	d
GLUT_DEPTH	driver/STUB/GL/glut.h	/^#define GLUT_DEPTH /;"	d
GLUT_DOUBLE	driver/STUB/GL/glut.h	/^#define GLUT_DOUBLE /;"	d
GLUT_DOWN	driver/STUB/GL/glut.h	/^#define GLUT_DOWN /;"	d
GLUT_H	driver/STUB/GL/glut.h	/^#define GLUT_H$/;"	d
GLUT_LEFT_BUTTON	driver/STUB/GL/glut.h	/^#define GLUT_LEFT_BUTTON /;"	d
GLUT_MIDDLE_BUTTON	driver/STUB/GL/glut.h	/^#define GLUT_MIDDLE_BUTTON /;"	d
GLUT_RGBA	driver/STUB/GL/glut.h	/^#define GLUT_RGBA /;"	d
GLUT_RIGHT_BUTTON	driver/STUB/GL/glut.h	/^#define GLUT_RIGHT_BUTTON /;"	d
GLUT_WINDOW_HEIGHT	driver/STUB/GL/glut.h	/^#define GLUT_WINDOW_HEIGHT /;"	d
GLUT_WINDOW_WIDTH	driver/STUB/GL/glut.h	/^#define GLUT_WINDOW_WIDTH /;"	d
GL_2D	driver/STUB/GL/gl.h	/^#define GL_2D	/;"	d
GL_3D	driver/STUB/GL/gl.h	/^#define GL_3D	/;"	d
GL_3D_COLOR	driver/STUB/GL/gl.h	/^#define GL_3D_COLOR	/;"	d
GL_3D_COLOR_TEXTURE	driver/STUB/GL/gl.h	/^#define GL_3D_COLOR_TEXTURE	/;"	d
GL_4D_COLOR_TEXTURE	driver/STUB/GL/gl.h	/^#define GL_4D_COLOR_TEXTURE	/;"	d
GL_ACCUM	driver/STUB/GL/gl.h	/^#define GL_ACCUM	/;"	d
GL_ACCUM_ALPHA_BITS	driver/STUB/GL/gl.h	/^#define GL_ACCUM_ALPHA_BITS	/;"	d
GL_ACCUM_BLUE_BITS	driver/STUB/GL/gl.h	/^#define GL_ACCUM_BLUE_BITS	/;"	d
GL_ACCUM_BUFFER_BIT	driver/STUB/GL/gl.h	/^#define GL_ACCUM_BUFFER_BIT	/;"	d
GL_ACCUM_CLEAR_VALUE	driver/STUB/GL/gl.h	/^#define GL_ACCUM_CLEAR_VALUE	/;"	d
GL_ACCUM_GREEN_BITS	driver/STUB/GL/gl.h	/^#define GL_ACCUM_GREEN_BITS	/;"	d
GL_ACCUM_RED_BITS	driver/STUB/GL/gl.h	/^#define GL_ACCUM_RED_BITS	/;"	d
GL_ADD	driver/STUB/GL/gl.h	/^#define GL_ADD	/;"	d
GL_ALL_ATTRIB_BITS	driver/STUB/GL/gl.h	/^#define GL_ALL_ATTRIB_BITS	/;"	d
GL_ALL_CLIENT_ATTRIB_BITS	driver/STUB/GL/gl.h	/^#define GL_ALL_CLIENT_ATTRIB_BITS /;"	d
GL_ALPHA	driver/STUB/GL/gl.h	/^#define GL_ALPHA	/;"	d
GL_ALPHA12	driver/STUB/GL/gl.h	/^#define GL_ALPHA12	/;"	d
GL_ALPHA16	driver/STUB/GL/gl.h	/^#define GL_ALPHA16	/;"	d
GL_ALPHA4	driver/STUB/GL/gl.h	/^#define GL_ALPHA4	/;"	d
GL_ALPHA8	driver/STUB/GL/gl.h	/^#define GL_ALPHA8	/;"	d
GL_ALPHA_BIAS	driver/STUB/GL/gl.h	/^#define GL_ALPHA_BIAS	/;"	d
GL_ALPHA_BITS	driver/STUB/GL/gl.h	/^#define GL_ALPHA_BITS	/;"	d
GL_ALPHA_SCALE	driver/STUB/GL/gl.h	/^#define GL_ALPHA_SCALE	/;"	d
GL_ALPHA_TEST	driver/STUB/GL/gl.h	/^#define GL_ALPHA_TEST	/;"	d
GL_ALPHA_TEST_FUNC	driver/STUB/GL/gl.h	/^#define GL_ALPHA_TEST_FUNC	/;"	d
GL_ALPHA_TEST_REF	driver/STUB/GL/gl.h	/^#define GL_ALPHA_TEST_REF	/;"	d
GL_ALWAYS	driver/STUB/GL/gl.h	/^#define GL_ALWAYS	/;"	d
GL_AMBIENT	driver/STUB/GL/gl.h	/^#define GL_AMBIENT	/;"	d
GL_AMBIENT_AND_DIFFUSE	driver/STUB/GL/gl.h	/^#define GL_AMBIENT_AND_DIFFUSE	/;"	d
GL_AND	driver/STUB/GL/gl.h	/^#define GL_AND	/;"	d
GL_AND_INVERTED	driver/STUB/GL/gl.h	/^#define GL_AND_INVERTED	/;"	d
GL_AND_REVERSE	driver/STUB/GL/gl.h	/^#define GL_AND_REVERSE	/;"	d
GL_ATTRIB_STACK_DEPTH	driver/STUB/GL/gl.h	/^#define GL_ATTRIB_STACK_DEPTH	/;"	d
GL_AUTO_NORMAL	driver/STUB/GL/gl.h	/^#define GL_AUTO_NORMAL	/;"	d
GL_AUX0	driver/STUB/GL/gl.h	/^#define GL_AUX0	/;"	d
GL_AUX1	driver/STUB/GL/gl.h	/^#define GL_AUX1	/;"	d
GL_AUX2	driver/STUB/GL/gl.h	/^#define GL_AUX2	/;"	d
GL_AUX3	driver/STUB/GL/gl.h	/^#define GL_AUX3	/;"	d
GL_AUX_BUFFERS	driver/STUB/GL/gl.h	/^#define GL_AUX_BUFFERS	/;"	d
GL_BACK	driver/STUB/GL/gl.h	/^#define GL_BACK	/;"	d
GL_BACK_LEFT	driver/STUB/GL/gl.h	/^#define GL_BACK_LEFT	/;"	d
GL_BACK_RIGHT	driver/STUB/GL/gl.h	/^#define GL_BACK_RIGHT	/;"	d
GL_BITMAP	driver/STUB/GL/gl.h	/^#define GL_BITMAP	/;"	d
GL_BITMAP_TOKEN	driver/STUB/GL/gl.h	/^#define GL_BITMAP_TOKEN	/;"	d
GL_BLEND	driver/STUB/GL/gl.h	/^#define GL_BLEND	/;"	d
GL_BLEND_DST	driver/STUB/GL/gl.h	/^#define GL_BLEND_DST	/;"	d
GL_BLEND_SRC	driver/STUB/GL/gl.h	/^#define GL_BLEND_SRC	/;"	d
GL_BLUE	driver/STUB/GL/gl.h	/^#define GL_BLUE	/;"	d
GL_BLUE_BIAS	driver/STUB/GL/gl.h	/^#define GL_BLUE_BIAS	/;"	d
GL_BLUE_BITS	driver/STUB/GL/gl.h	/^#define GL_BLUE_BITS	/;"	d
GL_BLUE_SCALE	driver/STUB/GL/gl.h	/^#define GL_BLUE_SCALE	/;"	d
GL_CCW	driver/STUB/GL/gl.h	/^#define GL_CCW	/;"	d
GL_CLAMP	driver/STUB/GL/gl.h	/^#define GL_CLAMP	/;"	d
GL_CLEAR	driver/STUB/GL/gl.h	/^#define GL_CLEAR	/;"	d
GL_CLIENT_ALL_ATTRIB_BITS	driver/STUB/GL/gl.h	/^#define GL_CLIENT_ALL_ATTRIB_BITS /;"	d
GL_CLIENT_ATTRIB_STACK_DEPTH	driver/STUB/GL/gl.h	/^#define GL_CLIENT_ATTRIB_STACK_DEPTH	/;"	d
GL_CLIENT_PIXEL_STORE_BIT	driver/STUB/GL/gl.h	/^#define GL_CLIENT_PIXEL_STORE_BIT	/;"	d
GL_CLIENT_VERTEX_ARRAY_BIT	driver/STUB/GL/gl.h	/^#define GL_CLIENT_VERTEX_ARRAY_BIT	/;"	d
GL_CLIP_PLANE0	driver/STUB/GL/gl.h	/^#define GL_CLIP_PLANE0	/;"	d
GL_CLIP_PLANE1	driver/STUB/GL/gl.h	/^#define GL_CLIP_PLANE1	/;"	d
GL_CLIP_PLANE2	driver/STUB/GL/gl.h	/^#define GL_CLIP_PLANE2	/;"	d
GL_CLIP_PLANE3	driver/STUB/GL/gl.h	/^#define GL_CLIP_PLANE3	/;"	d
GL_CLIP_PLANE4	driver/STUB/GL/gl.h	/^#define GL_CLIP_PLANE4	/;"	d
GL_CLIP_PLANE5	driver/STUB/GL/gl.h	/^#define GL_CLIP_PLANE5	/;"	d
GL_COEFF	driver/STUB/GL/gl.h	/^#define GL_COEFF	/;"	d
GL_COLOR	driver/STUB/GL/gl.h	/^#define GL_COLOR	/;"	d
GL_COLOR_BUFFER_BIT	driver/STUB/GL/gl.h	/^#define GL_COLOR_BUFFER_BIT	/;"	d
GL_COLOR_CLEAR_VALUE	driver/STUB/GL/gl.h	/^#define GL_COLOR_CLEAR_VALUE	/;"	d
GL_COLOR_INDEX	driver/STUB/GL/gl.h	/^#define GL_COLOR_INDEX	/;"	d
GL_COLOR_INDEXES	driver/STUB/GL/gl.h	/^#define GL_COLOR_INDEXES	/;"	d
GL_COLOR_LOGIC_OP	driver/STUB/GL/gl.h	/^#define GL_COLOR_LOGIC_OP	/;"	d
GL_COLOR_MATERIAL	driver/STUB/GL/gl.h	/^#define GL_COLOR_MATERIAL	/;"	d
GL_COLOR_MATERIAL_FACE	driver/STUB/GL/gl.h	/^#define GL_COLOR_MATERIAL_FACE	/;"	d
GL_COLOR_MATERIAL_PARAMETER	driver/STUB/GL/gl.h	/^#define GL_COLOR_MATERIAL_PARAMETER	/;"	d
GL_COLOR_WRITEMASK	driver/STUB/GL/gl.h	/^#define GL_COLOR_WRITEMASK	/;"	d
GL_COMPILE	driver/STUB/GL/gl.h	/^#define GL_COMPILE	/;"	d
GL_COMPILE_AND_EXECUTE	driver/STUB/GL/gl.h	/^#define GL_COMPILE_AND_EXECUTE	/;"	d
GL_CONSTANT_ATTENUATION	driver/STUB/GL/gl.h	/^#define GL_CONSTANT_ATTENUATION	/;"	d
GL_COPY	driver/STUB/GL/gl.h	/^#define GL_COPY	/;"	d
GL_COPY_INVERTED	driver/STUB/GL/gl.h	/^#define GL_COPY_INVERTED	/;"	d
GL_COPY_PIXEL_TOKEN	driver/STUB/GL/gl.h	/^#define GL_COPY_PIXEL_TOKEN	/;"	d
GL_CULL_FACE	driver/STUB/GL/gl.h	/^#define GL_CULL_FACE	/;"	d
GL_CULL_FACE_MODE	driver/STUB/GL/gl.h	/^#define GL_CULL_FACE_MODE	/;"	d
GL_CURRENT_BIT	driver/STUB/GL/gl.h	/^#define GL_CURRENT_BIT	/;"	d
GL_CURRENT_COLOR	driver/STUB/GL/gl.h	/^#define GL_CURRENT_COLOR	/;"	d
GL_CURRENT_INDEX	driver/STUB/GL/gl.h	/^#define GL_CURRENT_INDEX	/;"	d
GL_CURRENT_NORMAL	driver/STUB/GL/gl.h	/^#define GL_CURRENT_NORMAL	/;"	d
GL_CURRENT_RASTER_COLOR	driver/STUB/GL/gl.h	/^#define GL_CURRENT_RASTER_COLOR	/;"	d
GL_CURRENT_RASTER_DISTANCE	driver/STUB/GL/gl.h	/^#define GL_CURRENT_RASTER_DISTANCE	/;"	d
GL_CURRENT_RASTER_INDEX	driver/STUB/GL/gl.h	/^#define GL_CURRENT_RASTER_INDEX	/;"	d
GL_CURRENT_RASTER_POSITION	driver/STUB/GL/gl.h	/^#define GL_CURRENT_RASTER_POSITION	/;"	d
GL_CURRENT_RASTER_POSITION_VALID	driver/STUB/GL/gl.h	/^#define GL_CURRENT_RASTER_POSITION_VALID	/;"	d
GL_CURRENT_RASTER_TEXTURE_COORDS	driver/STUB/GL/gl.h	/^#define GL_CURRENT_RASTER_TEXTURE_COORDS	/;"	d
GL_CURRENT_TEXTURE_COORDS	driver/STUB/GL/gl.h	/^#define GL_CURRENT_TEXTURE_COORDS	/;"	d
GL_CW	driver/STUB/GL/gl.h	/^#define GL_CW	/;"	d
GL_DECAL	driver/STUB/GL/gl.h	/^#define GL_DECAL	/;"	d
GL_DECR	driver/STUB/GL/gl.h	/^#define GL_DECR	/;"	d
GL_DEPTH	driver/STUB/GL/gl.h	/^#define GL_DEPTH	/;"	d
GL_DEPTH_BIAS	driver/STUB/GL/gl.h	/^#define GL_DEPTH_BIAS	/;"	d
GL_DEPTH_BUFFER_BIT	driver/STUB/GL/gl.h	/^#define GL_DEPTH_BUFFER_BIT	/;"	d
GL_DEPTH_COMPONENT	driver/STUB/GL/gl.h	/^#define GL_DEPTH_COMPONENT	/;"	d
GL_DEPTH_SCALE	driver/STUB/GL/gl.h	/^#define GL_DEPTH_SCALE	/;"	d
GL_DEPTH_TEST	driver/STUB/GL/gl.h	/^#define GL_DEPTH_TEST	/;"	d
GL_DIFFUSE	driver/STUB/GL/gl.h	/^#define GL_DIFFUSE	/;"	d
GL_DITHER	driver/STUB/GL/gl.h	/^#define GL_DITHER	/;"	d
GL_DOMAIN	driver/STUB/GL/gl.h	/^#define GL_DOMAIN	/;"	d
GL_DONT_CARE	driver/STUB/GL/gl.h	/^#define GL_DONT_CARE	/;"	d
GL_DOUBLE	driver/STUB/GL/gl.h	/^#define GL_DOUBLE	/;"	d
GL_DOUBLEBUFFER	driver/STUB/GL/gl.h	/^#define GL_DOUBLEBUFFER	/;"	d
GL_DRAW_BUFFER	driver/STUB/GL/gl.h	/^#define GL_DRAW_BUFFER	/;"	d
GL_DRAW_PIXEL_TOKEN	driver/STUB/GL/gl.h	/^#define GL_DRAW_PIXEL_TOKEN	/;"	d
GL_DST_ALPHA	driver/STUB/GL/gl.h	/^#define GL_DST_ALPHA	/;"	d
GL_DST_COLOR	driver/STUB/GL/gl.h	/^#define GL_DST_COLOR	/;"	d
GL_EDGE_FLAG	driver/STUB/GL/gl.h	/^#define GL_EDGE_FLAG	/;"	d
GL_EMISSION	driver/STUB/GL/gl.h	/^#define GL_EMISSION	/;"	d
GL_ENABLE_BIT	driver/STUB/GL/gl.h	/^#define GL_ENABLE_BIT	/;"	d
GL_EQUIV	driver/STUB/GL/gl.h	/^#define GL_EQUIV	/;"	d
GL_EVAL_BIT	driver/STUB/GL/gl.h	/^#define GL_EVAL_BIT	/;"	d
GL_EXP	driver/STUB/GL/gl.h	/^#define GL_EXP	/;"	d
GL_EXP2	driver/STUB/GL/gl.h	/^#define GL_EXP2	/;"	d
GL_EXTENSIONS	driver/STUB/GL/gl.h	/^#define GL_EXTENSIONS	/;"	d
GL_EYE_LINEAR	driver/STUB/GL/gl.h	/^#define GL_EYE_LINEAR	/;"	d
GL_EYE_PLANE	driver/STUB/GL/gl.h	/^#define GL_EYE_PLANE	/;"	d
GL_FALSE	driver/STUB/GL/gl.h	/^#define GL_FALSE	/;"	d
GL_FASTEST	driver/STUB/GL/gl.h	/^#define GL_FASTEST	/;"	d
GL_FEEDBACK	driver/STUB/GL/gl.h	/^#define GL_FEEDBACK	/;"	d
GL_FEEDBACK_BUFFER_POINTER	driver/STUB/GL/gl.h	/^#define GL_FEEDBACK_BUFFER_POINTER	/;"	d
GL_FEEDBACK_BUFFER_SIZE	driver/STUB/GL/gl.h	/^#define GL_FEEDBACK_BUFFER_SIZE	/;"	d
GL_FEEDBACK_BUFFER_TYPE	driver/STUB/GL/gl.h	/^#define GL_FEEDBACK_BUFFER_TYPE	/;"	d
GL_FILL	driver/STUB/GL/gl.h	/^#define GL_FILL	/;"	d
GL_FLAT	driver/STUB/GL/gl.h	/^#define GL_FLAT	/;"	d
GL_FLOAT	driver/STUB/GL/gl.h	/^#define GL_FLOAT	/;"	d
GL_FOG	driver/STUB/GL/gl.h	/^#define GL_FOG	/;"	d
GL_FOG_BIT	driver/STUB/GL/gl.h	/^#define GL_FOG_BIT	/;"	d
GL_FOG_COLOR	driver/STUB/GL/gl.h	/^#define GL_FOG_COLOR	/;"	d
GL_FOG_DENSITY	driver/STUB/GL/gl.h	/^#define GL_FOG_DENSITY	/;"	d
GL_FOG_END	driver/STUB/GL/gl.h	/^#define GL_FOG_END	/;"	d
GL_FOG_HINT	driver/STUB/GL/gl.h	/^#define GL_FOG_HINT	/;"	d
GL_FOG_INDEX	driver/STUB/GL/gl.h	/^#define GL_FOG_INDEX	/;"	d
GL_FOG_MODE	driver/STUB/GL/gl.h	/^#define GL_FOG_MODE	/;"	d
GL_FOG_START	driver/STUB/GL/gl.h	/^#define GL_FOG_START	/;"	d
GL_FRONT	driver/STUB/GL/gl.h	/^#define GL_FRONT	/;"	d
GL_FRONT_AND_BACK	driver/STUB/GL/gl.h	/^#define GL_FRONT_AND_BACK	/;"	d
GL_FRONT_FACE	driver/STUB/GL/gl.h	/^#define GL_FRONT_FACE	/;"	d
GL_FRONT_LEFT	driver/STUB/GL/gl.h	/^#define GL_FRONT_LEFT	/;"	d
GL_FRONT_RIGHT	driver/STUB/GL/gl.h	/^#define GL_FRONT_RIGHT	/;"	d
GL_GREEN	driver/STUB/GL/gl.h	/^#define GL_GREEN	/;"	d
GL_GREEN_BIAS	driver/STUB/GL/gl.h	/^#define GL_GREEN_BIAS	/;"	d
GL_GREEN_BITS	driver/STUB/GL/gl.h	/^#define GL_GREEN_BITS	/;"	d
GL_GREEN_SCALE	driver/STUB/GL/gl.h	/^#define GL_GREEN_SCALE	/;"	d
GL_H	driver/STUB/GL/gl.h	/^#define GL_H$/;"	d
GL_HINT_BIT	driver/STUB/GL/gl.h	/^#define GL_HINT_BIT	/;"	d
GL_INCR	driver/STUB/GL/gl.h	/^#define GL_INCR	/;"	d
GL_INDEX_BITS	driver/STUB/GL/gl.h	/^#define GL_INDEX_BITS	/;"	d
GL_INDEX_CLEAR_VALUE	driver/STUB/GL/gl.h	/^#define GL_INDEX_CLEAR_VALUE	/;"	d
GL_INDEX_LOGIC_OP	driver/STUB/GL/gl.h	/^#define GL_INDEX_LOGIC_OP	/;"	d
GL_INDEX_MODE	driver/STUB/GL/gl.h	/^#define GL_INDEX_MODE	/;"	d
GL_INDEX_OFFSET	driver/STUB/GL/gl.h	/^#define GL_INDEX_OFFSET	/;"	d
GL_INDEX_SHIFT	driver/STUB/GL/gl.h	/^#define GL_INDEX_SHIFT	/;"	d
GL_INDEX_WRITEMASK	driver/STUB/GL/gl.h	/^#define GL_INDEX_WRITEMASK	/;"	d
GL_INTENSITY	driver/STUB/GL/gl.h	/^#define GL_INTENSITY	/;"	d
GL_INTENSITY12	driver/STUB/GL/gl.h	/^#define GL_INTENSITY12	/;"	d
GL_INTENSITY16	driver/STUB/GL/gl.h	/^#define GL_INTENSITY16	/;"	d
GL_INTENSITY4	driver/STUB/GL/gl.h	/^#define GL_INTENSITY4	/;"	d
GL_INTENSITY8	driver/STUB/GL/gl.h	/^#define GL_INTENSITY8	/;"	d
GL_INVALID_ENUM	driver/STUB/GL/gl.h	/^#define GL_INVALID_ENUM	/;"	d
GL_INVALID_OPERATION	driver/STUB/GL/gl.h	/^#define GL_INVALID_OPERATION	/;"	d
GL_INVALID_VALUE	driver/STUB/GL/gl.h	/^#define GL_INVALID_VALUE	/;"	d
GL_INVERT	driver/STUB/GL/gl.h	/^#define GL_INVERT	/;"	d
GL_KEEP	driver/STUB/GL/gl.h	/^#define GL_KEEP	/;"	d
GL_LEFT	driver/STUB/GL/gl.h	/^#define GL_LEFT	/;"	d
GL_LIGHT0	driver/STUB/GL/gl.h	/^#define GL_LIGHT0	/;"	d
GL_LIGHT1	driver/STUB/GL/gl.h	/^#define GL_LIGHT1	/;"	d
GL_LIGHT2	driver/STUB/GL/gl.h	/^#define GL_LIGHT2	/;"	d
GL_LIGHT3	driver/STUB/GL/gl.h	/^#define GL_LIGHT3	/;"	d
GL_LIGHT4	driver/STUB/GL/gl.h	/^#define GL_LIGHT4	/;"	d
GL_LIGHT5	driver/STUB/GL/gl.h	/^#define GL_LIGHT5	/;"	d
GL_LIGHT6	driver/STUB/GL/gl.h	/^#define GL_LIGHT6	/;"	d
GL_LIGHT7	driver/STUB/GL/gl.h	/^#define GL_LIGHT7	/;"	d
GL_LIGHTING	driver/STUB/GL/gl.h	/^#define GL_LIGHTING	/;"	d
GL_LIGHTING_BIT	driver/STUB/GL/gl.h	/^#define GL_LIGHTING_BIT	/;"	d
GL_LIGHT_MODEL_AMBIENT	driver/STUB/GL/gl.h	/^#define GL_LIGHT_MODEL_AMBIENT	/;"	d
GL_LIGHT_MODEL_LOCAL_VIEWER	driver/STUB/GL/gl.h	/^#define GL_LIGHT_MODEL_LOCAL_VIEWER	/;"	d
GL_LIGHT_MODEL_TWO_SIDE	driver/STUB/GL/gl.h	/^#define GL_LIGHT_MODEL_TWO_SIDE	/;"	d
GL_LINE	driver/STUB/GL/gl.h	/^#define GL_LINE	/;"	d
GL_LINEAR	driver/STUB/GL/gl.h	/^#define GL_LINEAR	/;"	d
GL_LINEAR_ATTENUATION	driver/STUB/GL/gl.h	/^#define GL_LINEAR_ATTENUATION	/;"	d
GL_LINEAR_MIPMAP_LINEAR	driver/STUB/GL/gl.h	/^#define GL_LINEAR_MIPMAP_LINEAR	/;"	d
GL_LINEAR_MIPMAP_NEAREST	driver/STUB/GL/gl.h	/^#define GL_LINEAR_MIPMAP_NEAREST	/;"	d
GL_LINES	driver/STUB/GL/gl.h	/^#define GL_LINES	/;"	d
GL_LINE_BIT	driver/STUB/GL/gl.h	/^#define GL_LINE_BIT	/;"	d
GL_LINE_LOOP	driver/STUB/GL/gl.h	/^#define GL_LINE_LOOP	/;"	d
GL_LINE_RESET_TOKEN	driver/STUB/GL/gl.h	/^#define GL_LINE_RESET_TOKEN	/;"	d
GL_LINE_SMOOTH	driver/STUB/GL/gl.h	/^#define GL_LINE_SMOOTH	/;"	d
GL_LINE_SMOOTH_HINT	driver/STUB/GL/gl.h	/^#define GL_LINE_SMOOTH_HINT	/;"	d
GL_LINE_STIPPLE	driver/STUB/GL/gl.h	/^#define GL_LINE_STIPPLE	/;"	d
GL_LINE_STIPPLE_PATTERN	driver/STUB/GL/gl.h	/^#define GL_LINE_STIPPLE_PATTERN	/;"	d
GL_LINE_STIPPLE_REPEAT	driver/STUB/GL/gl.h	/^#define GL_LINE_STIPPLE_REPEAT	/;"	d
GL_LINE_STRIP	driver/STUB/GL/gl.h	/^#define GL_LINE_STRIP	/;"	d
GL_LINE_TOKEN	driver/STUB/GL/gl.h	/^#define GL_LINE_TOKEN	/;"	d
GL_LINE_WIDTH	driver/STUB/GL/gl.h	/^#define GL_LINE_WIDTH	/;"	d
GL_LINE_WIDTH_GRANULARITY	driver/STUB/GL/gl.h	/^#define GL_LINE_WIDTH_GRANULARITY	/;"	d
GL_LINE_WIDTH_RANGE	driver/STUB/GL/gl.h	/^#define GL_LINE_WIDTH_RANGE	/;"	d
GL_LIST_BASE	driver/STUB/GL/gl.h	/^#define GL_LIST_BASE	/;"	d
GL_LIST_BIT	driver/STUB/GL/gl.h	/^#define GL_LIST_BIT	/;"	d
GL_LIST_INDEX	driver/STUB/GL/gl.h	/^#define GL_LIST_INDEX	/;"	d
GL_LIST_MODE	driver/STUB/GL/gl.h	/^#define GL_LIST_MODE	/;"	d
GL_LOAD	driver/STUB/GL/gl.h	/^#define GL_LOAD	/;"	d
GL_LOGIC_OP	driver/STUB/GL/gl.h	/^#define GL_LOGIC_OP	/;"	d
GL_LOGIC_OP_MODE	driver/STUB/GL/gl.h	/^#define GL_LOGIC_OP_MODE	/;"	d
GL_LUMINANCE	driver/STUB/GL/gl.h	/^#define GL_LUMINANCE	/;"	d
GL_LUMINANCE12	driver/STUB/GL/gl.h	/^#define GL_LUMINANCE12	/;"	d
GL_LUMINANCE12_ALPHA12	driver/STUB/GL/gl.h	/^#define GL_LUMINANCE12_ALPHA12	/;"	d
GL_LUMINANCE12_ALPHA4	driver/STUB/GL/gl.h	/^#define GL_LUMINANCE12_ALPHA4	/;"	d
GL_LUMINANCE16	driver/STUB/GL/gl.h	/^#define GL_LUMINANCE16	/;"	d
GL_LUMINANCE16_ALPHA16	driver/STUB/GL/gl.h	/^#define GL_LUMINANCE16_ALPHA16	/;"	d
GL_LUMINANCE4	driver/STUB/GL/gl.h	/^#define GL_LUMINANCE4	/;"	d
GL_LUMINANCE4_ALPHA4	driver/STUB/GL/gl.h	/^#define GL_LUMINANCE4_ALPHA4	/;"	d
GL_LUMINANCE6_ALPHA2	driver/STUB/GL/gl.h	/^#define GL_LUMINANCE6_ALPHA2	/;"	d
GL_LUMINANCE8	driver/STUB/GL/gl.h	/^#define GL_LUMINANCE8	/;"	d
GL_LUMINANCE8_ALPHA8	driver/STUB/GL/gl.h	/^#define GL_LUMINANCE8_ALPHA8	/;"	d
GL_LUMINANCE_ALPHA	driver/STUB/GL/gl.h	/^#define GL_LUMINANCE_ALPHA	/;"	d
GL_MAP1_COLOR_4	driver/STUB/GL/gl.h	/^#define GL_MAP1_COLOR_4	/;"	d
GL_MAP1_GRID_DOMAIN	driver/STUB/GL/gl.h	/^#define GL_MAP1_GRID_DOMAIN	/;"	d
GL_MAP1_GRID_SEGMENTS	driver/STUB/GL/gl.h	/^#define GL_MAP1_GRID_SEGMENTS	/;"	d
GL_MAP1_INDEX	driver/STUB/GL/gl.h	/^#define GL_MAP1_INDEX	/;"	d
GL_MAP1_NORMAL	driver/STUB/GL/gl.h	/^#define GL_MAP1_NORMAL	/;"	d
GL_MAP1_TEXTURE_COORD_1	driver/STUB/GL/gl.h	/^#define GL_MAP1_TEXTURE_COORD_1	/;"	d
GL_MAP1_TEXTURE_COORD_2	driver/STUB/GL/gl.h	/^#define GL_MAP1_TEXTURE_COORD_2	/;"	d
GL_MAP1_TEXTURE_COORD_3	driver/STUB/GL/gl.h	/^#define GL_MAP1_TEXTURE_COORD_3	/;"	d
GL_MAP1_TEXTURE_COORD_4	driver/STUB/GL/gl.h	/^#define GL_MAP1_TEXTURE_COORD_4	/;"	d
GL_MAP1_VERTEX_3	driver/STUB/GL/gl.h	/^#define GL_MAP1_VERTEX_3	/;"	d
GL_MAP1_VERTEX_4	driver/STUB/GL/gl.h	/^#define GL_MAP1_VERTEX_4	/;"	d
GL_MAP2_COLOR_4	driver/STUB/GL/gl.h	/^#define GL_MAP2_COLOR_4	/;"	d
GL_MAP2_GRID_DOMAIN	driver/STUB/GL/gl.h	/^#define GL_MAP2_GRID_DOMAIN	/;"	d
GL_MAP2_GRID_SEGMENTS	driver/STUB/GL/gl.h	/^#define GL_MAP2_GRID_SEGMENTS	/;"	d
GL_MAP2_INDEX	driver/STUB/GL/gl.h	/^#define GL_MAP2_INDEX	/;"	d
GL_MAP2_NORMAL	driver/STUB/GL/gl.h	/^#define GL_MAP2_NORMAL	/;"	d
GL_MAP2_TEXTURE_COORD_1	driver/STUB/GL/gl.h	/^#define GL_MAP2_TEXTURE_COORD_1	/;"	d
GL_MAP2_TEXTURE_COORD_2	driver/STUB/GL/gl.h	/^#define GL_MAP2_TEXTURE_COORD_2	/;"	d
GL_MAP2_TEXTURE_COORD_3	driver/STUB/GL/gl.h	/^#define GL_MAP2_TEXTURE_COORD_3	/;"	d
GL_MAP2_TEXTURE_COORD_4	driver/STUB/GL/gl.h	/^#define GL_MAP2_TEXTURE_COORD_4	/;"	d
GL_MAP2_VERTEX_3	driver/STUB/GL/gl.h	/^#define GL_MAP2_VERTEX_3	/;"	d
GL_MAP2_VERTEX_4	driver/STUB/GL/gl.h	/^#define GL_MAP2_VERTEX_4	/;"	d
GL_MAP_COLOR	driver/STUB/GL/gl.h	/^#define GL_MAP_COLOR	/;"	d
GL_MAP_STENCIL	driver/STUB/GL/gl.h	/^#define GL_MAP_STENCIL	/;"	d
GL_MATRIX_MODE	driver/STUB/GL/gl.h	/^#define GL_MATRIX_MODE	/;"	d
GL_MAX_ATTRIB_STACK_DEPTH	driver/STUB/GL/gl.h	/^#define GL_MAX_ATTRIB_STACK_DEPTH	/;"	d
GL_MAX_CLIENT_ATTRIB_STACK_DEPTH	driver/STUB/GL/gl.h	/^#define GL_MAX_CLIENT_ATTRIB_STACK_DEPTH	/;"	d
GL_MAX_CLIP_PLANES	driver/STUB/GL/gl.h	/^#define GL_MAX_CLIP_PLANES	/;"	d
GL_MAX_EVAL_ORDER	driver/STUB/GL/gl.h	/^#define GL_MAX_EVAL_ORDER	/;"	d
GL_MAX_LIGHTS	driver/STUB/GL/gl.h	/^#define GL_MAX_LIGHTS	/;"	d
GL_MAX_LIST_NESTING	driver/STUB/GL/gl.h	/^#define GL_MAX_LIST_NESTING	/;"	d
GL_MAX_MODELVIEW_STACK_DEPTH	driver/STUB/GL/gl.h	/^#define GL_MAX_MODELVIEW_STACK_DEPTH	/;"	d
GL_MAX_NAME_STACK_DEPTH	driver/STUB/GL/gl.h	/^#define GL_MAX_NAME_STACK_DEPTH	/;"	d
GL_MAX_PIXEL_MAP_TABLE	driver/STUB/GL/gl.h	/^#define GL_MAX_PIXEL_MAP_TABLE	/;"	d
GL_MAX_PROJECTION_STACK_DEPTH	driver/STUB/GL/gl.h	/^#define GL_MAX_PROJECTION_STACK_DEPTH	/;"	d
GL_MAX_TEXTURE_SIZE	driver/STUB/GL/gl.h	/^#define GL_MAX_TEXTURE_SIZE	/;"	d
GL_MAX_TEXTURE_STACK_DEPTH	driver/STUB/GL/gl.h	/^#define GL_MAX_TEXTURE_STACK_DEPTH	/;"	d
GL_MAX_VIEWPORT_DIMS	driver/STUB/GL/gl.h	/^#define GL_MAX_VIEWPORT_DIMS	/;"	d
GL_MODELVIEW	driver/STUB/GL/gl.h	/^#define GL_MODELVIEW	/;"	d
GL_MODELVIEW_MATRIX	driver/STUB/GL/gl.h	/^#define GL_MODELVIEW_MATRIX	/;"	d
GL_MODELVIEW_STACK_DEPTH	driver/STUB/GL/gl.h	/^#define GL_MODELVIEW_STACK_DEPTH	/;"	d
GL_MODULATE	driver/STUB/GL/gl.h	/^#define GL_MODULATE	/;"	d
GL_MULT	driver/STUB/GL/gl.h	/^#define GL_MULT	/;"	d
GL_NAME_STACK_DEPTH	driver/STUB/GL/gl.h	/^#define GL_NAME_STACK_DEPTH	/;"	d
GL_NAND	driver/STUB/GL/gl.h	/^#define GL_NAND	/;"	d
GL_NEAREST	driver/STUB/GL/gl.h	/^#define GL_NEAREST	/;"	d
GL_NEAREST_MIPMAP_LINEAR	driver/STUB/GL/gl.h	/^#define GL_NEAREST_MIPMAP_LINEAR	/;"	d
GL_NEAREST_MIPMAP_NEAREST	driver/STUB/GL/gl.h	/^#define GL_NEAREST_MIPMAP_NEAREST	/;"	d
GL_NICEST	driver/STUB/GL/gl.h	/^#define GL_NICEST	/;"	d
GL_NONE	driver/STUB/GL/gl.h	/^#define GL_NONE	/;"	d
GL_NOOP	driver/STUB/GL/gl.h	/^#define GL_NOOP	/;"	d
GL_NOR	driver/STUB/GL/gl.h	/^#define GL_NOR	/;"	d
GL_NORMALIZE	driver/STUB/GL/gl.h	/^#define GL_NORMALIZE	/;"	d
GL_NO_ERROR	driver/STUB/GL/gl.h	/^#define GL_NO_ERROR /;"	d
GL_OBJECT_LINEAR	driver/STUB/GL/gl.h	/^#define GL_OBJECT_LINEAR	/;"	d
GL_OBJECT_PLANE	driver/STUB/GL/gl.h	/^#define GL_OBJECT_PLANE	/;"	d
GL_ONE	driver/STUB/GL/gl.h	/^#define GL_ONE	/;"	d
GL_ONE_MINUS_DST_ALPHA	driver/STUB/GL/gl.h	/^#define GL_ONE_MINUS_DST_ALPHA	/;"	d
GL_ONE_MINUS_DST_COLOR	driver/STUB/GL/gl.h	/^#define GL_ONE_MINUS_DST_COLOR	/;"	d
GL_ONE_MINUS_SRC_ALPHA	driver/STUB/GL/gl.h	/^#define GL_ONE_MINUS_SRC_ALPHA	/;"	d
GL_ONE_MINUS_SRC_COLOR	driver/STUB/GL/gl.h	/^#define GL_ONE_MINUS_SRC_COLOR	/;"	d
GL_OR	driver/STUB/GL/gl.h	/^#define GL_OR	/;"	d
GL_ORDER	driver/STUB/GL/gl.h	/^#define GL_ORDER	/;"	d
GL_OR_INVERTED	driver/STUB/GL/gl.h	/^#define GL_OR_INVERTED	/;"	d
GL_OR_REVERSE	driver/STUB/GL/gl.h	/^#define GL_OR_REVERSE	/;"	d
GL_OUT_OF_MEMORY	driver/STUB/GL/gl.h	/^#define GL_OUT_OF_MEMORY	/;"	d
GL_PACK_ALIGNMENT	driver/STUB/GL/gl.h	/^#define GL_PACK_ALIGNMENT	/;"	d
GL_PACK_LSB_FIRST	driver/STUB/GL/gl.h	/^#define GL_PACK_LSB_FIRST	/;"	d
GL_PACK_ROW_LENGTH	driver/STUB/GL/gl.h	/^#define GL_PACK_ROW_LENGTH	/;"	d
GL_PACK_SKIP_PIXELS	driver/STUB/GL/gl.h	/^#define GL_PACK_SKIP_PIXELS	/;"	d
GL_PACK_SKIP_ROWS	driver/STUB/GL/gl.h	/^#define GL_PACK_SKIP_ROWS	/;"	d
GL_PACK_SWAP_BYTES	driver/STUB/GL/gl.h	/^#define GL_PACK_SWAP_BYTES	/;"	d
GL_PASS_THROUGH_TOKEN	driver/STUB/GL/gl.h	/^#define GL_PASS_THROUGH_TOKEN	/;"	d
GL_PERSPECTIVE_CORRECTION_HINT	driver/STUB/GL/gl.h	/^#define GL_PERSPECTIVE_CORRECTION_HINT	/;"	d
GL_PIXEL_MAP_A_TO_A	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MAP_A_TO_A	/;"	d
GL_PIXEL_MAP_A_TO_A_SIZE	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MAP_A_TO_A_SIZE	/;"	d
GL_PIXEL_MAP_B_TO_B	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MAP_B_TO_B	/;"	d
GL_PIXEL_MAP_B_TO_B_SIZE	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MAP_B_TO_B_SIZE	/;"	d
GL_PIXEL_MAP_G_TO_G	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MAP_G_TO_G	/;"	d
GL_PIXEL_MAP_G_TO_G_SIZE	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MAP_G_TO_G_SIZE	/;"	d
GL_PIXEL_MAP_I_TO_A	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MAP_I_TO_A	/;"	d
GL_PIXEL_MAP_I_TO_A_SIZE	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MAP_I_TO_A_SIZE	/;"	d
GL_PIXEL_MAP_I_TO_B	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MAP_I_TO_B	/;"	d
GL_PIXEL_MAP_I_TO_B_SIZE	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MAP_I_TO_B_SIZE	/;"	d
GL_PIXEL_MAP_I_TO_G	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MAP_I_TO_G	/;"	d
GL_PIXEL_MAP_I_TO_G_SIZE	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MAP_I_TO_G_SIZE	/;"	d
GL_PIXEL_MAP_I_TO_I	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MAP_I_TO_I	/;"	d
GL_PIXEL_MAP_I_TO_I_SIZE	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MAP_I_TO_I_SIZE	/;"	d
GL_PIXEL_MAP_I_TO_R	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MAP_I_TO_R	/;"	d
GL_PIXEL_MAP_I_TO_R_SIZE	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MAP_I_TO_R_SIZE	/;"	d
GL_PIXEL_MAP_R_TO_R	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MAP_R_TO_R	/;"	d
GL_PIXEL_MAP_R_TO_R_SIZE	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MAP_R_TO_R_SIZE	/;"	d
GL_PIXEL_MAP_S_TO_S	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MAP_S_TO_S	/;"	d
GL_PIXEL_MAP_S_TO_S_SIZE	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MAP_S_TO_S_SIZE	/;"	d
GL_PIXEL_MODE_BIT	driver/STUB/GL/gl.h	/^#define GL_PIXEL_MODE_BIT	/;"	d
GL_POINT	driver/STUB/GL/gl.h	/^#define GL_POINT	/;"	d
GL_POINTS	driver/STUB/GL/gl.h	/^#define GL_POINTS	/;"	d
GL_POINT_BIT	driver/STUB/GL/gl.h	/^#define GL_POINT_BIT	/;"	d
GL_POINT_SMOOTH_HINT	driver/STUB/GL/gl.h	/^#define GL_POINT_SMOOTH_HINT	/;"	d
GL_POINT_TOKEN	driver/STUB/GL/gl.h	/^#define GL_POINT_TOKEN	/;"	d
GL_POLYGON	driver/STUB/GL/gl.h	/^#define GL_POLYGON /;"	d
GL_POLYGON_BIT	driver/STUB/GL/gl.h	/^#define GL_POLYGON_BIT	/;"	d
GL_POLYGON_MODE	driver/STUB/GL/gl.h	/^#define GL_POLYGON_MODE	/;"	d
GL_POLYGON_OFFSET_FACTOR	driver/STUB/GL/gl.h	/^#define GL_POLYGON_OFFSET_FACTOR	/;"	d
GL_POLYGON_OFFSET_FILL	driver/STUB/GL/gl.h	/^#define GL_POLYGON_OFFSET_FILL	/;"	d
GL_POLYGON_OFFSET_LINE	driver/STUB/GL/gl.h	/^#define GL_POLYGON_OFFSET_LINE	/;"	d
GL_POLYGON_OFFSET_POINT	driver/STUB/GL/gl.h	/^#define GL_POLYGON_OFFSET_POINT	/;"	d
GL_POLYGON_OFFSET_UNITS	driver/STUB/GL/gl.h	/^#define GL_POLYGON_OFFSET_UNITS	/;"	d
GL_POLYGON_SMOOTH	driver/STUB/GL/gl.h	/^#define GL_POLYGON_SMOOTH	/;"	d
GL_POLYGON_SMOOTH_HINT	driver/STUB/GL/gl.h	/^#define GL_POLYGON_SMOOTH_HINT	/;"	d
GL_POLYGON_STIPPLE	driver/STUB/GL/gl.h	/^#define GL_POLYGON_STIPPLE	/;"	d
GL_POLYGON_STIPPLE_BIT	driver/STUB/GL/gl.h	/^#define GL_POLYGON_STIPPLE_BIT	/;"	d
GL_POLYGON_TOKEN	driver/STUB/GL/gl.h	/^#define GL_POLYGON_TOKEN	/;"	d
GL_POSITION	driver/STUB/GL/gl.h	/^#define GL_POSITION	/;"	d
GL_PROJECTION	driver/STUB/GL/gl.h	/^#define GL_PROJECTION	/;"	d
GL_PROJECTION_MATRIX	driver/STUB/GL/gl.h	/^#define GL_PROJECTION_MATRIX	/;"	d
GL_PROJECTION_STACK_DEPTH	driver/STUB/GL/gl.h	/^#define GL_PROJECTION_STACK_DEPTH	/;"	d
GL_PROXY_TEXTURE_1D	driver/STUB/GL/gl.h	/^#define GL_PROXY_TEXTURE_1D	/;"	d
GL_PROXY_TEXTURE_2D	driver/STUB/GL/gl.h	/^#define GL_PROXY_TEXTURE_2D	/;"	d
GL_Q	driver/STUB/GL/gl.h	/^#define GL_Q	/;"	d
GL_QUADRATIC_ATTENUATION	driver/STUB/GL/gl.h	/^#define GL_QUADRATIC_ATTENUATION	/;"	d
GL_QUADS	driver/STUB/GL/gl.h	/^#define GL_QUADS	/;"	d
GL_QUAD_STRIP	driver/STUB/GL/gl.h	/^#define GL_QUAD_STRIP	/;"	d
GL_R	driver/STUB/GL/gl.h	/^#define GL_R	/;"	d
GL_R3_G3_B2	driver/STUB/GL/gl.h	/^#define GL_R3_G3_B2	/;"	d
GL_READ_BUFFER	driver/STUB/GL/gl.h	/^#define GL_READ_BUFFER	/;"	d
GL_RED	driver/STUB/GL/gl.h	/^#define GL_RED	/;"	d
GL_RED_BIAS	driver/STUB/GL/gl.h	/^#define GL_RED_BIAS	/;"	d
GL_RED_BITS	driver/STUB/GL/gl.h	/^#define GL_RED_BITS	/;"	d
GL_RED_SCALE	driver/STUB/GL/gl.h	/^#define GL_RED_SCALE	/;"	d
GL_RENDER	driver/STUB/GL/gl.h	/^#define GL_RENDER	/;"	d
GL_RENDERER	driver/STUB/GL/gl.h	/^#define GL_RENDERER	/;"	d
GL_RENDER_MODE	driver/STUB/GL/gl.h	/^#define GL_RENDER_MODE	/;"	d
GL_REPEAT	driver/STUB/GL/gl.h	/^#define GL_REPEAT	/;"	d
GL_REPLACE	driver/STUB/GL/gl.h	/^#define GL_REPLACE	/;"	d
GL_RETURN	driver/STUB/GL/gl.h	/^#define GL_RETURN	/;"	d
GL_RGB	driver/STUB/GL/gl.h	/^#define GL_RGB	/;"	d
GL_RGB10	driver/STUB/GL/gl.h	/^#define GL_RGB10	/;"	d
GL_RGB10_A2	driver/STUB/GL/gl.h	/^#define GL_RGB10_A2	/;"	d
GL_RGB12	driver/STUB/GL/gl.h	/^#define GL_RGB12	/;"	d
GL_RGB16	driver/STUB/GL/gl.h	/^#define GL_RGB16	/;"	d
GL_RGB4	driver/STUB/GL/gl.h	/^#define GL_RGB4	/;"	d
GL_RGB5	driver/STUB/GL/gl.h	/^#define GL_RGB5	/;"	d
GL_RGB5_A1	driver/STUB/GL/gl.h	/^#define GL_RGB5_A1	/;"	d
GL_RGB8	driver/STUB/GL/gl.h	/^#define GL_RGB8	/;"	d
GL_RGBA	driver/STUB/GL/gl.h	/^#define GL_RGBA	/;"	d
GL_RGBA12	driver/STUB/GL/gl.h	/^#define GL_RGBA12	/;"	d
GL_RGBA16	driver/STUB/GL/gl.h	/^#define GL_RGBA16	/;"	d
GL_RGBA2	driver/STUB/GL/gl.h	/^#define GL_RGBA2	/;"	d
GL_RGBA4	driver/STUB/GL/gl.h	/^#define GL_RGBA4	/;"	d
GL_RGBA8	driver/STUB/GL/gl.h	/^#define GL_RGBA8	/;"	d
GL_RGBA_MODE	driver/STUB/GL/gl.h	/^#define GL_RGBA_MODE	/;"	d
GL_RIGHT	driver/STUB/GL/gl.h	/^#define GL_RIGHT	/;"	d
GL_S	driver/STUB/GL/gl.h	/^#define GL_S	/;"	d
GL_SCISSOR_BIT	driver/STUB/GL/gl.h	/^#define GL_SCISSOR_BIT	/;"	d
GL_SCISSOR_BOX	driver/STUB/GL/gl.h	/^#define GL_SCISSOR_BOX	/;"	d
GL_SCISSOR_TEST	driver/STUB/GL/gl.h	/^#define GL_SCISSOR_TEST	/;"	d
GL_SELECT	driver/STUB/GL/gl.h	/^#define GL_SELECT	/;"	d
GL_SELECTION_BUFFER_POINTER	driver/STUB/GL/gl.h	/^#define GL_SELECTION_BUFFER_POINTER	/;"	d
GL_SELECTION_BUFFER_SIZE	driver/STUB/GL/gl.h	/^#define GL_SELECTION_BUFFER_SIZE	/;"	d
GL_SET	driver/STUB/GL/gl.h	/^#define GL_SET	/;"	d
GL_SHADE_MODEL	driver/STUB/GL/gl.h	/^#define GL_SHADE_MODEL	/;"	d
GL_SHININESS	driver/STUB/GL/gl.h	/^#define GL_SHININESS	/;"	d
GL_SMOOTH	driver/STUB/GL/gl.h	/^#define GL_SMOOTH	/;"	d
GL_SPECULAR	driver/STUB/GL/gl.h	/^#define GL_SPECULAR	/;"	d
GL_SPHERE_MAP	driver/STUB/GL/gl.h	/^#define GL_SPHERE_MAP	/;"	d
GL_SPOT_CUTOFF	driver/STUB/GL/gl.h	/^#define GL_SPOT_CUTOFF	/;"	d
GL_SPOT_DIRECTION	driver/STUB/GL/gl.h	/^#define GL_SPOT_DIRECTION	/;"	d
GL_SPOT_EXPONENT	driver/STUB/GL/gl.h	/^#define GL_SPOT_EXPONENT	/;"	d
GL_SRC_ALPHA	driver/STUB/GL/gl.h	/^#define GL_SRC_ALPHA	/;"	d
GL_SRC_ALPHA_SATURATE	driver/STUB/GL/gl.h	/^#define GL_SRC_ALPHA_SATURATE	/;"	d
GL_SRC_COLOR	driver/STUB/GL/gl.h	/^#define GL_SRC_COLOR	/;"	d
GL_STACK_OVERFLOW	driver/STUB/GL/gl.h	/^#define GL_STACK_OVERFLOW	/;"	d
GL_STACK_UNDERFLOW	driver/STUB/GL/gl.h	/^#define GL_STACK_UNDERFLOW	/;"	d
GL_STENCIL	driver/STUB/GL/gl.h	/^#define GL_STENCIL	/;"	d
GL_STENCIL_BITS	driver/STUB/GL/gl.h	/^#define GL_STENCIL_BITS	/;"	d
GL_STENCIL_BUFFER_BIT	driver/STUB/GL/gl.h	/^#define GL_STENCIL_BUFFER_BIT	/;"	d
GL_STENCIL_CLEAR_VALUE	driver/STUB/GL/gl.h	/^#define GL_STENCIL_CLEAR_VALUE	/;"	d
GL_STENCIL_FAIL	driver/STUB/GL/gl.h	/^#define GL_STENCIL_FAIL	/;"	d
GL_STENCIL_FUNC	driver/STUB/GL/gl.h	/^#define GL_STENCIL_FUNC	/;"	d
GL_STENCIL_INDEX	driver/STUB/GL/gl.h	/^#define GL_STENCIL_INDEX	/;"	d
GL_STENCIL_PASS_DEPTH_FAIL	driver/STUB/GL/gl.h	/^#define GL_STENCIL_PASS_DEPTH_FAIL	/;"	d
GL_STENCIL_PASS_DEPTH_PASS	driver/STUB/GL/gl.h	/^#define GL_STENCIL_PASS_DEPTH_PASS	/;"	d
GL_STENCIL_REF	driver/STUB/GL/gl.h	/^#define GL_STENCIL_REF	/;"	d
GL_STENCIL_TEST	driver/STUB/GL/gl.h	/^#define GL_STENCIL_TEST	/;"	d
GL_STENCIL_VALUE_MASK	driver/STUB/GL/gl.h	/^#define GL_STENCIL_VALUE_MASK	/;"	d
GL_STENCIL_WRITEMASK	driver/STUB/GL/gl.h	/^#define GL_STENCIL_WRITEMASK	/;"	d
GL_STEREO	driver/STUB/GL/gl.h	/^#define GL_STEREO	/;"	d
GL_SUBPIXEL_BITS	driver/STUB/GL/gl.h	/^#define GL_SUBPIXEL_BITS	/;"	d
GL_T	driver/STUB/GL/gl.h	/^#define GL_T	/;"	d
GL_TEXTURE	driver/STUB/GL/gl.h	/^#define GL_TEXTURE	/;"	d
GL_TEXTURE_1D	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_1D	/;"	d
GL_TEXTURE_2D	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_2D	/;"	d
GL_TEXTURE_ALPHA_SIZE	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_ALPHA_SIZE	/;"	d
GL_TEXTURE_BINDING_1D	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_BINDING_1D	/;"	d
GL_TEXTURE_BINDING_2D	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_BINDING_2D	/;"	d
GL_TEXTURE_BIT	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_BIT	/;"	d
GL_TEXTURE_BLUE_SIZE	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_BLUE_SIZE	/;"	d
GL_TEXTURE_BORDER	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_BORDER	/;"	d
GL_TEXTURE_BORDER_COLOR	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_BORDER_COLOR	/;"	d
GL_TEXTURE_COMPONENTS	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_COMPONENTS	/;"	d
GL_TEXTURE_ENV	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_ENV	/;"	d
GL_TEXTURE_ENV_COLOR	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_ENV_COLOR	/;"	d
GL_TEXTURE_ENV_MODE	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_ENV_MODE	/;"	d
GL_TEXTURE_GEN_MODE	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_GEN_MODE	/;"	d
GL_TEXTURE_GEN_Q	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_GEN_Q	/;"	d
GL_TEXTURE_GEN_R	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_GEN_R	/;"	d
GL_TEXTURE_GEN_S	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_GEN_S	/;"	d
GL_TEXTURE_GEN_T	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_GEN_T	/;"	d
GL_TEXTURE_GREEN_SIZE	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_GREEN_SIZE	/;"	d
GL_TEXTURE_HEIGHT	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_HEIGHT	/;"	d
GL_TEXTURE_INTENSITY_SIZE	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_INTENSITY_SIZE	/;"	d
GL_TEXTURE_INTERNAL_FORMAT	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_INTERNAL_FORMAT	/;"	d
GL_TEXTURE_LUMINANCE_SIZE	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_LUMINANCE_SIZE	/;"	d
GL_TEXTURE_MAG_FILTER	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_MAG_FILTER	/;"	d
GL_TEXTURE_MATRIX	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_MATRIX	/;"	d
GL_TEXTURE_MIN_FILTER	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_MIN_FILTER	/;"	d
GL_TEXTURE_PRIORITY	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_PRIORITY	/;"	d
GL_TEXTURE_RED_SIZE	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_RED_SIZE	/;"	d
GL_TEXTURE_RESIDENT	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_RESIDENT	/;"	d
GL_TEXTURE_STACK_DEPTH	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_STACK_DEPTH	/;"	d
GL_TEXTURE_WIDTH	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_WIDTH	/;"	d
GL_TEXTURE_WRAP_S	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_WRAP_S	/;"	d
GL_TEXTURE_WRAP_T	driver/STUB/GL/gl.h	/^#define GL_TEXTURE_WRAP_T	/;"	d
GL_TRANSFORM_BIT	driver/STUB/GL/gl.h	/^#define GL_TRANSFORM_BIT	/;"	d
GL_TRIANGLES	driver/STUB/GL/gl.h	/^#define GL_TRIANGLES	/;"	d
GL_TRIANGLE_FAN	driver/STUB/GL/gl.h	/^#define GL_TRIANGLE_FAN	/;"	d
GL_TRIANGLE_STRIP	driver/STUB/GL/gl.h	/^#define GL_TRIANGLE_STRIP	/;"	d
GL_TRUE	driver/STUB/GL/gl.h	/^#define GL_TRUE	/;"	d
GL_UNPACK_ALIGNMENT	driver/STUB/GL/gl.h	/^#define GL_UNPACK_ALIGNMENT	/;"	d
GL_UNPACK_LSB_FIRST	driver/STUB/GL/gl.h	/^#define GL_UNPACK_LSB_FIRST	/;"	d
GL_UNPACK_ROW_LENGTH	driver/STUB/GL/gl.h	/^#define GL_UNPACK_ROW_LENGTH	/;"	d
GL_UNPACK_SKIP_PIXELS	driver/STUB/GL/gl.h	/^#define GL_UNPACK_SKIP_PIXELS	/;"	d
GL_UNPACK_SKIP_ROWS	driver/STUB/GL/gl.h	/^#define GL_UNPACK_SKIP_ROWS	/;"	d
GL_UNPACK_SWAP_BYTES	driver/STUB/GL/gl.h	/^#define GL_UNPACK_SWAP_BYTES	/;"	d
GL_UNSIGNED_INT	driver/STUB/GL/gl.h	/^#define GL_UNSIGNED_INT	/;"	d
GL_VENDOR	driver/STUB/GL/gl.h	/^#define GL_VENDOR	/;"	d
GL_VERSION	driver/STUB/GL/gl.h	/^#define GL_VERSION	/;"	d
GL_VIEWPORT	driver/STUB/GL/gl.h	/^#define GL_VIEWPORT	/;"	d
GL_VIEWPORT_BIT	driver/STUB/GL/gl.h	/^#define GL_VIEWPORT_BIT	/;"	d
GL_XOR	driver/STUB/GL/gl.h	/^#define GL_XOR	/;"	d
GL_ZERO	driver/STUB/GL/gl.h	/^#define GL_ZERO	/;"	d
GL_ZOOM_X	driver/STUB/GL/gl.h	/^#define GL_ZOOM_X	/;"	d
GL_ZOOM_Y	driver/STUB/GL/gl.h	/^#define GL_ZOOM_Y	/;"	d
GLbitfield	driver/STUB/GL/gl.h	/^typedef unsigned int	GLbitfield;$/;"	t
GLboolean	driver/STUB/GL/gl.h	/^typedef unsigned char	GLboolean;$/;"	t
GLbyte	driver/STUB/GL/gl.h	/^typedef signed char	GLbyte;		\/* 1-byte signed *\/$/;"	t
GLclampd	driver/STUB/GL/gl.h	/^typedef double		GLclampd;	\/* double precision float in [0,1] *\/$/;"	t
GLclampf	driver/STUB/GL/gl.h	/^typedef float		GLclampf;	\/* single precision float in [0,1] *\/$/;"	t
GLdouble	driver/STUB/GL/gl.h	/^typedef double		GLdouble;	\/* double precision float *\/$/;"	t
GLenum	driver/STUB/GL/gl.h	/^typedef unsigned int	GLenum;$/;"	t
GLfloat	driver/STUB/GL/gl.h	/^typedef float		GLfloat;	\/* single precision float *\/$/;"	t
GLint	driver/STUB/GL/gl.h	/^typedef int		GLint;		\/* 4-byte signed *\/$/;"	t
GLshort	driver/STUB/GL/gl.h	/^typedef short		GLshort;	\/* 2-byte signed *\/$/;"	t
GLsizei	driver/STUB/GL/gl.h	/^typedef int		GLsizei;	\/* 4-byte signed *\/$/;"	t
GLubyte	driver/STUB/GL/gl.h	/^typedef unsigned char	GLubyte;	\/* 1-byte unsigned *\/$/;"	t
GLuint	driver/STUB/GL/gl.h	/^typedef unsigned int	GLuint;		\/* 4-byte unsigned *\/$/;"	t
GLushort	driver/STUB/GL/gl.h	/^typedef unsigned short	GLushort;	\/* 2-byte unsigned *\/$/;"	t
GLvoid	driver/STUB/GL/gl.h	/^typedef void		GLvoid;$/;"	t
GRAPHABSTRACTION_H	abstraction/graphAbstraction.h	/^#define GRAPHABSTRACTION_H$/;"	d
GRAPH_H	util/graph.h	/^#define GRAPH_H$/;"	d
GRIDMAPEXPANSIONPOLICY_H	policies/GridMapExpansionPolicy.h	/^#define GRIDMAPEXPANSIONPOLICY_H$/;"	d
GenericIDAStar	util/GenericIDAStar.h	/^	GenericIDAStar() {}$/;"	f	class:GenericIDAStar
GenericIDAStar	util/GenericIDAStar.h	/^class GenericIDAStar {$/;"	c
Get20MoveTime	apps/entry_jps/main.cpp	/^	double Get20MoveTime()$/;"	f	struct:stats
Get20MoveTime	apps/entry_jps_plus/main.cpp	/^	double Get20MoveTime()$/;"	f	struct:stats
GetBucket	apps/entry_jps/ScenarioLoader.h	/^	int GetBucket() const {return bucket;}$/;"	f	class:Experiment
GetBucket	apps/entry_jps_plus/ScenarioLoader.h	/^	int GetBucket() const {return bucket;}$/;"	f	class:Experiment
GetCurrentContextInfo	driver/MAC/mac_main.cpp	/^pRecContext GetCurrentContextInfo (WindowRef window)$/;"	f
GetDistance	apps/entry_jps/ScenarioLoader.h	/^	double GetDistance() const {return distance;}$/;"	f	class:Experiment
GetDistance	apps/entry_jps_plus/ScenarioLoader.h	/^	double GetDistance() const {return distance;}$/;"	f	class:Experiment
GetElapsedTime	apps/entry_jps/Timer.h	/^	double GetElapsedTime(){return elapsedTime;}$/;"	f	class:Timer
GetElapsedTime	apps/entry_jps_plus/Timer.h	/^	double GetElapsedTime(){return elapsedTime;}$/;"	f	class:Timer
GetElementNameFromVendorProduct	driver/MAC/HID Support/HID_Name_Lookup.cpp	/^void GetElementNameFromVendorProduct (long vendorID, long productID, long cookie, char * pName)$/;"	f
GetGoalX	apps/entry_jps/ScenarioLoader.h	/^	int GetGoalX() const {return goalx;}$/;"	f	class:Experiment
GetGoalX	apps/entry_jps_plus/ScenarioLoader.h	/^	int GetGoalX() const {return goalx;}$/;"	f	class:Experiment
GetGoalY	apps/entry_jps/ScenarioLoader.h	/^	int GetGoalY() const {return goaly;}$/;"	f	class:Experiment
GetGoalY	apps/entry_jps_plus/ScenarioLoader.h	/^	int GetGoalY() const {return goaly;}$/;"	f	class:Experiment
GetHIDTimerUPP	driver/MAC/HID Support/HIDSupport.cpp	/^EventLoopTimerUPP GetHIDTimerUPP (void)$/;"	f
GetInput	driver/MAC/HID Support/HIDSupport.cpp	/^static void GetInput (void)$/;"	f	file:
GetInputElements	driver/MAC/HID Support/HIDSupport.cpp	/^static Boolean GetInputElements (pRecDevice pDevice)$/;"	f	file:
GetMapName	apps/entry_jps/ScenarioLoader.h	/^	const char *GetMapName() const { return map.c_str(); }$/;"	f	class:Experiment
GetMapName	apps/entry_jps/ScenarioLoader.h	/^	void GetMapName(char* mymap) const {strcpy(mymap,map.c_str());}$/;"	f	class:Experiment
GetMapName	apps/entry_jps_plus/ScenarioLoader.h	/^	const char *GetMapName() const { return map.c_str(); }$/;"	f	class:Experiment
GetMapName	apps/entry_jps_plus/ScenarioLoader.h	/^	void GetMapName(char* mymap) const {strcpy(mymap,map.c_str());}$/;"	f	class:Experiment
GetMaxTimestep	apps/entry_jps/main.cpp	/^	double GetMaxTimestep()$/;"	f	struct:stats
GetMaxTimestep	apps/entry_jps_plus/main.cpp	/^	double GetMaxTimestep()$/;"	f	struct:stats
GetName	apps/entry_jps/Entry.cpp	/^const char *GetName()$/;"	f
GetName	apps/entry_jps_plus/Entry.cpp	/^const char *GetName()$/;"	f
GetNthExperiment	apps/entry_jps/ScenarioLoader.h	/^	Experiment GetNthExperiment(int which)$/;"	f	class:ScenarioLoader
GetNthExperiment	apps/entry_jps_plus/ScenarioLoader.h	/^	Experiment GetNthExperiment(int which)$/;"	f	class:ScenarioLoader
GetNumExperiments	apps/entry_jps/ScenarioLoader.h	/^	int GetNumExperiments(){return experiments.size();}$/;"	f	class:ScenarioLoader
GetNumExperiments	apps/entry_jps_plus/ScenarioLoader.h	/^	int GetNumExperiments(){return experiments.size();}$/;"	f	class:ScenarioLoader
GetOGLPos	driver/common.cpp	/^point3d GetOGLPos(int x, int y)$/;"	f
GetPath	apps/entry_jps/Entry.cpp	/^bool GetPath(void *data, xyLoc s, xyLoc g, std::vector<xyLoc> &thepath)$/;"	f
GetPath	apps/entry_jps_plus/Entry.cpp	/^bool GetPath(void *data, xyLoc s, xyLoc g, std::vector<xyLoc> &thepath)$/;"	f
GetPathLength	apps/entry_jps/main.cpp	/^	double GetPathLength()$/;"	f	struct:stats
GetPathLength	apps/entry_jps_plus/main.cpp	/^	double GetPathLength()$/;"	f	struct:stats
GetScenarioName	apps/entry_jps/ScenarioLoader.h	/^	const char *GetScenarioName() { return scenName; }$/;"	f	class:ScenarioLoader
GetScenarioName	apps/entry_jps_plus/ScenarioLoader.h	/^	const char *GetScenarioName() { return scenName; }$/;"	f	class:ScenarioLoader
GetStartX	apps/entry_jps/ScenarioLoader.h	/^	int GetStartX() const {return startx;}$/;"	f	class:Experiment
GetStartX	apps/entry_jps_plus/ScenarioLoader.h	/^	int GetStartX() const {return startx;}$/;"	f	class:Experiment
GetStartY	apps/entry_jps/ScenarioLoader.h	/^	int GetStartY() const {return starty;}$/;"	f	class:Experiment
GetStartY	apps/entry_jps_plus/ScenarioLoader.h	/^	int GetStartY() const {return starty;}$/;"	f	class:Experiment
GetTotalTime	apps/entry_jps/main.cpp	/^	double GetTotalTime()$/;"	f	struct:stats
GetTotalTime	apps/entry_jps_plus/main.cpp	/^	double GetTotalTime()$/;"	f	struct:stats
GetXScale	apps/entry_jps/ScenarioLoader.h	/^	int GetXScale() const {return scaleX;}$/;"	f	class:Experiment
GetXScale	apps/entry_jps_plus/ScenarioLoader.h	/^	int GetXScale() const {return scaleX;}$/;"	f	class:Experiment
GetYScale	apps/entry_jps/ScenarioLoader.h	/^	int GetYScale() const {return scaleY;}$/;"	f	class:Experiment
GetYScale	apps/entry_jps_plus/ScenarioLoader.h	/^	int GetYScale() const {return scaleY;}$/;"	f	class:Experiment
GraphSearchEnvironment	util/SearchEnvironment.h	/^	GraphSearchEnvironment(graph *_graph) :g(_graph) {  }$/;"	f	class:GraphSearchEnvironment
GraphSearchEnvironment	util/SearchEnvironment.h	/^class GraphSearchEnvironment : public SearchEnvironment$/;"	c
GridMapExpansionPolicy	policies/GridMapExpansionPolicy.cpp	/^GridMapExpansionPolicy::GridMapExpansionPolicy(unsigned int max)$/;"	f	class:GridMapExpansionPolicy
GridMapExpansionPolicy	policies/GridMapExpansionPolicy.h	/^class GridMapExpansionPolicy : public ExpansionPolicy$/;"	c
HEAP2_H	util/heap2.h	/^#define HEAP2_H$/;"	d
HEAP_H	util/heap.h	/^#define HEAP_H$/;"	d
HEURISTICS_OBJ	Makefile	/^HEURISTICS_OBJ = $(subst .cpp,.o,$(addprefix objs\/, $(notdir $(HEURISTICS_SRC))))$/;"	m
HEURISTICS_SRC	Makefile	/^HEURISTICS_SRC = $(wildcard heuristics\/*.cpp)$/;"	m
HEURISTIC_H	heuristics/Heuristic.h	/^#define HEURISTIC_H$/;"	d
HIDAddDevice	driver/MAC/HID Support/HID_Utilities.cpp	/^static void HIDAddDevice (pRecDevice *ppListDeviceHead, pRecDevice pNewDevice)$/;"	f	file:
HIDAddElement	driver/MAC/HID Support/HID_Utilities.cpp	/^static void HIDAddElement (CFTypeRef refElement, pRecElement * ppElementCurrent)$/;"	f	file:
HIDBuildDevice	driver/MAC/HID Support/HID_Utilities.cpp	/^static pRecDevice HIDBuildDevice (io_object_t hidDevice)$/;"	f	file:
HIDBuildDeviceList	driver/MAC/HID Support/HID_Utilities.cpp	/^Boolean HIDBuildDeviceList (UInt32 usagePage, UInt32 usage)$/;"	f
HIDBuildMultiDeviceList	driver/MAC/HID Support/HID_Utilities.cpp	/^Boolean HIDBuildMultiDeviceList (UInt32 *pUsagePage, UInt32 *pUsage, UInt32 numDeviceTypes)$/;"	f
HIDCalibrateValue	driver/MAC/HID Support/HID_Utilities.cpp	/^SInt32 HIDCalibrateValue (SInt32 value, pRecElement pElement)$/;"	f
HIDCloseReleaseInterface	driver/MAC/HID Support/HID_Queue_Utilities.cpp	/^IOReturn HIDCloseReleaseInterface (pRecDevice pDevice)$/;"	f
HIDCompareUpdateDeviceList	driver/MAC/HID Support/HID_Utilities.cpp	/^static Boolean HIDCompareUpdateDeviceList (pRecDevice *ppListDeviceHead, pRecDevice *ppNewDeviceList)$/;"	f	file:
HIDConfigureAction	driver/MAC/HID Support/HID_Config_Utilities.cpp	/^unsigned char HIDConfigureAction (pRecDevice * ppDevice, pRecElement * ppElement, float timeout)$/;"	f
HIDConfigureSingleDeviceAction	driver/MAC/HID Support/HID_Config_Utilities.cpp	/^unsigned char HIDConfigureSingleDeviceAction (pRecDevice pDevice, pRecElement * ppElement, float timeout)$/;"	f
HIDCountCurrentDevices	driver/MAC/HID Support/HID_Utilities.cpp	/^static UInt32 HIDCountCurrentDevices (pRecDevice pDeviceList)$/;"	f	file:
HIDCountDeviceElements	driver/MAC/HID Support/HID_Utilities.cpp	/^UInt32 HIDCountDeviceElements (pRecDevice pDevice, HIDElementTypeMask typeMask)$/;"	f
HIDCountDevices	driver/MAC/HID Support/HID_Utilities.cpp	/^UInt32 HIDCountDevices (void)$/;"	f
HIDCreateMultiTypeDeviceList	driver/MAC/HID Support/HID_Utilities.cpp	/^static pRecDevice HIDCreateMultiTypeDeviceList (UInt32 *usagePage, UInt32 *usage, UInt32 numDeviceTypes)$/;"	f	file:
HIDCreateOpenDeviceInterface	driver/MAC/HID Support/HID_Queue_Utilities.cpp	/^IOReturn HIDCreateOpenDeviceInterface (io_object_t hidDevice, pRecDevice pDevice)$/;"	f
HIDCreateQueue	driver/MAC/HID Support/HID_Queue_Utilities.cpp	/^static IOReturn HIDCreateQueue (pRecDevice pDevice)$/;"	f	file:
HIDCreateSingleTypeDeviceList	driver/MAC/HID Support/HID_Utilities.cpp	/^static pRecDevice HIDCreateSingleTypeDeviceList (io_iterator_t hidObjectIterator)$/;"	f	file:
HIDDequeueDevice	driver/MAC/HID Support/HID_Queue_Utilities.cpp	/^unsigned long  HIDDequeueDevice (pRecDevice pDevice)$/;"	f
HIDDequeueElement	driver/MAC/HID Support/HID_Queue_Utilities.cpp	/^unsigned long  HIDDequeueElement (pRecDevice pDevice, pRecElement pElement)$/;"	f
HIDDisposeDevice	driver/MAC/HID Support/HID_Utilities.cpp	/^static pRecDevice HIDDisposeDevice (pRecDevice *ppDevice)$/;"	f	file:
HIDDisposeDeviceElements	driver/MAC/HID Support/HID_Utilities.cpp	/^static void HIDDisposeDeviceElements (pRecElement pElement)$/;"	f	file:
HIDDisposeReleaseQueue	driver/MAC/HID Support/HID_Queue_Utilities.cpp	/^static IOReturn HIDDisposeReleaseQueue (pRecDevice pDevice)$/;"	f	file:
HIDDumpDevice	driver/MAC/HID Support/HID_Utilities.cpp	/^void HIDDumpDevice (pRecDevice pDevice)$/;"	f
HIDDumpDeviceList	driver/MAC/HID Support/HID_Utilities.cpp	/^void HIDDumpDeviceList (pRecDevice pDeviceList)$/;"	f
HIDElementTypeMask	driver/MAC/HID Support/HID_Utilities.h	/^enum HIDElementTypeMask$/;"	g
HIDElementTypeMask	driver/MAC/HID Support/HID_Utilities.h	/^typedef enum HIDElementTypeMask HIDElementTypeMask;$/;"	t	typeref:enum:HIDElementTypeMask
HIDElementTypeMask	driver/MAC/HID Support/HID_Utilities_External.h	/^enum HIDElementTypeMask$/;"	g
HIDElementTypeMask	driver/MAC/HID Support/HID_Utilities_External.h	/^typedef enum HIDElementTypeMask HIDElementTypeMask;$/;"	t	typeref:enum:HIDElementTypeMask
HIDFindDeviceInList	driver/MAC/HID Support/HID_Utilities.cpp	/^static Boolean HIDFindDeviceInList (pRecDevice pDeviceList, pRecDevice pFindDevice)$/;"	f	file:
HIDGetCollectionElements	driver/MAC/HID Support/HID_Utilities.cpp	/^static void HIDGetCollectionElements (CFMutableDictionaryRef deviceProperties, pRecElement *ppCurrentCollection)$/;"	f	file:
HIDGetDeviceElement	driver/MAC/HID Support/HID_Utilities.cpp	/^static pRecElement HIDGetDeviceElement (pRecElement pElement, HIDElementTypeMask typeMask)$/;"	f	file:
HIDGetDeviceInfo	driver/MAC/HID Support/HID_Utilities.cpp	/^static void HIDGetDeviceInfo (io_object_t hidDevice, CFMutableDictionaryRef hidProperties, pRecDevice pDevice)$/;"	f	file:
HIDGetElementConfig	driver/MAC/HID Support/HID_Config_Utilities.cpp	/^long HIDGetElementConfig (pRecSaveHID pConfigRec, pRecDevice * ppDevice, pRecElement * ppElement)$/;"	f
HIDGetElementInfo	driver/MAC/HID Support/HID_Utilities.cpp	/^static void HIDGetElementInfo (CFTypeRef refElement, pRecElement pElement)$/;"	f	file:
HIDGetElementValue	driver/MAC/HID Support/HID_Queue_Utilities.cpp	/^long HIDGetElementValue (pRecDevice pDevice, pRecElement pElement)$/;"	f
HIDGetElements	driver/MAC/HID Support/HID_Utilities.cpp	/^static void HIDGetElements (CFTypeRef refElementCurrent, pRecElement *ppCurrentElement)$/;"	f	file:
HIDGetElementsCFArrayHandler	driver/MAC/HID Support/HID_Utilities.cpp	/^static void HIDGetElementsCFArrayHandler (const void * value, void * parameter)$/;"	f	file:
HIDGetEvent	driver/MAC/HID Support/HID_Queue_Utilities.cpp	/^unsigned char HIDGetEvent (pRecDevice pDevice, void * pHIDEvent)$/;"	f
HIDGetFirstDevice	driver/MAC/HID Support/HID_Utilities.cpp	/^pRecDevice HIDGetFirstDevice (void)$/;"	f
HIDGetFirstDeviceElement	driver/MAC/HID Support/HID_Utilities.cpp	/^pRecElement HIDGetFirstDeviceElement (pRecDevice pDevice, HIDElementTypeMask typeMask)$/;"	f
HIDGetIterator	driver/MAC/HID Support/HID_Utilities.cpp	/^static io_iterator_t HIDGetIterator (const mach_port_t masterPort, UInt32 usagePage, UInt32 usage)$/;"	f	file:
HIDGetNextDevice	driver/MAC/HID Support/HID_Utilities.cpp	/^pRecDevice HIDGetNextDevice (pRecDevice pDevice)$/;"	f
HIDGetNextDeviceElement	driver/MAC/HID Support/HID_Utilities.cpp	/^pRecElement HIDGetNextDeviceElement (pRecElement pElement, HIDElementTypeMask typeMask)$/;"	f
HIDGetPreviousDeviceElement	driver/MAC/HID Support/HID_Utilities.cpp	/^pRecElement HIDGetPreviousDeviceElement (pRecElement pElement, HIDElementTypeMask typeMask)$/;"	f
HIDGetTypeName	driver/MAC/HID Support/HID_Utilities.cpp	/^void HIDGetTypeName (unsigned long type, char * cstrName)$/;"	f
HIDGetUsageName	driver/MAC/HID Support/HID_Utilities.cpp	/^void HIDGetUsageName (long valueUsagePage, long valueUsage, char * cstrName)$/;"	f
HIDHaveDeviceList	driver/MAC/HID Support/HID_Utilities.cpp	/^Boolean HIDHaveDeviceList (void)$/;"	f
HIDIsDeviceQueueEmpty	driver/MAC/HID Support/HID_Queue_Utilities.cpp	/^static unsigned char HIDIsDeviceQueueEmpty (pRecDevice pDevice)$/;"	f	file:
HIDMatchElementTypeMask	driver/MAC/HID Support/HID_Utilities.cpp	/^static Boolean HIDMatchElementTypeMask (IOHIDElementType type, HIDElementTypeMask typeMask)$/;"	f	file:
HIDMergeDeviceList	driver/MAC/HID Support/HID_Utilities.cpp	/^static void HIDMergeDeviceList (pRecDevice *ppNewDeviceList, pRecDevice *ppDeviceList)$/;"	f	file:
HIDMoveDevice	driver/MAC/HID Support/HID_Utilities.cpp	/^static pRecDevice HIDMoveDevice (pRecDevice *ppListDeviceHead, pRecDevice pNewDevice, pRecDevice *ppOldListDeviceHead)$/;"	f	file:
HIDQueueDevice	driver/MAC/HID Support/HID_Queue_Utilities.cpp	/^unsigned long  HIDQueueDevice (pRecDevice pDevice)$/;"	f
HIDQueueElement	driver/MAC/HID Support/HID_Queue_Utilities.cpp	/^unsigned long  HIDQueueElement (pRecDevice pDevice, pRecElement pElement)$/;"	f
HIDReleaseAllDeviceQueues	driver/MAC/HID Support/HID_Queue_Utilities.cpp	/^IOReturn HIDReleaseAllDeviceQueues (void)$/;"	f
HIDReleaseDeviceList	driver/MAC/HID Support/HID_Utilities.cpp	/^void HIDReleaseDeviceList (void)$/;"	f
HIDReportError	driver/MAC/HID Support/HID_Error_Handler.cpp	/^void HIDReportError (char * strError)$/;"	f
HIDReportErrorNum	driver/MAC/HID Support/HID_Error_Handler.cpp	/^void HIDReportErrorNum (char * strError, long numError)$/;"	f
HIDRestoreElementConfig	driver/MAC/HID Support/HID_Config_Utilities.cpp	/^long HIDRestoreElementConfig (FILE * fileRef, pRecDevice * ppDevice, pRecElement * ppElement)$/;"	f
HIDSaveElementConfig	driver/MAC/HID Support/HID_Config_Utilities.cpp	/^void HIDSaveElementConfig (FILE * fileRef, pRecDevice pDevice, pRecElement pElement, long actionCookie)$/;"	f
HIDScaleValue	driver/MAC/HID Support/HID_Utilities.cpp	/^SInt32 HIDScaleValue (SInt32 value, pRecElement pElement)$/;"	f
HIDSetElementConfig	driver/MAC/HID Support/HID_Config_Utilities.cpp	/^void HIDSetElementConfig (pRecSaveHID pConfigRec, pRecDevice pDevice, pRecElement pElement, long actionCookie)$/;"	f
HIDSetUpMatchingDictionary	driver/MAC/HID Support/HID_Utilities.cpp	/^static CFMutableDictionaryRef HIDSetUpMatchingDictionary (UInt32 usagePage, UInt32 usage)$/;"	f	file:
HIDTimer	driver/MAC/HID Support/HIDSupport.cpp	/^pascal void HIDTimer (EventLoopTimerRef inTimer, void* )$/;"	f
HIDTopLevelElementHandler	driver/MAC/HID Support/HID_Utilities.cpp	/^static void HIDTopLevelElementHandler (const void * value, void * parameter)$/;"	f	file:
HIDUpdateDeviceList	driver/MAC/HID Support/HID_Utilities.cpp	/^Boolean HIDUpdateDeviceList (UInt32 *pUsagePage, UInt32 *pUsage, UInt32 numDeviceTypes)$/;"	f
HOGCONFIG_H	util/HogConfig.h	/^#define HOGCONFIG_H$/;"	d
HOGCORE_INCLUDE	apps/apps.mk	/^HOGCORE_INCLUDE = -I..\/jump -I..\/hpa -I..\/rsr -I..\/abstraction -I..\/driver -I..\/shared \\$/;"	m
HOGCORE_OBJ	Makefile	/^HOGCORE_OBJ = $(UTIL_OBJ) $(SIMULATION_OBJ) $(ABSTRACTION_OBJ) \\$/;"	m
HOGHOME	driver/common.cpp	/^char* HOGHOME=0;$/;"	v
HOGINCLUDES	Makefile	/^HOGINCLUDES = -I.\/jump -I.\/hpa -I.\/rsr -I.\/abstraction -I.\/driver -I.\/shared -I.\/simulation -I.\/util \\$/;"	m
HPASTAR_OBJ	Makefile	/^HPASTAR_OBJ = $(subst .cpp,.o,$(addprefix objs\/, $(notdir $(HPASTAR_SRC))))$/;"	m
HPASTAR_SRC	Makefile	/^HPASTAR_SRC = $(wildcard hpa\/*.cpp)$/;"	m
HaveOpenGLCapsChanged	driver/MAC/macGlCheck.cpp	/^unsigned char HaveOpenGLCapsChanged (GLCaps aDisplayCaps[], $/;"	f
Heuristic	heuristics/Heuristic.h	/^		Heuristic() { }$/;"	f	class:Heuristic
Heuristic	heuristics/Heuristic.h	/^class Heuristic$/;"	c
HogConfig	util/HogConfig.cpp	/^HogConfig::HogConfig()$/;"	f	class:HogConfig
HogConfig	util/HogConfig.cpp	/^HogConfig::HogConfig(const char* filename_)$/;"	f	class:HogConfig
HogConfig	util/HogConfig.h	/^class HogConfig$/;"	c
IEDGEFACTORY_H	util/IEdgeFactory.h	/^#define IEDGEFACTORY_H$/;"	d
IEXPANSIONPOLICYFACTORY_H	policies/IExpansionPolicyFactory.h	/^#define IEXPANSIONPOLICYFACTORY_H$/;"	d
IEdgeFactory	util/IEdgeFactory.h	/^class IEdgeFactory$/;"	c
IExpansionPolicyFactory	policies/IExpansionPolicyFactory.h	/^		IExpansionPolicyFactory() { }$/;"	f	class:IExpansionPolicyFactory
IExpansionPolicyFactory	policies/IExpansionPolicyFactory.h	/^class IExpansionPolicyFactory$/;"	c
IHEURISTICFACTORY_H	heuristics/IHeuristicFactory.h	/^#define IHEURISTICFACTORY_H$/;"	d
IHeuristicFactory	heuristics/IHeuristicFactory.h	/^		IHeuristicFactory() { }$/;"	f	class:IHeuristicFactory
IHeuristicFactory	heuristics/IHeuristicFactory.h	/^class IHeuristicFactory$/;"	c
INCIDENTEDGESEXPANSIONPOLICY_H	policies/IncidentEdgesExpansionPolicy.h	/^#define INCIDENTEDGESEXPANSIONPOLICY_H$/;"	d
INCIDENTEDGESPOLICYFACTORY_H	policies/IncidentEdgesPolicyFactory.h	/^#define INCIDENTEDGESPOLICYFACTORY_H$/;"	d
INODEFACTORY_H	util/INodeFactory.h	/^#define INODEFACTORY_H$/;"	d
INSERTIONPOLICY_H	policies/InsertionPolicy.h	/^#define INSERTIONPOLICY_H$/;"	d
INodeFactory	util/INodeFactory.h	/^class INodeFactory$/;"	c
ISearchAlgorithmFactory	shared/ISearchAlgorithmFactory.h	/^		ISearchAlgorithmFactory() { }$/;"	f	class:ISearchAlgorithmFactory
ISearchAlgorithmFactory	shared/ISearchAlgorithmFactory.h	/^class ISearchAlgorithmFactory$/;"	c
IncidentEdgesExpansionPolicy	policies/IncidentEdgesExpansionPolicy.cpp	/^IncidentEdgesExpansionPolicy::IncidentEdgesExpansionPolicy($/;"	f	class:IncidentEdgesExpansionPolicy
IncidentEdgesExpansionPolicy	policies/IncidentEdgesExpansionPolicy.h	/^class IncidentEdgesExpansionPolicy : public SelectiveExpansionPolicy$/;"	c
IncidentEdgesPolicyFactory	policies/IncidentEdgesPolicyFactory.cpp	/^IncidentEdgesPolicyFactory::IncidentEdgesPolicyFactory(graphAbstraction* map)$/;"	f	class:IncidentEdgesPolicyFactory
IncidentEdgesPolicyFactory	policies/IncidentEdgesPolicyFactory.h	/^class IncidentEdgesPolicyFactory : public IExpansionPolicyFactory$/;"	c
IndexTable	util/heap2.h	/^	typedef __gnu_cxx::hash_map<OBJ, unsigned int, HashKey, EqKey > IndexTable;$/;"	t	class:heap2
InitHIDInputArray	driver/MAC/HID Support/HIDSupport.cpp	/^static void InitHIDInputArray (void)$/;"	f	file:
InsertionPolicy	policies/InsertionPolicy.cpp	/^InsertionPolicy::InsertionPolicy()$/;"	f	class:InsertionPolicy
InsertionPolicy	policies/InsertionPolicy.h	/^class InsertionPolicy$/;"	c
InvertGLImage	driver/MAC/mac_main.cpp	/^void InvertGLImage(char *imageData, long imageSize, long rowBytes)$/;"	f
JUMPINFO_H	jump/JumpInfo.h	/^#define JUMPINFO_H$/;"	d
JUMPPOINTABSTRACTION_H	jump/JumpPointAbstraction.h	/^#define JUMPPOINTABSTRACTION_H$/;"	d
JUMPPOINTEXPANSIONPOLICY_H	jump/JumpPointExpansionPolicy.h	/^#define JUMPPOINTEXPANSIONPOLICY_H$/;"	d
JUMPPOINTLOCATOR_H	jump/JumpPointLocator.h	/^#define JUMPPOINTLOCATOR_H$/;"	d
JUMPPOINTREFINEMENTPOLICY_H	jump/JumpPointRefinementPolicy.h	/^#define JUMPPOINTREFINEMENTPOLICY_H$/;"	d
JUMPPOINTSEARCH_H	jump/JumpPointSearch.h	/^#define JUMPPOINTSEARCH_H$/;"	d
JUMP_H	jump/Jump.h	/^#define JUMP_H$/;"	d
JUMP_OBJ	Makefile	/^JUMP_OBJ = $(subst .cpp,.o,$(addprefix objs\/, $(notdir $(JUMP_SRC))))$/;"	m
JUMP_SRC	Makefile	/^JUMP_SRC = $(wildcard jump\/*.cpp)$/;"	m
Jump	jump/Jump.h	/^namespace Jump$/;"	n
JumpInfo	jump/JumpInfo.cpp	/^JumpInfo::JumpInfo()$/;"	f	class:JumpInfo
JumpInfo	jump/JumpInfo.cpp	/^JumpInfo::JumpInfo(JumpInfo& other)$/;"	f	class:JumpInfo
JumpInfo	jump/JumpInfo.h	/^class JumpInfo$/;"	c
JumpPointAbstraction	jump/JumpPointAbstraction.cpp	/^JumpPointAbstraction::JumpPointAbstraction(Map* _m, INodeFactory* _nf, $/;"	f	class:JumpPointAbstraction
JumpPointAbstraction	jump/JumpPointAbstraction.cpp	/^JumpPointAbstraction::JumpPointAbstraction(Map* _m, const char* graphfile, $/;"	f	class:JumpPointAbstraction
JumpPointAbstraction	jump/JumpPointAbstraction.h	/^class JumpPointAbstraction : public mapAbstraction$/;"	c
JumpPointExpansionPolicy	jump/JumpPointExpansionPolicy.cpp	/^JumpPointExpansionPolicy::JumpPointExpansionPolicy(JumpPointLocator* _jpl)$/;"	f	class:JumpPointExpansionPolicy
JumpPointExpansionPolicy	jump/JumpPointExpansionPolicy.h	/^class JumpPointExpansionPolicy : public ExpansionPolicy$/;"	c
JumpPointLocator	jump/JumpPointLocator.cpp	/^JumpPointLocator::JumpPointLocator(mapAbstraction* _map)$/;"	f	class:JumpPointLocator
JumpPointLocator	jump/JumpPointLocator.h	/^class JumpPointLocator$/;"	c
JumpPointRefinementPolicy	jump/JumpPointRefinementPolicy.cpp	/^JumpPointRefinementPolicy::JumpPointRefinementPolicy(mapAbstraction* _map,$/;"	f	class:JumpPointRefinementPolicy
JumpPointRefinementPolicy	jump/JumpPointRefinementPolicy.h	/^class JumpPointRefinementPolicy : public RefinementPolicy$/;"	c
JumpPointSearch	jump/JumpPointSearch.cpp	/^JumpPointSearch::JumpPointSearch(Heuristic* _heuristic, mapAbstraction* _map,$/;"	f	class:JumpPointSearch
JumpPointSearch	jump/JumpPointSearch.h	/^class JumpPointSearch : public searchAlgorithm$/;"	c
LIBFLAGS	Makefile	/^LIBFLAGS = -Lapps\/libs -Llibs$/;"	m
LIBFLAGS	apps/apps.mk	/^    LIBFLAGS = -Lapps\/libs -L\/lib\/w32api$/;"	m
LIBFLAGS	apps/apps.mk	/^    LIBFLAGS = -Lapps\/libs -L\/usr\/lib -L$(HOME)\/lib -L\/opt\/local\/lib -L\/usr\/local\/lib$/;"	m
LIBFLAGS	apps/apps.mk	/^  LIBFLAGS = -framework AppKit -framework Foundation$/;"	m
LOCAL_PATH	simulation/unitSimulation.h	/^#define LOCAL_PATH$/;"	d
LoadMap	apps/entry_jps/main.cpp	/^void LoadMap(const char *fname, std::vector<bool> &map, int &width, int &height)$/;"	f
LoadMap	apps/entry_jps_plus/main.cpp	/^void LoadMap(const char *fname, std::vector<bool> &map, int &width, int &height)$/;"	f
MANHATTANHEURISTICFACTORY_H	heuristics/ManhattanHeuristicFactory.h	/^#define MANHATTANHEURISTICFACTORY_H$/;"	d
MANHATTANHEURISTIC_H	heuristics/ManhattanHeuristic.h	/^#define MANHATTANHEURISTIC_H$/;"	d
MAPABSTRACTION_H	abstraction/mapAbstraction.h	/^#define MAPABSTRACTION_H$/;"	d
MAPFLATABSTRACTION_H	abstraction/mapFlatAbstraction.h	/^#define MAPFLATABSTRACTION_H$/;"	d
MAPOVERLAY_H	util/mapOverlay.h	/^#define MAPOVERLAY_H$/;"	d
MAPPROVIDERINTERFACE_H	abstraction/mapProvider.h	/^#define MAPPROVIDERINTERFACE_H$/;"	d
MAPQUADTREEABSTRACTION_H	abstraction/mapQuadTreeAbstraction.h	/^#define MAPQUADTREEABSTRACTION_H$/;"	d
MAP_H	util/map.h	/^#define MAP_H$/;"	d
MAXINT	util/graph.h	/^#define MAXINT /;"	d
MAXTRIES	extras/ScenarioManager.h	/^	const int MAXTRIES=10000000;$/;"	m	namespace:ScenarioManagerNS
MAX_DEPTH	jump/RecursiveJumpPointExpansionPolicy.h	/^		unsigned int MAX_DEPTH; \/\/ maximum recursion depth$/;"	m	class:RecursiveJumpPointExpansionPolicy
ManhattanHeuristic	heuristics/ManhattanHeuristic.cpp	/^ManhattanHeuristic::ManhattanHeuristic()$/;"	f	class:ManhattanHeuristic
ManhattanHeuristic	heuristics/ManhattanHeuristic.h	/^class ManhattanHeuristic : public Heuristic$/;"	c
ManhattanHeuristicFactory	heuristics/ManhattanHeuristicFactory.cpp	/^ManhattanHeuristicFactory::ManhattanHeuristicFactory()$/;"	f	class:ManhattanHeuristicFactory
ManhattanHeuristicFactory	heuristics/ManhattanHeuristicFactory.h	/^class ManhattanHeuristicFactory : public IHeuristicFactory$/;"	c
Map	util/map.cpp	/^Map::Map(FILE *f)$/;"	f	class:Map
Map	util/map.cpp	/^Map::Map(Map *m)$/;"	f	class:Map
Map	util/map.cpp	/^Map::Map(const char *filename)$/;"	f	class:Map
Map	util/map.cpp	/^Map::Map(long _width, long _height)$/;"	f	class:Map
Map	util/map.cpp	/^Map::Map(long _width, long _height, std::vector<bool>& mapData)$/;"	f	class:Map
Map	util/map.cpp	/^Map::Map(std::istringstream &\/*data*\/)$/;"	f	class:Map
Map	util/map.h	/^class Map {$/;"	c
MapChar	driver/MAC/HID Support/HID_Utilities.cpp	/^static char MapChar (char c)$/;"	f	file:
MapOverlay	util/mapOverlay.cpp	/^MapOverlay::MapOverlay(Map *_m)$/;"	f	class:MapOverlay
MapOverlay	util/mapOverlay.h	/^class MapOverlay {$/;"	c
MapSearchEnvironment	util/SearchEnvironment.h	/^	MapSearchEnvironment(Map *_map) :map(_map) {  }$/;"	f	class:MapSearchEnvironment
MapSearchEnvironment	util/SearchEnvironment.h	/^class MapSearchEnvironment : public SearchEnvironment$/;"	c
N	jump/Jump.h	/^		N = 1, $/;"	e	enum:Jump::__anon19
NE	jump/Jump.h	/^		NE = 16, $/;"	e	enum:Jump::__anon19
NODEFACTORY_H	util/NodeFactory.h	/^#define NODEFACTORY_H$/;"	d
NODEFILTER_H	filters/NodeFilter.h	/^#define NODEFILTER_H$/;"	d
NOFILTER_H	filters/NoFilter.h	/^#define NOFILTER_H$/;"	d
NOINSERTIONPOLICY_H	policies/NoInsertionPolicy.h	/^#define NOINSERTIONPOLICY_H$/;"	d
NONE	jump/Jump.h	/^		NONE = 0,$/;"	e	enum:Jump::__anon19
NOREFINEMENTPOLICY_H	policies/NoRefinementPolicy.h	/^#define NOREFINEMENTPOLICY_H$/;"	d
NW	jump/Jump.h	/^		NW = 32, $/;"	e	enum:Jump::__anon19
NoFilter	filters/NoFilter.h	/^		NoFilter() { }$/;"	f	class:NoFilter
NoFilter	filters/NoFilter.h	/^class NoFilter : public NodeFilter$/;"	c
NoInsertionPolicy	policies/NoInsertionPolicy.cpp	/^NoInsertionPolicy::NoInsertionPolicy()$/;"	f	class:NoInsertionPolicy
NoInsertionPolicy	policies/NoInsertionPolicy.h	/^class NoInsertionPolicy : public InsertionPolicy$/;"	c
NoRefinementPolicy	policies/NoRefinementPolicy.cpp	/^NoRefinementPolicy::NoRefinementPolicy() : RefinementPolicy()$/;"	f	class:NoRefinementPolicy
NoRefinementPolicy	policies/NoRefinementPolicy.h	/^class NoRefinementPolicy : public RefinementPolicy$/;"	c
NodeEqual	shared/aStar.h	/^	struct NodeEqual {$/;"	s	namespace:AStar3Util
NodeFactory	util/NodeFactory.h	/^ class NodeFactory : public INodeFactory$/;"	c
NodeFilter	filters/NodeFilter.h	/^		NodeFilter() {}$/;"	f	class:NodeFilter
NodeFilter	filters/NodeFilter.h	/^class NodeFilter $/;"	c
NodeHash	shared/aStar.h	/^	struct NodeHash {$/;"	s	namespace:AStar3Util
NodeHashTable	util/GenericIDAStar.h	/^typedef __gnu_cxx::hash_map<uint32_t, double> NodeHashTable;$/;"	t
NodeLookupTable	shared/aStar.h	/^		AStar3Util::NodeHash, AStar3Util::NodeEqual > NodeLookupTable;$/;"	t	namespace:AStar3Util
OCTILEDISTANCEREFINEMENTPOLICY_H	policies/OctileDistanceRefinementPolicy.h	/^#define OCTILEDISTANCEREFINEMENTPOLICY_H$/;"	d
OCTILEEXPANSIONPOLICY_H	policies/OctileExpansionPolicy.h	/^#define OCTILEEXPANSIONPOLICY_H$/;"	d
OCTILEHEURISTICFACTORY_H	heuristics/OctileHeuristicFactory.h	/^#define OCTILEHEURISTICFACTORY_H$/;"	d
OCTILEHEURISTIC_H	heuristics/OctileHeuristic.h	/^#define OCTILEHEURISTIC_H$/;"	d
OFFLINEJUMPPOINTLOCATOR_H	jump/OfflineJumpPointLocator.h	/^#define OFFLINEJUMPPOINTLOCATOR_H$/;"	d
ONE	util/map.h	/^static const double ONE = 1.0f;$/;"	v
ONE_OVER_ROOT_TWO	util/map.h	/^static const double ONE_OVER_ROOT_TWO = 1.0\/ROOT_TWO;\/\/0.707106781f;$/;"	v
ONLINEJUMPPOINTLOCATOR_H	jump/OnlineJumpPointLocator.h	/^#define ONLINEJUMPPOINTLOCATOR_H$/;"	d
OctileDistanceRefinementPolicy	policies/OctileDistanceRefinementPolicy.cpp	/^OctileDistanceRefinementPolicy::OctileDistanceRefinementPolicy($/;"	f	class:OctileDistanceRefinementPolicy
OctileDistanceRefinementPolicy	policies/OctileDistanceRefinementPolicy.h	/^class OctileDistanceRefinementPolicy : public RefinementPolicy$/;"	c
OctileExpansionPolicy	policies/OctileExpansionPolicy.cpp	/^OctileExpansionPolicy::OctileExpansionPolicy()$/;"	f	class:OctileExpansionPolicy
OctileExpansionPolicy	policies/OctileExpansionPolicy.h	/^class OctileExpansionPolicy : public GridMapExpansionPolicy$/;"	c
OctileHeuristic	heuristics/OctileHeuristic.cpp	/^OctileHeuristic::OctileHeuristic()$/;"	f	class:OctileHeuristic
OctileHeuristic	heuristics/OctileHeuristic.h	/^class OctileHeuristic : public Heuristic$/;"	c
OctileHeuristicFactory	heuristics/OctileHeuristicFactory.cpp	/^OctileHeuristicFactory::OctileHeuristicFactory()$/;"	f	class:OctileHeuristicFactory
OctileHeuristicFactory	heuristics/OctileHeuristicFactory.h	/^class OctileHeuristicFactory : public IHeuristicFactory$/;"	c
OfflineJumpPointLocator	jump/OfflineJumpPointLocator.cpp	/^OfflineJumpPointLocator::OfflineJumpPointLocator(JumpPointAbstraction* _map)$/;"	f	class:OfflineJumpPointLocator
OfflineJumpPointLocator	jump/OfflineJumpPointLocator.h	/^class OfflineJumpPointLocator : public JumpPointLocator$/;"	c
OnlineJumpPointLocator	jump/OnlineJumpPointLocator.cpp	/^OnlineJumpPointLocator::OnlineJumpPointLocator(mapAbstraction* _map) $/;"	f	class:OnlineJumpPointLocator
OnlineJumpPointLocator	jump/OnlineJumpPointLocator.h	/^class OnlineJumpPointLocator : public JumpPointLocator$/;"	c
PATH_H	util/path.h	/^#define PATH_H$/;"	d
PI	util/glUtil.h	/^static const double PI = 3.141592653589793238462643;$/;"	v
PID2	util/glUtil.h	/^static const double PID2 = PI\/2;$/;"	v
POLICIES_OBJ	Makefile	/^POLICIES_OBJ = $(subst .cpp,.o,$(addprefix objs\/, $(notdir $(POLICIES_SRC))))$/;"	m
POLICIES_SRC	Makefile	/^POLICIES_SRC = $(wildcard policies\/*.cpp)$/;"	m
PQueue	shared/aStar.h	/^		AStar3Util::SearchNodeEqual, AStar3Util::SearchNodeCompare> PQueue;$/;"	t	namespace:AStar3Util
PROBLEMINSTANCE_H	util/ProblemInstance.h	/^#define PROBLEMINSTANCE_H$/;"	d
PrepareForSearch	apps/entry_jps/Entry.cpp	/^void *PrepareForSearch(std::vector<bool> &bits, int w, int h, const char *filename)$/;"	f
PrepareForSearch	apps/entry_jps_plus/Entry.cpp	/^void *PrepareForSearch(std::vector<bool> &bits, int w, int h, const char *filename)$/;"	f
PreprocessMap	apps/entry_jps/Entry.cpp	/^void PreprocessMap(std::vector<bool> &bits, int width, int height, const char *filename)$/;"	f
PreprocessMap	apps/entry_jps_plus/Entry.cpp	/^void PreprocessMap(std::vector<bool> &bits, int width, int height, const char *filename)$/;"	f
Print	driver/common.h	/^	void Print()$/;"	f	class:commandLineCallbackData
ProblemInstance	util/ProblemInstance.cpp	/^ProblemInstance::ProblemInstance(node* start, node* goal, mapAbstraction* map,$/;"	f	class:ProblemInstance
ProblemInstance	util/ProblemInstance.h	/^class ProblemInstance$/;"	c
RECURSIVEJUMPPOINTEXPANSIONPOLICY_H	jump/RecursiveJumpPointExpansionPolicy.h	/^#define RECURSIVEJUMPPOINTEXPANSIONPOLICY_H$/;"	d
REFINEMENTPOLICY_H	policies/RefinementPolicy.h	/^#define REFINEMENTPOLICY_H$/;"	d
RESERVATIONPROVIDER_H	simulation/reservationProvider.h	/^#define RESERVATIONPROVIDER_H$/;"	d
ROOT2D2	util/glUtil.h	/^static const double ROOT2D2 = 0.7071067811865475;$/;"	v
ROOT_TWO	util/map.h	/^static const double ROOT_TWO = 1.414213562f;\/\/1.5f?$/;"	v
RSR_OBJ	Makefile	/^RSR_OBJ = $(subst .cpp,.o,$(addprefix objs\/, $(notdir $(RSR_SRC))))$/;"	m
RSR_SRC	Makefile	/^RSR_SRC = $(wildcard rsr\/*.cpp)$/;"	m
RecursiveJumpPointExpansionPolicy	jump/RecursiveJumpPointExpansionPolicy.cpp	/^RecursiveJumpPointExpansionPolicy::RecursiveJumpPointExpansionPolicy($/;"	f	class:RecursiveJumpPointExpansionPolicy
RecursiveJumpPointExpansionPolicy	jump/RecursiveJumpPointExpansionPolicy.h	/^class RecursiveJumpPointExpansionPolicy : $/;"	c
RefinementPolicy	policies/RefinementPolicy.cpp	/^RefinementPolicy::RefinementPolicy()$/;"	f	class:RefinementPolicy
RefinementPolicy	policies/RefinementPolicy.h	/^class RefinementPolicy$/;"	c
S	jump/Jump.h	/^		S = 2, $/;"	e	enum:Jump::__anon19
SCENARIOLOADER_H	apps/entry_jps/ScenarioLoader.h	/^#define SCENARIOLOADER_H$/;"	d
SCENARIOLOADER_H	apps/entry_jps_plus/ScenarioLoader.h	/^#define SCENARIOLOADER_H$/;"	d
SCENARIOMANAGER_H	extras/ScenarioManager.h	/^#define SCENARIOMANAGER_H$/;"	d
SE	jump/Jump.h	/^		SE = 64, $/;"	e	enum:Jump::__anon19
SEARCHALGORITHMFACTORY_H	shared/ISearchAlgorithmFactory.h	/^#define SEARCHALGORITHMFACTORY_H$/;"	d
SEARCHALGORITHM_H	shared/searchAlgorithm.h	/^#define SEARCHALGORITHM_H$/;"	d
SEARCHENVIRONMENT_H	util/SearchEnvironment.h	/^#define SEARCHENVIRONMENT_H$/;"	d
SELECTIVEEXPANSIONPOLICY_H	policies/SelectiveExpansionPolicy.h	/^#define SELECTIVEEXPANSIONPOLICY_H$/;"	d
SHARED_OBJ	Makefile	/^SHARED_OBJ = $(subst .cpp,.o,$(addprefix objs\/, $(notdir $(SHARED_SRC))))$/;"	m
SHARED_SRC	Makefile	/^SHARED_SRC = $(wildcard shared\/*.cpp)$/;"	m
SHELL	apps/apps.mk	/^SHELL = \/bin\/bash$/;"	m
SIMULATION_OBJ	Makefile	/^SIMULATION_OBJ = $(subst .cpp,.o,$(addprefix objs\/, $(notdir $(SIMULATION_SRC))))$/;"	m
SIMULATION_SRC	Makefile	/^SIMULATION_SRC = $(wildcard simulation\/*.cpp)$/;"	m
SPREADEXECSEARCHALGORITHM_H	shared/spreadExecSearchAlgorithm.h	/^#define SPREADEXECSEARCHALGORITHM_H$/;"	d
STARTGROUPFLAG	Makefile	/^  STARTGROUPFLAG=$/;"	m
STARTGROUPFLAG	Makefile	/^STARTGROUPFLAG=-Wl,--start-group$/;"	m
STATCOLLECTION_H	util/statCollection.h	/^#define STATCOLLECTION_H$/;"	d
SW	jump/Jump.h	/^		SW = 128$/;"	e	enum:Jump::__anon19
SYS_CFLAGS	Makefile	/^  SYS_CFLAGS = -DOS_MAC$/;"	m
SYS_CFLAGS	Makefile	/^  SYS_CFLAGS = -Dlinux$/;"	m
SYS_CFLAGS	Makefile	/^ SYS_CFLAGS = -Dlinux $/;"	m
Save	apps/entry_jps/ScenarioLoader.cpp	/^void ScenarioLoader::Save(const char *fname)$/;"	f	class:ScenarioLoader
Save	apps/entry_jps_plus/ScenarioLoader.cpp	/^void ScenarioLoader::Save(const char *fname)$/;"	f	class:ScenarioLoader
ScenarioLoader	apps/entry_jps/ScenarioLoader.cpp	/^ScenarioLoader::ScenarioLoader(const char* fname)$/;"	f	class:ScenarioLoader
ScenarioLoader	apps/entry_jps/ScenarioLoader.h	/^	ScenarioLoader() { scenName[0] = 0; }$/;"	f	class:ScenarioLoader
ScenarioLoader	apps/entry_jps/ScenarioLoader.h	/^class ScenarioLoader{$/;"	c
ScenarioLoader	apps/entry_jps_plus/ScenarioLoader.cpp	/^ScenarioLoader::ScenarioLoader(const char* fname)$/;"	f	class:ScenarioLoader
ScenarioLoader	apps/entry_jps_plus/ScenarioLoader.h	/^	ScenarioLoader() { scenName[0] = 0; }$/;"	f	class:ScenarioLoader
ScenarioLoader	apps/entry_jps_plus/ScenarioLoader.h	/^class ScenarioLoader{$/;"	c
ScenarioManager	extras/ScenarioManager.cpp	/^ScenarioManager::ScenarioManager()$/;"	f	class:ScenarioManager
ScenarioManager	extras/ScenarioManager.h	/^class ScenarioManager : public AbstractScenarioManager$/;"	c
ScenarioManagerNS	extras/ScenarioManager.h	/^namespace ScenarioManagerNS$/;"	n
SearchEnvironment	util/SearchEnvironment.h	/^class SearchEnvironment$/;"	c
SearchNode	shared/aStar.h	/^		SearchNode(double _fCost=0, double _gCost=0, edge *_e=0, node *curr=0, node *prev=0)$/;"	f	class:AStar3Util::SearchNode
SearchNode	shared/aStar.h	/^	class SearchNode {$/;"	c	namespace:AStar3Util
SearchNodeCompare	shared/aStar.h	/^	struct SearchNodeCompare {$/;"	s	namespace:AStar3Util
SearchNodeEqual	shared/aStar.h	/^	struct SearchNodeEqual {$/;"	s	namespace:AStar3Util
SearchNodeHash	shared/aStar.h	/^	struct SearchNodeHash {$/;"	s	namespace:AStar3Util
SelectiveExpansionPolicy	policies/SelectiveExpansionPolicy.cpp	/^SelectiveExpansionPolicy::SelectiveExpansionPolicy() :$/;"	f	class:SelectiveExpansionPolicy
SelectiveExpansionPolicy	policies/SelectiveExpansionPolicy.h	/^class SelectiveExpansionPolicy : public ExpansionPolicy$/;"	c
SetLighting	driver/common.cpp	/^void SetLighting(unsigned int mode)$/;"	f
SetupHIDInputs	driver/MAC/HID Support/HIDSupport.cpp	/^static Boolean SetupHIDInputs (void)$/;"	f	file:
StartHIDInput	driver/MAC/HID Support/HIDSupport.cpp	/^void StartHIDInput (void)$/;"	f
TARGETS	Makefile	/^TARGETS =  entry_jps entry_jps_plus$/;"	m
TEXTBOX_H	driver/TextBox.h	/^#define TEXTBOX_H$/;"	d
TILEEXPANSIONPOLICY_H	policies/TileExpansionPolicy.h	/^#define TILEEXPANSIONPOLICY_H$/;"	d
TIMER_H	apps/entry_jps/Timer.h	/^#define TIMER_H$/;"	d
TIMER_H	apps/entry_jps_plus/Timer.h	/^#define TIMER_H$/;"	d
TOLERANCE	util/fpUtil.h	/^static const double TOLERANCE = 0.000001;    \/\/ floating point tolerance$/;"	v
TWO	util/map.h	/^static const double TWO = 2.0f;$/;"	v
TWOPI	util/glUtil.h	/^static const double TWOPI = 6.283185307179586476925287;$/;"	v
TextBox	driver/TextBox.cpp	/^TextBox::TextBox(char *_text, int _charLine, point3d topLeft, point3d bottomRight, double _duration, bool _deform, bool _scrolling)$/;"	f	class:TextBox
TextBox	driver/TextBox.h	/^class TextBox {$/;"	c
Tile	util/map.cpp	/^Tile::Tile()$/;"	f	class:Tile
Tile	util/map.h	/^class Tile {$/;"	c
TileExpansionPolicy	policies/TileExpansionPolicy.cpp	/^TileExpansionPolicy::TileExpansionPolicy() $/;"	f	class:TileExpansionPolicy
TileExpansionPolicy	policies/TileExpansionPolicy.h	/^class TileExpansionPolicy : public GridMapExpansionPolicy$/;"	c
Timer	apps/entry_jps/Timer.cpp	/^Timer::Timer()$/;"	f	class:Timer
Timer	apps/entry_jps/Timer.h	/^class Timer {$/;"	c
Timer	apps/entry_jps_plus/Timer.cpp	/^Timer::Timer()$/;"	f	class:Timer
Timer	apps/entry_jps_plus/Timer.h	/^class Timer {$/;"	c
Timer	extras/timer.cpp	/^Timer::Timer()$/;"	f	class:Timer
Timer	extras/timer.h	/^class Timer{$/;"	c
TooManyTriesException	extras/ScenarioManager.h	/^		TooManyTriesException(int _generated, int _target) : generated(_generated), target(_target) { }$/;"	f	class:TooManyTriesException
TooManyTriesException	extras/ScenarioManager.h	/^class TooManyTriesException : public std::exception$/;"	c
UINT32_MAX	util/SearchEnvironment.h	/^#define UINT32_MAX /;"	d
UNITGROUP_H	simulation/unitGroup.h	/^#define UNITGROUP_H$/;"	d
UNITSIMULATION_H	simulation/unitSimulation.h	/^#define UNITSIMULATION_H$/;"	d
UNITS_H	simulation/unit.h	/^#define UNITS_H$/;"	d
UTIL_OBJ	Makefile	/^UTIL_OBJ = $(subst .cpp,.o,$(addprefix objs\/, $(notdir $(UTIL_SRC))))$/;"	m
UTIL_SRC	Makefile	/^UTIL_SRC = $(wildcard util\/*.cpp)$/;"	m
VERSION	simulation/unitSimulation.cpp	/^const float VERSION = 1.0;$/;"	v
VPATH	Makefile	/^VPATH = jump\/:rsr\/:hpa\/:abstraction\/:driver\/:shared\/:simulation\/:util\/:objs\/:apps\/libs:bin\/$/;"	m
VPATH	apps/entry_jps.mk	/^VPATH = entry_jps\/:entry_jps\/objs$/;"	m
VPATH	apps/entry_jps_plus.mk	/^VPATH = entry_jps_plus\/:entry_jps_plus\/objs$/;"	m
ValidatePath	apps/entry_jps/main.cpp	/^	bool ValidatePath(int width, int height, const std::vector<bool> &mapData)$/;"	f	struct:stats
ValidatePath	apps/entry_jps_plus/main.cpp	/^	bool ValidatePath(int width, int height, const std::vector<bool> &mapData)$/;"	f	struct:stats
W	jump/Jump.h	/^		W = 8, $/;"	e	enum:Jump::__anon19
_BITVECTOR_	util/bitVector.h	/^#define _BITVECTOR_$/;"	d
_HID_Config_Utilities_h_	driver/MAC/HID Support/HID_Config_Utilities.h	/^#define _HID_Config_Utilities_h_$/;"	d
_HID_Name_Lookup_h_	driver/MAC/HID Support/HID_Name_Lookup.h	/^#define _HID_Name_Lookup_h_$/;"	d
_HID_Queue_Utilities_h_	driver/MAC/HID Support/HID_Queue_Utilities.h	/^#define _HID_Queue_Utilities_h_$/;"	d
_HID_Utilities_External_h_	driver/MAC/HID Support/HID_Utilities_External.h	/^#define _HID_Utilities_External_h_$/;"	d
_HID_Utilities_Internal_h_	driver/MAC/HID Support/HID_Utilities_Internal.h	/^#define _HID_Utilities_Internal_h_$/;"	d
_HID_Utilities_h_	driver/MAC/HID Support/HID_Utilities.h	/^#define _HID_Utilities_h_$/;"	d
__STDC_CONSTANT_MACROS	util/SearchEnvironment.h	/^#define __STDC_CONSTANT_MACROS$/;"	d
__trackball_h__	driver/trackball.h	/^#define __trackball_h__$/;"	d
_allEdges	util/graph.h	/^  std::vector<edge *> _allEdges;$/;"	m	class:node
_edges	util/graph.h	/^  std::vector<edge *> _edges;$/;"	m	class:graph
_edgesIncoming	util/graph.h	/^  std::vector<edge *> _edgesIncoming;$/;"	m	class:node
_edgesOutgoing	util/graph.h	/^  std::vector<edge *> _edgesOutgoing;$/;"	m	class:node
_elts	util/heap.h	/^  std::vector<graph_object *> _elts;$/;"	m	class:heap
_elts	util/heap2.h	/^  std::vector<OBJ> _elts;$/;"	m	class:heap2
_getDictDouble	driver/MAC/macGlCheck.cpp	/^static double _getDictDouble (CFDictionaryRef refDict, CFStringRef key)$/;"	f	file:
_getDictLong	driver/MAC/macGlCheck.cpp	/^static long _getDictLong (CFDictionaryRef refDict, CFStringRef key)$/;"	f	file:
_nodes	util/graph.h	/^  std::vector<node *> _nodes;$/;"	m	class:graph
aMap	shared/spreadExecSearchAlgorithm.h	/^	graphAbstraction *aMap;$/;"	m	class:spreadExecSearchAlgorithm
aMap	simulation/unitSimulation.h	/^	mapAbstraction *aMap;$/;"	m	class:unitSimulation
aStar	shared/aStar.h	/^	aStar() {}$/;"	f	class:aStar
aStar	shared/aStar.h	/^class aStar : public searchAlgorithm {$/;"	c
aStarName	shared/aStar3.h	/^	char aStarName[128];$/;"	m	class:aStarOld
aStarOld	shared/aStar3.cpp	/^aStarOld::aStarOld(double _weight, bool _doPathDraw)$/;"	f	class:aStarOld
aStarOld	shared/aStar3.h	/^class aStarOld : public searchAlgorithm {$/;"	c
absLevel	shared/aStar.h	/^	int absLevel;$/;"	m	class:aStar
abstr	shared/aStar.h	/^	graphAbstraction *abstr;$/;"	m	class:aStar
abstractionBFS	abstraction/mapQuadTreeAbstraction.cpp	/^void mapQuadTreeAbstraction::abstractionBFS(node *which, node *parent, int quadrant) \/\/ depth in edges...should we try literal distance?$/;"	f	class:mapQuadTreeAbstraction
abstractions	abstraction/graphAbstraction.h	/^		std::vector<graph *> abstractions;$/;"	m	class:graphAbstraction
actionCookie	driver/MAC/HID Support/HID_Config_Utilities.h	/^    long actionCookie;$/;"	m	struct:recSaveHID
actionCookie	driver/MAC/HID Support/HID_Utilities_External.h	/^    long actionCookie;$/;"	m	struct:recSaveHID
actionHistory	simulation/unitSimulation.h	/^	std::vector<timeStep> actionHistory;$/;"	m	class:unitInfo
actionRec	driver/MAC/HID Support/HIDSupport.h	/^struct actionRec \/\/ structure to store action device and element mapping and value$/;"	s
actionRec	driver/MAC/HID Support/HIDSupport.h	/^typedef struct actionRec actionRec;$/;"	t	typeref:struct:actionRec
add	util/heap.cpp	/^void heap::add(graph_object *val)$/;"	f	class:heap
add	util/heap2.h	/^void heap2<OBJ, HashKey, EqKey, CmpKey>::add(OBJ val)$/;"	f	class:heap2
addCategory	util/statCollection.cpp	/^int statCollection::addCategory(const char *category)$/;"	f	class:statCollection
addDirectedEdge	util/graph.cpp	/^void graph::addDirectedEdge(edge* e)$/;"	f	class:graph
addEdge	abstraction/mapFlatAbstraction.cpp	/^void mapFlatAbstraction::addEdge(edge *e, unsigned int)$/;"	f	class:mapFlatAbstraction
addEdge	abstraction/mapQuadTreeAbstraction.cpp	/^void mapQuadTreeAbstraction::addEdge(edge *, unsigned int)$/;"	f	class:mapQuadTreeAbstraction
addEdge	jump/JumpPointAbstraction.cpp	/^JumpPointAbstraction::addEdge(edge *e, unsigned int absLevel)$/;"	f	class:JumpPointAbstraction
addEdge	util/graph.cpp	/^void graph::addEdge(edge *e)$/;"	f	class:graph
addEdge	util/graph.cpp	/^void node::addEdge(edge *e)$/;"	f	class:node
addEdges	abstraction/mapQuadTreeAbstraction.cpp	/^void mapQuadTreeAbstraction::addEdges(graph *aGraph)$/;"	f	class:mapQuadTreeAbstraction
addExcludeFilter	util/statCollection.cpp	/^void statCollection::addExcludeFilter(char *category) \/\/ exclude only added categories$/;"	f	class:statCollection
addExperiment	extras/ScenarioManager.h	/^		void addExperiment(Experiment* newexp) { experiments.push_back(newexp); }$/;"	f	class:AbstractScenarioManager
addFilter	policies/SelectiveExpansionPolicy.cpp	/^void SelectiveExpansionPolicy::addFilter(NodeFilter* nf)$/;"	f	class:SelectiveExpansionPolicy
addFilter	util/statCollection.cpp	/^void statCollection::addFilter(char *category)$/;"	f	class:statCollection
addFrameToMovie	driver/MAC/mac_main.cpp	/^void addFrameToMovie(unsigned int which)$/;"	f
addIncludeFilter	util/statCollection.cpp	/^void statCollection::addIncludeFilter(char *category) \/\/ include only added categories$/;"	f	class:statCollection
addIntermediateNodes	jump/JumpPointSearch.cpp	/^JumpPointSearch::addIntermediateNodes(path* thepath)$/;"	f	class:JumpPointSearch
addJump	jump/JumpInfo.h	/^		inline void addJump(node* n, Jump::Direction lastdir, double cost)$/;"	f	class:JumpInfo
addMapEdges	abstraction/mapAbstraction.cpp	/^void addMapEdges(Map *m, graph *g, IEdgeFactory* ef, int x, int y, bool allowDiagonals, bool cutCorners)$/;"	f
addNeighborsToCorridor	shared/aStar.cpp	/^void aStar::addNeighborsToCorridor(graph *_g, node *n, int windowSize)$/;"	f	class:aStar
addNeighbour	jump/RecursiveJumpPointExpansionPolicy.cpp	/^RecursiveJumpPointExpansionPolicy::addNeighbour(JumpInfo& out)$/;"	f	class:RecursiveJumpPointExpansionPolicy
addNode	abstraction/mapFlatAbstraction.cpp	/^void mapFlatAbstraction::addNode(node *n)$/;"	f	class:mapFlatAbstraction
addNode	abstraction/mapQuadTreeAbstraction.cpp	/^void mapQuadTreeAbstraction::addNode(node *)$/;"	f	class:mapQuadTreeAbstraction
addNode	jump/JumpPointAbstraction.cpp	/^JumpPointAbstraction::addNode(node *n)$/;"	f	class:JumpPointAbstraction
addNode	policies/InsertionPolicy.cpp	/^InsertionPolicy::addNode(node* n)$/;"	f	class:InsertionPolicy
addNode	util/graph.cpp	/^int graph::addNode(node *n)$/;"	f	class:graph
addNodes	abstraction/mapQuadTreeAbstraction.cpp	/^void mapQuadTreeAbstraction::addNodes(graph *g)$/;"	f	class:mapQuadTreeAbstraction
addOutgoingEdge	util/graph.cpp	/^void node::addOutgoingEdge(edge* e)$/;"	f	class:node
addOwner	util/statCollection.cpp	/^int statCollection::addOwner(const char *owner)$/;"	f	class:statCollection
addPathToCache	shared/searchUnit.cpp	/^void searchUnit::addPathToCache(path *p)$/;"	f	class:searchUnit
addStat	util/statCollection.cpp	/^statCollection::statCollection() :categories(), owners(), stats() { printOutput = false; } statCollection::~statCollection() { for (unsigned int x = 0; x < categories.size(); x++) { delete [] categories[x]; categories[x] = 0; } for (unsigned int x = 0; x < owners.size(); x++) { delete [] owners[x]; owners[x] = 0; } for (unsigned int x = 0; x < excludeFilters.size(); x++) { delete [] excludeFilters[x]; excludeFilters[x] = 0; } for (unsigned int x = 0; x < includeFilters.size(); x++) { delete [] includeFilters[x]; includeFilters[x] = 0; } } \/** * Add a new stat entry for the given category, owner and value.  *\/ void statCollection::addStat(const char *category, const char *owner, double value) { if (!passFilter(category)) return; int catID, ownerID; catID = addCategory(category); ownerID = addOwner(owner); stats.resize(stats.size()+1);$/;"	f	class:statCollection
addStat	util/statCollection.cpp	/^void statCollection::addStat(const char *category, const char *owner, long value)$/;"	f	class:statCollection
addToOpenList	shared/aStar.cpp	/^void aStar::addToOpenList(node *currOpenNode, node *neighbor, edge *e)$/;"	f	class:aStar
addToRotationTrackball	driver/trackball.cpp	/^void addToRotationTrackball (float * dA, float * A)$/;"	f
addUnit	simulation/unitGroup.cpp	/^void unitGroup::addUnit(unit *u)$/;"	f	class:unitGroup
addUnit	simulation/unitSimulation.cpp	/^void unitSimulation::addUnit(unit *u)$/;"	f	class:unitSimulation
addUnit	simulation/unitSimulation.cpp	/^void unitSimulation::addUnit(unit *u, bool _blocking)$/;"	f	class:unitSimulation
addUnitGroup	simulation/unitSimulation.cpp	/^void unitSimulation::addUnitGroup(unitGroup *ug)$/;"	f	class:unitSimulation
adjacentCorners	util/map.cpp	/^bool Map::adjacentCorners(long x, long y, tCorner corner) const$/;"	f	class:Map
adjacentEdges	util/map.cpp	/^bool Map::adjacentEdges(long x, long y, tEdge edge) const$/;"	f	class:Map
advanceTime	simulation/unitSimulation.cpp	/^void unitSimulation::advanceTime(double amount)$/;"	f	class:unitSimulation
agent	simulation/unitSimulation.h	/^	unit *agent;$/;"	m	class:unitInfo
aglContext	driver/common.h	/^	AGLContext aglContext;$/;"	m	struct:recContext
aglPixFmt	driver/common.h	/^	AGLPixelFormat aglPixFmt;$/;"	m	struct:recContext
aglReportError	driver/MAC/mac_main.cpp	/^OSStatus aglReportError(void)$/;"	f
alg	util/HogConfig.h	/^		char* alg; \/\/ name of algorithm to run$/;"	m	class:HogConfig
algorithm	shared/searchUnit.h	/^	searchAlgorithm *algorithm;$/;"	m	class:searchUnit
altheap	util/altheap.cpp	/^altheap::altheap(Heuristic* heuristic, node* goal, int s) : heap(s)$/;"	f	class:altheap
altheap	util/altheap.h	/^class altheap : public heap$/;"	c
animate	driver/common.h	/^	bool animate;$/;"	m	struct:recContext
aperture	driver/common.h	/^	GLdouble aperture; \/\/ camera aperture$/;"	m	struct:__anon8
appEvtHndlr	driver/MAC/mac_main.cpp	/^static pascal OSStatus appEvtHndlr (EventHandlerCallRef myHandler, EventRef event, void* userData)$/;"	f	file:
appendTextToBuffer	driver/MAC/mac_main.cpp	/^void appendTextToBuffer(char *tempStr)$/;"	f
appendTextToBuffer	driver/main.cpp	/^void appendTextToBuffer(char *tempStr)$/;"	f
argument	driver/common.h	/^	const char *argument;$/;"	m	class:commandLineCallbackData
astar	jump/JumpPointSearch.h	/^		FlexibleAStar* astar;$/;"	m	class:JumpPointSearch
asynch	simulation/unitSimulation.h	/^	bool asynch;$/;"	m	class:unitSimulation
averageStatEntries	util/statUtil.cpp	/^double averageStatEntries(statCollection *stats, const char *category, const char *owner)$/;"	f
axis	driver/MAC/HID Support/HID_Utilities.h	/^    long axis;								\/\/ number of axis (calculated, not reported by device)$/;"	m	struct:recDevice
axis	driver/MAC/HID Support/HID_Utilities_External.h	/^    long axis;								\/\/ number of axis (calculated, not reported by device)$/;"	m	struct:recDevice
b	simulation/unit.h	/^	GLfloat r, g, b;$/;"	m	class:unit
b	util/glUtil.h	/^	GLfloat r,g,b;$/;"	m	class:recColor
backpointer	util/graph.h	/^  node* backpointer;$/;"	m	class:node
backup	driver/main.cpp	/^pRecContext backup;$/;"	v
billiardBallUnit	simulation/unit.h	/^	billiardBallUnit(int _x, int _y, int _coolOffPeriod, double _probDirChange)$/;"	f	class:billiardBallUnit
billiardBallUnit	simulation/unit.h	/^	billiardBallUnit(int _x, int _y, int _r, int _g, int _b)$/;"	f	class:billiardBallUnit
billiardBallUnit	simulation/unit.h	/^class billiardBallUnit : public unit {$/;"	c
bitVector	util/bitVector.cpp	/^bitVector::bitVector(int _size)$/;"	f	class:bitVector
bitVector	util/bitVector.h	/^class bitVector {$/;"	c
blocking	simulation/unitSimulation.h	/^	bool blocking;		\/\/ this is the default for all units added$/;"	m	class:unitSimulation
blocking	simulation/unitSimulation.h	/^	bool blocking;$/;"	m	class:unitInfo
boldFontList	driver/common.h	/^	GLuint boldFontList;$/;"	m	struct:recContext
br	driver/TextBox.h	/^	point3d tl, br;$/;"	m	class:TextBox
bucket	apps/entry_jps/ScenarioLoader.h	/^	int bucket;$/;"	m	class:Experiment
bucket	apps/entry_jps_plus/ScenarioLoader.h	/^	int bucket;$/;"	m	class:Experiment
bucket	extras/Experiment.h	/^		int bucket;$/;"	m	class:Experiment
buildAbstraction	abstraction/mapQuadTreeAbstraction.cpp	/^void mapQuadTreeAbstraction::buildAbstraction()$/;"	f	class:mapQuadTreeAbstraction
buildConnectivityGroups	abstraction/mapFlatAbstraction.cpp	/^void mapFlatAbstraction::buildConnectivityGroups()$/;"	f	class:mapFlatAbstraction
buildCorridor	shared/aStar.cpp	/^void aStar::buildCorridor(path *p, int windowSize)$/;"	f	class:aStar
buildFontGL	driver/MAC/mac_main.cpp	/^GLuint buildFontGL(AGLContext ctx, GLint fontID, Style face, GLint size)$/;"	f
buildGL	driver/MAC/mac_main.cpp	/^OSStatus buildGL(WindowRef window)$/;"	f
buildGL	driver/main.cpp	/^void buildGL(void)$/;"	f
buildNodeIntoParent	abstraction/mapQuadTreeAbstraction.cpp	/^void mapQuadTreeAbstraction::buildNodeIntoParent(node *n, node *parent)$/;"	f	class:mapQuadTreeAbstraction
buttons	driver/MAC/HID Support/HID_Utilities.h	/^    long buttons;							\/\/ number of buttons (calculated, not reported by device)$/;"	m	struct:recDevice
buttons	driver/MAC/HID Support/HID_Utilities_External.h	/^    long buttons;							\/\/ number of buttons (calculated, not reported by device)$/;"	m	struct:recDevice
bv	simulation/unitSimulation.h	/^	bitVector *bv;$/;"	m	class:unitSimulation
c4	apps/entry_jps/Timer.h	/^		struct { uint32_t l, h; } c4;$/;"	m	union:Timer::CycleCounter::__anon2	typeref:struct:Timer::CycleCounter::__anon2::__anon3
c4	apps/entry_jps_plus/Timer.h	/^		struct { uint32_t l, h; } c4;$/;"	m	union:Timer::CycleCounter::__anon4	typeref:struct:Timer::CycleCounter::__anon4::__anon5
c4	extras/timer.h	/^		struct { uint32_t l, h; } c4;$/;"	m	union:Timer::CycleCounter::__anon17	typeref:struct:Timer::CycleCounter::__anon17::__anon18
c8	apps/entry_jps/Timer.h	/^		uint64_t c8;$/;"	m	union:Timer::CycleCounter::__anon2
c8	apps/entry_jps_plus/Timer.h	/^		uint64_t c8;$/;"	m	union:Timer::CycleCounter::__anon4
c8	extras/timer.h	/^		uint64_t c8;$/;"	m	union:Timer::CycleCounter::__anon17
calculateEdgeIndex	jump/OfflineJumpPointLocator.cpp	/^OfflineJumpPointLocator::calculateEdgeIndex(Jump::Direction dir)$/;"	f	class:OfflineJumpPointLocator
call	driver/common.h	/^	keyboardCallback call;$/;"	m	class:keyboardCallbackData
camera	driver/common.h	/^	recCamera camera;$/;"	m	struct:recContext
cameraLookAt	driver/common.cpp	/^void cameraLookAt(GLfloat x, GLfloat y, GLfloat z, float cameraSpeed)$/;"	f
cameraMoveTo	driver/common.cpp	/^void cameraMoveTo(GLfloat x, GLfloat y, GLfloat z, float cameraSpeed)$/;"	f
canCrossDiagonally	simulation/unitSimulation.h	/^	bool canCrossDiagonally() { return (!disallowDiagonalCrossingMoves); }$/;"	f	class:unitSimulation
canMove	simulation/unitSimulation.h	/^	virtual bool canMove(node *, node *, double, unit *) { return true;}$/;"	f	class:unitSimulation
canStep	jump/JumpPointLocator.cpp	/^JumpPointLocator::canStep(int x, int y, Jump::Direction checkdir)$/;"	f	class:JumpPointLocator
canStep	util/map.cpp	/^bool Map::canStep(long x1, long y1, long x2, long y2) const$/;"	f	class:Map
captureNextMovieFrame	driver/MAC/mac_main.cpp	/^void captureNextMovieFrame(pRecContext pContextInfo, WindowRef win, double duration)$/;"	f
categories	util/statCollection.h	/^	std::vector<const char *> categories;$/;"	m	class:statCollection
category	util/statCollection.h	/^	int category, owner;$/;"	m	class:stat
cgDisplayID	driver/MAC/macGlCheck.h	/^  CGDirectDisplayID cgDisplayID; \/\/ CG display ID (main identifier)$/;"	m	struct:__anon16
cglDisplayMask	driver/MAC/macGlCheck.h	/^  CGOpenGLDisplayMask cglDisplayMask; \/\/ CGL display mask$/;"	m	struct:__anon16
charLine	driver/TextBox.h	/^	int charLine;$/;"	m	class:TextBox
check	apps/entry_jps/Timer.h	/^#undef check$/;"	d
check	apps/entry_jps_plus/Timer.h	/^#undef check$/;"	d
check	extras/timer.h	/^#undef check$/;"	d
check	simulation/unitSimulation.h	/^#undef check$/;"	d
checkParameters	shared/FlexibleAStar.cpp	/^FlexibleAStar::checkParameters(node* from, node* to)$/;"	f	class:FlexibleAStar
cleanup	driver/main.cpp	/^void cleanup (void)$/;"	f
cleanupHandlers	driver/common.cpp	/^void cleanupHandlers()$/;"	f
clear	jump/JumpInfo.h	/^		inline void clear()$/;"	f	class:JumpInfo
clear	util/bitVector.cpp	/^void bitVector::clear()$/;"	f	class:bitVector
clearAllReservations	simulation/unitSimulation.h	/^	virtual void clearAllReservations() {}$/;"	f	class:unitSimulation
clearAllStats	util/statCollection.cpp	/^void statCollection::clearAllStats()$/;"	f	class:statCollection
clearAllUnits	simulation/unitSimulation.cpp	/^void unitSimulation::clearAllUnits()$/;"	f	class:unitSimulation
clearColours	abstraction/mapAbstraction.cpp	/^mapAbstraction::clearColours()$/;"	f	class:mapAbstraction
clearDisplayList	simulation/unit.h	/^	static void clearDisplayList() { if (sphereDispList != 0) glDeleteLists(sphereDispList, 1); sphereDispList = 0; }$/;"	f	class:unit
clearExperiments	extras/ScenarioManager.h	/^		void clearExperiments() { experiments.clear(); }$/;"	f	class:AbstractScenarioManager
clearFilters	util/statCollection.cpp	/^void statCollection::clearFilters()$/;"	f	class:statCollection
clearMap	simulation/unitSimulation.h	/^	bool clearMap;$/;"	m	class:unitSimulation
clearMarkedNodes	abstraction/graphAbstraction.cpp	/^void graphAbstraction::clearMarkedNodes()$/;"	f	class:graphAbstraction
clearMarkedNodes	abstraction/mapAbstraction.cpp	/^void mapAbstraction::clearMarkedNodes()$/;"	f	class:mapAbstraction
clearMove	simulation/unitSimulation.h	/^	virtual bool clearMove(node *, node *, double, unit *) { return true; }$/;"	f	class:unitSimulation
clone	abstraction/mapFlatAbstraction.h	/^	virtual mapAbstraction *clone(Map *_m) { return new mapFlatAbstraction(_m); }$/;"	f	class:mapFlatAbstraction
clone	abstraction/mapQuadTreeAbstraction.h	/^	mapAbstraction *clone(Map *_m) { return new mapQuadTreeAbstraction(_m, sectorSize); }$/;"	f	class:mapQuadTreeAbstraction
clone	jump/JumpPointAbstraction.cpp	/^JumpPointAbstraction::clone(Map* _m)$/;"	f	class:JumpPointAbstraction
clone	util/EdgeFactory.h	/^		virtual EdgeFactory* clone() { return new EdgeFactory(); }$/;"	f	class:EdgeFactory
clone	util/NodeFactory.h	/^		virtual NodeFactory* clone() { return new NodeFactory(); }$/;"	f	class:NodeFactory
clone	util/ProblemInstance.cpp	/^ProblemInstance::clone()$/;"	f	class:ProblemInstance
clone	util/bitVector.cpp	/^bitVector *bitVector::clone()$/;"	f	class:bitVector
clone	util/graph.cpp	/^graph_object *graph::clone() const$/;"	f	class:graph
clone	util/graph.cpp	/^graph_object *node::clone() const$/;"	f	class:node
clone	util/graph.cpp	/^graph_object* edge::clone() const$/;"	f	class:edge
clone	util/map.h	/^	Map *clone() { return new Map(this); }$/;"	f	class:Map
clone	util/path.h	/^	path *clone() { return next?(new path(n, next->clone())):new path(n, next);}$/;"	f	class:path
cloneAll	util/graph.cpp	/^graph *graph::cloneAll() const$/;"	f	class:graph
closeNode	shared/FlexibleAStar.cpp	/^FlexibleAStar::closeNode(node* current, ClosedList* closedList)$/;"	f	class:FlexibleAStar
closedList	shared/aStar.h	/^	AStar3Util::NodeLookupTable openList, closedList;$/;"	m	class:aStar
collections	driver/MAC/HID Support/HID_Utilities.h	/^	long collections;						\/\/ number of elements of type kIOHIDElementTypeCollection$/;"	m	struct:recDevice
collections	driver/MAC/HID Support/HID_Utilities_External.h	/^	long collections;						\/\/ number of elements of type kIOHIDElementTypeCollection$/;"	m	struct:recDevice
collisionStatus	simulation/unit.h	/^	int collisionStatus;$/;"	m	class:billiardBallUnit
colorMap	util/mapOverlay.h	/^	int colorMap;$/;"	m	class:MapOverlay
colorScheme	driver/common.h	/^	long colorScheme;$/;"	m	struct:recContext
commandLineCallback	driver/common.h	/^typedef int (*commandLineCallback)(char**, int);$/;"	t
commandLineCallbackData	driver/common.h	/^	commandLineCallbackData(commandLineCallback _CLC, const char *_argument,$/;"	f	class:commandLineCallbackData
commandLineCallbackData	driver/common.h	/^class commandLineCallbackData {$/;"	c
commandLineCallbacks	driver/common.cpp	/^static std::vector<commandLineCallbackData *> commandLineCallbacks;$/;"	v	file:
computeDirection	jump/Jump.cpp	/^Jump::computeDirection(int x, int y, int x2, int y2)$/;"	f	class:Jump
computeDirection	jump/Jump.cpp	/^Jump::computeDirection(node* cur, node* succ)$/;"	f	class:Jump
computeForced	jump/JumpPointLocator.cpp	/^JumpPointLocator::computeForced(Jump::Direction d, int x, int y)$/;"	f	class:JumpPointLocator
computeNatural	jump/JumpPointLocator.cpp	/^JumpPointLocator::computeNatural(Jump::Direction d, int x, int y)$/;"	f	class:JumpPointLocator
computeNeighbourSet	jump/JumpPointExpansionPolicy.cpp	/^JumpPointExpansionPolicy::computeNeighbourSet()$/;"	f	class:JumpPointExpansionPolicy
computeNeighbourSet	jump/RecursiveJumpPointExpansionPolicy.cpp	/^RecursiveJumpPointExpansionPolicy::computeNeighbourSet()$/;"	f	class:RecursiveJumpPointExpansionPolicy
computeSuccessors	jump/JumpPointLocator.cpp	/^JumpPointLocator::computeSuccessors(Jump::Direction d, int x, int y)$/;"	f	class:JumpPointLocator
computeWidth	abstraction/graphAbstraction.cpp	/^int graphAbstraction::computeWidth(node *n)$/;"	f	class:graphAbstraction
cookie	driver/MAC/HID Support/HID_Config_Utilities.h	/^    void * cookie;$/;"	m	struct:recSaveHID
cookie	driver/MAC/HID Support/HID_Utilities.h	/^    IOHIDElementCookie cookie;				\/\/ unique value (within device of specific vendorID and productID) which identifies element, will NOT change$/;"	m	struct:recElement
cookie	driver/MAC/HID Support/HID_Utilities_External.h	/^    void * cookie;							\/\/ unique value (within device of specific vendorID and productID) which identifies element, will NOT change$/;"	m	struct:recElement
cookie	driver/MAC/HID Support/HID_Utilities_External.h	/^    void * cookie;$/;"	m	struct:recSaveHID
coolOffPeriod	simulation/unit.h	/^	int coolOffPeriod;$/;"	m	class:billiardBallUnit
corners	util/map.h	/^  long corners[3];$/;"	m	class:halfTile
corridorNodes	filters/CorridorFilter.h	/^		std::map<int, node*>* corridorNodes;$/;"	m	class:CorridorFilter
cost	policies/GridMapExpansionPolicy.h	/^		double cost; \/\/ heuristic cost estimate; d(target, n()) $/;"	m	class:GridMapExpansionPolicy
cost_to_n	jump/JumpPointExpansionPolicy.cpp	/^JumpPointExpansionPolicy::cost_to_n()$/;"	f	class:JumpPointExpansionPolicy
cost_to_n	jump/RecursiveJumpPointExpansionPolicy.cpp	/^RecursiveJumpPointExpansionPolicy::cost_to_n()$/;"	f	class:RecursiveJumpPointExpansionPolicy
cost_to_n	policies/GridMapExpansionPolicy.cpp	/^double GridMapExpansionPolicy::cost_to_n()$/;"	f	class:GridMapExpansionPolicy
cost_to_n	policies/IncidentEdgesExpansionPolicy.cpp	/^IncidentEdgesExpansionPolicy::cost_to_n()$/;"	f	class:IncidentEdgesExpansionPolicy
cost_to_n	policies/TileExpansionPolicy.h	/^		virtual double cost_to_n() { return 1; }$/;"	f	class:TileExpansionPolicy
count	apps/entry_jps/Timer.h	/^	uint64_t count() const { return count_.c8; }$/;"	f	struct:Timer::CycleCounter
count	apps/entry_jps_plus/Timer.h	/^	uint64_t count() const { return count_.c8; }$/;"	f	struct:Timer::CycleCounter
count	extras/timer.h	/^	uint64_t count() const { return count_.c8; }$/;"	f	struct:Timer::CycleCounter
count	util/heap.h	/^  int count;$/;"	m	class:heap
countEdgesAtDistance	abstraction/graphAbstraction.cpp	/^int graphAbstraction::countEdgesAtDistance(node *child, node *parent, std::vector<int> &dists)$/;"	f	class:graphAbstraction
countStatEntries	util/statUtil.cpp	/^long unsigned countStatEntries(statCollection *stats, const char *category, const char *owner)$/;"	f
count_	apps/entry_jps/Timer.h	/^	} count_;$/;"	m	struct:Timer::CycleCounter	typeref:union:Timer::CycleCounter::__anon2
count_	apps/entry_jps_plus/Timer.h	/^	} count_;$/;"	m	struct:Timer::CycleCounter	typeref:union:Timer::CycleCounter::__anon4
count_	extras/timer.h	/^	} count_;$/;"	m	struct:Timer::CycleCounter	typeref:union:Timer::CycleCounter::__anon17
createMenus	driver/main.cpp	/^void createMenus()$/;"	f
createNewWindow	driver/MAC/mac_main.cpp	/^void createNewWindow(void)$/;"	f
cstr2pstr	driver/MAC/mac_main.cpp	/^static void cstr2pstr(StringPtr outString, const char *inString)$/;"	f	file:
currDist	simulation/unitSimulation.h	/^	double currDist;        \/\/ total distance moved so far$/;"	m	class:unitSimulation
currNode	shared/aStar.h	/^		node *currNode;$/;"	m	class:AStar3Util::SearchNode
currTime	simulation/unitSimulation.h	/^	double currTime, viewTime;$/;"	m	class:unitSimulation
currx	simulation/unitSimulation.h	/^	int currx, curry;$/;"	m	class:unitInfo
curry	simulation/unitSimulation.h	/^	int currx, curry;$/;"	m	class:unitInfo
cutCorners	jump/JumpPointLocator.h	/^		bool cutCorners;$/;"	m	class:JumpPointLocator
cycleDisplayMode	simulation/unitGroup.h	/^	virtual void cycleDisplayMode(void) { }$/;"	f	class:unitGroup
cyclemapAbstractionDisplay	simulation/unitSimulation.cpp	/^void unitSimulation::cyclemapAbstractionDisplay()$/;"	f	class:unitSimulation
dList	driver/TextBox.h	/^	GLuint dList;$/;"	m	class:TextBox
dList	util/map.h	/^  GLuint dList;$/;"	m	class:Map
debug	shared/FlexibleAStar.h	/^		DebugUtility* debug;$/;"	m	class:FlexibleAStar
debugClosedNode	util/DebugUtility.cpp	/^void DebugUtility::debugClosedNode(node* c, node* n, double c_to_n_cost, node* goal)$/;"	f	class:DebugUtility
debuginfo	util/graph.h	/^	  bool debuginfo;$/;"	m	class:graph_object
decreaseColorMap	util/mapOverlay.h	/^	void decreaseColorMap() { colorMap--; }$/;"	f	class:MapOverlay
decreaseDisplayALevel	simulation/unitGroup.h	/^	virtual void decreaseDisplayALevel(void) {  }$/;"	f	class:unitGroup
decreaseKey	util/heap.cpp	/^void heap::decreaseKey(graph_object *val)$/;"	f	class:heap
decreaseKey	util/heap2.h	/^void heap2<OBJ, HashKey, EqKey, CmpKey>::decreaseKey(OBJ val)$/;"	f	class:heap2
deform	driver/TextBox.h	/^	bool deform, scrolling;$/;"	m	class:TextBox
degree	util/path.cpp	/^unsigned path::degree()$/;"	f	class:path
deleteFontGL	driver/MAC/mac_main.cpp	/^void deleteFontGL(GLuint fontList)$/;"	f
desc	driver/common.h	/^	const char *desc;$/;"	m	class:commandLineCallbackData
desc	driver/common.h	/^	const char *desc;$/;"	m	class:keyboardCallbackData
destroy	driver/TextBox.cpp	/^void TextBox::destroy()$/;"	f	class:TextBox
deviceDepth	driver/MAC/macGlCheck.h	/^  short deviceDepth; \/\/ pixel depth in bits$/;"	m	struct:__anon16
deviceHeight	driver/MAC/macGlCheck.h	/^  long deviceHeight; \/\/ pixel width$/;"	m	struct:__anon16
deviceOriginX	driver/MAC/macGlCheck.h	/^  long deviceOriginX; \/\/ left location of device (relative to main device)$/;"	m	struct:__anon16
deviceOriginY	driver/MAC/macGlCheck.h	/^  long deviceOriginY; \/\/ upper location of device (relative to main device)$/;"	m	struct:__anon16
deviceRefresh	driver/MAC/macGlCheck.h	/^  short deviceRefresh; \/\/ integer refresh rate in Hz$/;"	m	struct:__anon16
deviceTextureRAM	driver/MAC/macGlCheck.h	/^  long deviceTextureRAM; \/\/ uses current mode (geometry, pixel depth, etc.)$/;"	m	struct:__anon16
deviceVRAM	driver/MAC/macGlCheck.h	/^  long deviceVRAM; \/\/ video memory in bytes$/;"	m	struct:__anon16
deviceWidth	driver/MAC/macGlCheck.h	/^  long deviceWidth; \/\/ pixel width$/;"	m	struct:__anon16
dials	driver/MAC/HID Support/HID_Utilities.h	/^    long dials;								\/\/ number of dials (calculated, not reported by device)$/;"	m	struct:recDevice
dials	driver/MAC/HID Support/HID_Utilities_External.h	/^    long dials;								\/\/ number of dials (calculated, not reported by device)$/;"	m	struct:recDevice
directions	jump/RecursiveJumpPointExpansionPolicy.h	/^		DirectionList directions; \/\/ last_dir labels for every generated node$/;"	m	class:RecursiveJumpPointExpansionPolicy
disable_gui	driver/common.cpp	/^bool disable_gui = false;$/;"	v
disable_gui	driver/common.cpp	/^bool disable_gui = true;$/;"	v
disallowDiagonalCrossingMoves	simulation/unitSimulation.h	/^	bool disallowDiagonalCrossingMoves;$/;"	m	class:unitSimulation
displayID	driver/MAC/macGlCheck.h	/^  unsigned long displayID; \/\/ QD display ID$/;"	m	struct:__anon16
displayList	util/mapOverlay.h	/^  GLuint displayList;$/;"	m	class:MapOverlay
displayUnits	simulation/unitSimulation.h	/^	std::vector<unitInfo *> displayUnits;$/;"	m	class:unitSimulation
disposeGL	driver/MAC/mac_main.cpp	/^OSStatus disposeGL(pRecContext pContextInfo)$/;"	f
distBucketDelta	simulation/constants.h	/^const int distBucketDelta = 10;	\/\/ bucket size$/;"	v
distBucketFirst	simulation/constants.h	/^const int distBucketFirst = 10;	\/\/ first bucket: (distBucketFirst-delta,distBucketFirst]$/;"	v
distBucketLast	simulation/constants.h	/^const int distBucketLast = 100;	\/\/ last bucket: (distBucketLast-delta,distBucketLast]$/;"	v
distNumBuckets	simulation/constants.h	/^const int distNumBuckets = (distBucketLast - distBucketFirst) \/ distBucketDelta + 1;$/;"	v
distance	abstraction/graphAbstraction.cpp	/^double graphAbstraction::distance(path *p)$/;"	f	class:graphAbstraction
distance	apps/entry_jps/ScenarioLoader.h	/^	double distance;$/;"	m	class:Experiment
distance	apps/entry_jps_plus/ScenarioLoader.h	/^	double distance;$/;"	m	class:Experiment
distance	extras/Experiment.h	/^		double distance;$/;"	m	class:Experiment
doIteration	util/GenericIDAStar.cpp	/^double GenericIDAStar::doIteration(SearchEnvironment *env,$/;"	f	class:GenericIDAStar
doKeyboardCallbacks	driver/common.cpp	/^bool doKeyboardCallbacks(pRecContext pContextInfo, unsigned char keyHit, tKeyboardModifier mod)$/;"	f
doKeyboardCommand	driver/common.cpp	/^bool doKeyboardCommand(pRecContext pContextInfo, unsigned char keyHit, bool shift, bool cntrl, bool alt)$/;"	f
doNormal	util/map.cpp	/^void Map::doNormal(tSplit split, halfTile *t, int \/*x*\/, int \/*y*\/)$/;"	f	class:Map
doPathDraw	shared/aStar3.h	/^	bool doPathDraw;$/;"	m	class:aStarOld
doPostTimestepCalc	simulation/unitSimulation.cpp	/^void unitSimulation::doPostTimestepCalc()$/;"	f	class:unitSimulation
doPreTimestepCalc	simulation/unitSimulation.cpp	/^void unitSimulation::doPreTimestepCalc()$/;"	f	class:unitSimulation
doRandomPath	shared/searchAlgorithm.cpp	/^void doRandomPath(graphAbstraction *aMap, searchAlgorithm *sa, bool repeat)$/;"	f
doTimestepCalc	simulation/unitSimulation.cpp	/^void unitSimulation::doTimestepCalc()$/;"	f	class:unitSimulation
doVertexColor	util/map.cpp	/^void Map::doVertexColor(tTerrain type, int vHeight, bool darken)$/;"	f	class:Map
done	shared/searchUnit.h	/^	virtual bool done() { return onTarget; }$/;"	f	class:searchUnit
done	simulation/unit.h	/^	virtual bool done() { return true; }$/;"	f	class:unit
done	simulation/unitGroup.cpp	/^bool unitGroup::done()$/;"	f	class:unitGroup
done	simulation/unitSimulation.cpp	/^bool unitSimulation::done()$/;"	f	class:unitSimulation
draw	driver/TextBox.cpp	/^void TextBox::draw()$/;"	f	class:TextBox
drawBlockedSquare	simulation/unitSimulation.cpp	/^void unitSimulation::drawBlockedSquare(int x, int y)$/;"	f	class:unitSimulation
drawBox	util/glUtil.cpp	/^void drawBox(GLfloat xx, GLfloat yy, GLfloat zz, GLfloat rad)$/;"	f
drawCStringGL	driver/MAC/mac_main.cpp	/^void drawCStringGL(char * cstrOut, GLuint fontList)$/;"	f
drawCStringGL	driver/main.cpp	/^void drawCStringGL (char * cstrOut, GLuint fontList)$/;"	f
drawCaps	driver/MAC/drawInfo.h	/^static void drawCaps (pRecContext pContextInfo)$/;"	f
drawCaps	driver/common.h	/^	bool drawCaps;$/;"	m	struct:recContext
drawChar	driver/TextBox.cpp	/^void TextBox::drawChar(char c, point3d where, double height)$/;"	f	class:TextBox
drawColor	util/graph.h	/^  int drawColor;$/;"	m	class:node
drawGL	driver/MAC/mac_main.cpp	/^void drawGL(pRecContext pContextInfo, bool swap)$/;"	f
drawGL	driver/main.cpp	/^void drawGL (pRecContext pContextInfo)$/;"	f
drawGraph	abstraction/mapAbstraction.cpp	/^void mapAbstraction::drawGraph(graph *g)$/;"	f	class:mapAbstraction
drawHelp	driver/common.h	/^	bool drawHelp;$/;"	m	struct:recContext
drawInfo	driver/MAC/mac_main.cpp	/^static void drawInfo(pRecContext pContextInfo)$/;"	f	file:
drawInfo	driver/main.cpp	/^static void drawInfo (pRecContext \/*pContextInfo*\/)$/;"	f	file:
drawLand	util/map.h	/^  bool drawLand;$/;"	m	class:Map
drawLandQuickly	util/map.cpp	/^void Map::drawLandQuickly()$/;"	f	class:Map
drawLevelConnections	abstraction/mapAbstraction.cpp	/^void mapAbstraction::drawLevelConnections(node *n)$/;"	f	class:mapAbstraction
drawLine	driver/TextBox.cpp	/^void TextBox::drawLine(point3d where, int startx, int starty, int offsetx, int offsety, double scale)$/;"	f	class:TextBox
drawPath	shared/aStar3.h	/^	void drawPath(bool _doPathDraw) { doPathDraw = _doPathDraw; }$/;"	f	class:aStarOld
drawPyramid	util/glUtil.cpp	/^void drawPyramid(GLfloat x, GLfloat y, GLfloat z, GLfloat height, GLfloat width)$/;"	f
drawSphere	simulation/unit.cpp	/^void unit::drawSphere(GLdouble _x, GLdouble _y, GLdouble _z, GLdouble tRadius)$/;"	f	class:unit
drawTile	util/map.cpp	/^void Map::drawTile(Tile *t, int x, int y, tDisplay how)$/;"	f	class:Map
drawTriangle	simulation/unit.cpp	/^void unit::drawTriangle(GLdouble _x, GLdouble _y, GLdouble _z, GLdouble tRadius)$/;"	f	class:unit
drawing	driver/common.h	/^	bool drawing;$/;"	m	struct:recContext
duration	driver/MAC/mac_main.cpp	/^	double duration;$/;"	m	class:movieFrame	file:
duration	driver/TextBox.h	/^	double duration;$/;"	m	class:TextBox
e	shared/aStar.h	/^		edge *e;$/;"	m	class:AStar3Util::SearchNode
edge	util/graph.cpp	/^edge::edge(const edge* e)$/;"	f	class:edge
edge	util/graph.cpp	/^edge::edge(unsigned int f, unsigned int t, double w)$/;"	f	class:edge
edge	util/graph.h	/^class edge : public graph_object {$/;"	c
edgeIterNext	util/graph.cpp	/^edge *graph::edgeIterNext(edge_iterator &edge_iter) const$/;"	f	class:graph
edgeIterNext	util/graph.cpp	/^edge *node::edgeIterNext(edge_iterator &iter) const$/;"	f	class:node
edgeIterNextIncoming	util/graph.cpp	/^edge *node::edgeIterNextIncoming(edge_iterator &iterIncoming) const$/;"	f	class:node
edgeIterNextOutgoing	util/graph.cpp	/^edge *node::edgeIterNextOutgoing(edge_iterator &iterOutgoing) const$/;"	f	class:node
edgeNum	util/graph.h	/^	unsigned int edgeNum;\/\/, label[MAXLABELS];$/;"	m	class:edge
edge_iterator	util/graph.h	/^typedef std::vector<edge *>::const_iterator edge_iterator;$/;"	t
edgecount	jump/JumpInfo.h	/^		inline unsigned int edgecount()$/;"	f	class:JumpInfo
edgewidth	util/map.cpp	/^  float edgewidth[81] = {$/;"	v
ef	jump/JumpPointAbstraction.h	/^		IEdgeFactory* ef;$/;"	m	class:JumpPointAbstraction
elapsedTime	apps/entry_jps/Timer.h	/^	double elapsedTime;$/;"	m	class:Timer
elapsedTime	apps/entry_jps_plus/Timer.h	/^	double elapsedTime;$/;"	m	class:Timer
elapsedTime	driver/TextBox.h	/^	double elapsedTime;$/;"	m	class:TextBox
elapsedTime	extras/timer.h	/^	double elapsedTime;$/;"	m	class:Timer
eligibleNodes	shared/aStar.h	/^	AStar3Util::Corridor eligibleNodes;$/;"	m	class:aStar
empty	util/heap.cpp	/^bool heap::empty()$/;"	f	class:heap
empty	util/heap2.h	/^bool heap2<OBJ, HashKey, EqKey, CmpKey>::empty()$/;"	f	class:heap2
enablePrintOutput	util/statCollection.h	/^	void enablePrintOutput(bool pO) { printOutput = pO; }$/;"	f	class:statCollection
end	shared/spreadExecSearchAlgorithm.h	/^	node *start, *end;$/;"	m	class:spreadExecSearchAlgorithm
endTimer	apps/entry_jps/Timer.cpp	/^double Timer::endTimer()$/;"	f	class:Timer
endTimer	apps/entry_jps_plus/Timer.cpp	/^double Timer::endTimer()$/;"	f	class:Timer
endTimer	extras/timer.cpp	/^double Timer::endTimer()$/;"	f	class:Timer
entry_jps_OBJS	apps/entry_jps.mk	/^entry_jps_OBJS = main.o Entry.o ScenarioLoader.o Timer.o$/;"	m
entry_jps_plus_OBJS	apps/entry_jps_plus.mk	/^entry_jps_plus_OBJS = main.o Entry.o ScenarioLoader.o Timer.o$/;"	m
epf	shared/FlexibleAStarFactory.h	/^		IExpansionPolicyFactory* epf;$/;"	m	class:FlexibleAStarFactory
equals	util/bitVector.cpp	/^bool bitVector::equals(bitVector *bv)$/;"	f	class:bitVector
excludeFilters	util/statCollection.h	/^	std::vector<const char *> excludeFilters;$/;"	m	class:statCollection
expand	jump/JumpPointExpansionPolicy.cpp	/^JumpPointExpansionPolicy::expand(node* t) throw(std::logic_error)$/;"	f	class:JumpPointExpansionPolicy
expand	jump/RecursiveJumpPointExpansionPolicy.cpp	/^RecursiveJumpPointExpansionPolicy::expand(node* t) throw(std::logic_error)$/;"	f	class:RecursiveJumpPointExpansionPolicy
expand	policies/ExpansionPolicy.cpp	/^ExpansionPolicy::expand(node* t) throw(std::logic_error)$/;"	f	class:ExpansionPolicy
expand	policies/IncidentEdgesExpansionPolicy.cpp	/^IncidentEdgesExpansionPolicy::expand(node* n) throw(std::logic_error)$/;"	f	class:IncidentEdgesExpansionPolicy
expand	shared/FlexibleAStar.cpp	/^FlexibleAStar::expand(node* current, node* goal, altheap* openList,$/;"	f	class:FlexibleAStar
experiments	apps/entry_jps/ScenarioLoader.h	/^	std::vector<Experiment> experiments;$/;"	m	class:ScenarioLoader
experiments	apps/entry_jps_plus/ScenarioLoader.h	/^	std::vector<Experiment> experiments;$/;"	m	class:ScenarioLoader
experiments	extras/ScenarioManager.h	/^		std::vector<Experiment*> experiments;		$/;"	m	class:AbstractScenarioManager
exportMovie	driver/MAC/mac_main.cpp	/^void exportMovie() \/\/startRecordingMovie(pRecContext pContextInfo, WindowRef win)$/;"	f
extractBestPath	shared/FlexibleAStar.cpp	/^FlexibleAStar::extractBestPath(node* goal)$/;"	f	class:FlexibleAStar
extractBestPath	shared/aStar3.cpp	/^path *aStarOld::extractBestPath(graph *g, unsigned int current)$/;"	f	class:aStarOld
extractPathToStart	shared/aStar.cpp	/^path *aStar::extractPathToStart(graph *_g, node *goalNode)$/;"	f	class:aStar
fABGR	driver/MAC/macGlCheck.h	/^  bool fABGR; \/\/ GL_EXT_abgr$/;"	m	struct:__anon16
fAccel	driver/common.h	/^	GLfloat fAccel [3];$/;"	m	struct:recContext
fArrayRevComps4Byte	driver/MAC/macGlCheck.h	/^  bool fArrayRevComps4Byte; \/\/ GL_ATI_array_rev_comps_in_4_bytes$/;"	m	struct:__anon16
fBGRA	driver/MAC/macGlCheck.h	/^  bool fBGRA; \/\/ GL_EXT_bgra or 1.2+$/;"	m	struct:__anon16
fBlendColor	driver/MAC/macGlCheck.h	/^  bool fBlendColor; \/\/ GL_EXT_blend_color or GL_ARB_imaging$/;"	m	struct:__anon16
fBlendEqSep	driver/MAC/macGlCheck.h	/^  bool fBlendEqSep; \/\/ GL_ATI_blend_equation_separate$/;"	m	struct:__anon16
fBlendFuncSep	driver/MAC/macGlCheck.h	/^  bool fBlendFuncSep; \/\/ GL_EXT_blend_func_separate or 1.4+$/;"	m	struct:__anon16
fBlendMinMax	driver/MAC/macGlCheck.h	/^  bool fBlendMinMax; \/\/ GL_EXT_blend_minmax or GL_ARB_imaging$/;"	m	struct:__anon16
fBlendSquare	driver/MAC/macGlCheck.h	/^  bool fBlendSquare; \/\/ GL_NV_blend_square or 1.4+$/;"	m	struct:__anon16
fBlendSub	driver/MAC/macGlCheck.h	/^  bool fBlendSub; \/\/ GL_EXT_blend_subtract or GL_ARB_imaging$/;"	m	struct:__anon16
fBlendWeightMinMax	driver/MAC/macGlCheck.h	/^  bool fBlendWeightMinMax; \/\/ GL_ATI_blend_weighted_minmax$/;"	m	struct:__anon16
fCVA	driver/MAC/macGlCheck.h	/^  bool fCVA; \/\/ GL_EXT_compiled_vertex_array$/;"	m	struct:__anon16
fClientStorage	driver/MAC/macGlCheck.h	/^  bool fClientStorage; \/\/ GL_APPLE_client_storage$/;"	m	struct:__anon16
fClipVolHint	driver/MAC/macGlCheck.h	/^  bool fClipVolHint; \/\/ GL_EXT_clip_volume_hint$/;"	m	struct:__anon16
fColorMatrix	driver/MAC/macGlCheck.h	/^  bool fColorMatrix; \/\/ GL_SGI_color_matrix$/;"	m	struct:__anon16
fColorSubtable	driver/MAC/macGlCheck.h	/^  bool fColorSubtable; \/\/ GL_EXT_color_subtable or GL_ARB_imaging$/;"	m	struct:__anon16
fColorTable	driver/MAC/macGlCheck.h	/^  bool fColorTable; \/\/ GL_SGI_color_table or GL_ARB_imaging$/;"	m	struct:__anon16
fCombine3	driver/MAC/macGlCheck.h	/^  bool fCombine3; \/\/ GL_ATI_texture_env_combine3$/;"	m	struct:__anon16
fConvBorderModes	driver/MAC/macGlCheck.h	/^  bool fConvBorderModes; \/\/ GL_HP_convolution_border_modes or GL_ARB_imaging$/;"	m	struct:__anon16
fConvolution	driver/MAC/macGlCheck.h	/^  bool fConvolution; \/\/ GL_EXT_convolution or GL_ARB_imaging$/;"	m	struct:__anon16
fCost	shared/aStar.h	/^		double fCost;$/;"	m	class:AStar3Util::SearchNode
fDepthClamp	driver/MAC/macGlCheck.h	/^  bool fDepthClamp; \/\/ GL_NV_depth_clamp$/;"	m	struct:__anon16
fDepthTex	driver/MAC/macGlCheck.h	/^  bool fDepthTex; \/\/ GL_ARB_depth_texture or 1.4+$/;"	m	struct:__anon16
fDrawRangeElements	driver/MAC/macGlCheck.h	/^  bool fDrawRangeElements; \/\/ GL_EXT_draw_range_elements$/;"	m	struct:__anon16
fElementArray	driver/MAC/macGlCheck.h	/^  bool fElementArray; \/\/ GL_APPLE_element_array$/;"	m	struct:__anon16
fFence	driver/MAC/macGlCheck.h	/^  bool fFence; \/\/ GL_APPLE_fence$/;"	m	struct:__anon16
fFloatPixels	driver/MAC/macGlCheck.h	/^  bool fFloatPixels; \/\/ GL_APPLE_float_pixels$/;"	m	struct:__anon16
fFlushRenderer	driver/MAC/macGlCheck.h	/^  bool fFlushRenderer; \/\/ GL_APPLE_flush_render$/;"	m	struct:__anon16
fFogCoord	driver/MAC/macGlCheck.h	/^  bool fFogCoord; \/\/ GL_EXT_fog_coord$/;"	m	struct:__anon16
fFogDist	driver/MAC/macGlCheck.h	/^  bool fFogDist; \/\/ GL_NV_fog_distance$/;"	m	struct:__anon16
fFragmentProg	driver/MAC/macGlCheck.h	/^  bool fFragmentProg; \/\/ GL_ARB_fragment_program$/;"	m	struct:__anon16
fGenMipmap	driver/MAC/macGlCheck.h	/^  bool fGenMipmap; \/\/ GL_SGIS_generate_mipmap or 1.4+$/;"	m	struct:__anon16
fHistogram	driver/MAC/macGlCheck.h	/^  bool fHistogram; \/\/ GL_EXT_histogram or GL_ARB_imaging$/;"	m	struct:__anon16
fImaging	driver/MAC/macGlCheck.h	/^  bool fImaging; \/\/ GL_ARB_imaging  (not required in 1.2+)$/;"	m	struct:__anon16
fLightMaxExp	driver/MAC/macGlCheck.h	/^  bool fLightMaxExp; \/\/ GL_NV_light_max_exponent$/;"	m	struct:__anon16
fMultiDrawArrays	driver/MAC/macGlCheck.h	/^  bool fMultiDrawArrays; \/\/ GL_EXT_multi_draw_arrays or 1.4+$/;"	m	struct:__anon16
fMultisample	driver/MAC/macGlCheck.h	/^  bool fMultisample; \/\/ GL_ARB_multisample or 1.3+ (Anti-aliasing)$/;"	m	struct:__anon16
fMultisampleFilterHint	driver/MAC/macGlCheck.h	/^  bool fMultisampleFilterHint; \/\/ GL_NV_multisample_filter_hint$/;"	m	struct:__anon16
fMultitexture	driver/MAC/macGlCheck.h	/^  bool fMultitexture; \/\/ GL_ARB_multitexture or 1.3+$/;"	m	struct:__anon16
fPNtriangles	driver/MAC/macGlCheck.h	/^  bool fPNtriangles; \/\/ GL_ATI_pn_triangles or GL_ATIX_pn_triangles$/;"	m	struct:__anon16
fPackedPixels	driver/MAC/macGlCheck.h	/^  bool fPackedPixels; \/\/ GL_APPLE_packed_pixels or 1.2+$/;"	m	struct:__anon16
fPaletteTex	driver/MAC/macGlCheck.h	/^  bool fPaletteTex; \/\/ GL_EXT_paletted_texture$/;"	m	struct:__anon16
fPixelBuffer	driver/MAC/macGlCheck.h	/^  bool fPixelBuffer; \/\/ GL_APPLE_pixel_buffer$/;"	m	struct:__anon16
fPointCull	driver/MAC/macGlCheck.h	/^  bool fPointCull; \/\/ GL_ATI_point_cull_mode$/;"	m	struct:__anon16
fPointParam	driver/MAC/macGlCheck.h	/^  bool fPointParam; \/\/ GL_ARB_point_parameters or 1.4+$/;"	m	struct:__anon16
fPointSprite	driver/MAC/macGlCheck.h	/^  bool fPointSprite; \/\/ GL_NV_point_sprite$/;"	m	struct:__anon16
fRasterPosClip	driver/MAC/macGlCheck.h	/^  bool fRasterPosClip; \/\/ GL_IBM_rasterpos_clip$/;"	m	struct:__anon16
fRegCombiners	driver/MAC/macGlCheck.h	/^  bool fRegCombiners; \/\/ GL_NV_register_combiners$/;"	m	struct:__anon16
fRegCombiners2	driver/MAC/macGlCheck.h	/^  bool fRegCombiners2; \/\/ GL_NV_register_combiners2$/;"	m	struct:__anon16
fRescaleNorm	driver/MAC/macGlCheck.h	/^  bool fRescaleNorm; \/\/ GL_EXT_rescale_normal or 1.2+$/;"	m	struct:__anon16
fRot	driver/common.h	/^	GLfloat fRot [3];$/;"	m	struct:recContext
fSecColor	driver/MAC/macGlCheck.h	/^  bool fSecColor; \/\/ GL_EXT_secondary_color or 1.4+$/;"	m	struct:__anon16
fSepStencil	driver/MAC/macGlCheck.h	/^  bool fSepStencil; \/\/ GL_ATI_separate_stencil$/;"	m	struct:__anon16
fShadow	driver/MAC/macGlCheck.h	/^  bool fShadow; \/\/ GL_ARB_shadow or 1.4+$/;"	m	struct:__anon16
fShadowAmbient	driver/MAC/macGlCheck.h	/^  bool fShadowAmbient; \/\/ GL_ARB_shadow_ambient$/;"	m	struct:__anon16
fShadowFunc	driver/MAC/macGlCheck.h	/^  bool fShadowFunc; \/\/ GL_EXT_shadow_funcs$/;"	m	struct:__anon16
fShareTexPalette	driver/MAC/macGlCheck.h	/^  bool fShareTexPalette; \/\/ GL_EXT_shared_texture_palette$/;"	m	struct:__anon16
fSpecularVector	driver/MAC/macGlCheck.h	/^  bool fSpecularVector; \/\/ GL_APPLE_specular_vector$/;"	m	struct:__anon16
fStencil2Side	driver/MAC/macGlCheck.h	/^  bool fStencil2Side; \/\/ GL_EXT_stencil_two_side$/;"	m	struct:__anon16
fStencilWrap	driver/MAC/macGlCheck.h	/^  bool fStencilWrap; \/\/ GL_EXT_stencil_wrap or 1.4+$/;"	m	struct:__anon16
fTex3D	driver/MAC/macGlCheck.h	/^  bool fTex3D; \/\/ GL_EXT_texture3D or 1.2+$/;"	m	struct:__anon16
fTexBorderClamp	driver/MAC/macGlCheck.h	/^  bool fTexBorderClamp; \/\/ GL_ARB_texture_border_clamp or 1.3+$/;"	m	struct:__anon16
fTexCompress	driver/MAC/macGlCheck.h	/^  bool fTexCompress; \/\/ GL_ARB_texture_compression or 1.3+$/;"	m	struct:__anon16
fTexCompressS3TC	driver/MAC/macGlCheck.h	/^  bool fTexCompressS3TC; \/\/ GL_EXT_texture_compression_s3tc$/;"	m	struct:__anon16
fTexCubeMap	driver/MAC/macGlCheck.h	/^  bool fTexCubeMap; \/\/ GL_ARB_texture_cube_map or 1.3+$/;"	m	struct:__anon16
fTexEdgeClamp	driver/MAC/macGlCheck.h	/^  bool fTexEdgeClamp; \/\/ GL_SGIS_texture_edge_clamp or 1.2+$/;"	m	struct:__anon16
fTexEnvAdd	driver/MAC/macGlCheck.h	/^  bool fTexEnvAdd; \/\/ GL_ARB_texture_env_add, GL_EXT_texture_env_add or 1.3+$/;"	m	struct:__anon16
fTexEnvCombine	driver/MAC/macGlCheck.h	/^  bool fTexEnvCombine; \/\/ GL_ARB_texture_env_combine or 1.3+$/;"	m	struct:__anon16
fTexEnvCombine4	driver/MAC/macGlCheck.h	/^  bool fTexEnvCombine4; \/\/ GL_NV_texture_env_combine4$/;"	m	struct:__anon16
fTexEnvCrossbar	driver/MAC/macGlCheck.h	/^  bool fTexEnvCrossbar; \/\/ GL_ARB_texture_env_crossbar or 1.4+$/;"	m	struct:__anon16
fTexEnvDot3	driver/MAC/macGlCheck.h	/^  bool fTexEnvDot3; \/\/ GL_ARB_texture_env_dot3 or 1.3+$/;"	m	struct:__anon16
fTexFilterAniso	driver/MAC/macGlCheck.h	/^  bool fTexFilterAniso; \/\/ GL_EXT_texture_filter_anisotropic$/;"	m	struct:__anon16
fTexGenReflect	driver/MAC/macGlCheck.h	/^  bool fTexGenReflect; \/\/ GL_NV_texgen_reflection$/;"	m	struct:__anon16
fTexLOD	driver/MAC/macGlCheck.h	/^  bool fTexLOD; \/\/ GL_SGIS_texture_lod or 1.2+$/;"	m	struct:__anon16
fTexLODBias	driver/MAC/macGlCheck.h	/^  bool fTexLODBias; \/\/ GL_EXT_texture_lod_bias or 1.4+$/;"	m	struct:__anon16
fTexMirrorOnce	driver/MAC/macGlCheck.h	/^  bool fTexMirrorOnce; \/\/ GL_ATI_texture_mirror_once$/;"	m	struct:__anon16
fTexMirrorRepeat	driver/MAC/macGlCheck.h	/^  bool fTexMirrorRepeat; \/\/ GL_ARB_texture_mirrored_repeat or 1.4+$/;"	m	struct:__anon16
fTexRect	driver/MAC/macGlCheck.h	/^  bool fTexRect; \/\/ GL_EXT_texture_rectangle$/;"	m	struct:__anon16
fTexShader	driver/MAC/macGlCheck.h	/^  bool fTexShader; \/\/ GL_NV_texture_shader$/;"	m	struct:__anon16
fTexShader2	driver/MAC/macGlCheck.h	/^  bool fTexShader2; \/\/ GL_NV_texture_shader2$/;"	m	struct:__anon16
fTexShader3	driver/MAC/macGlCheck.h	/^  bool fTexShader3; \/\/ GL_NV_texture_shader3$/;"	m	struct:__anon16
fTextFragShader	driver/MAC/macGlCheck.h	/^  bool fTextFragShader; \/\/ GL_ATI_text_fragment_shader$/;"	m	struct:__anon16
fTextureRange	driver/MAC/macGlCheck.h	/^  bool fTextureRange; \/\/ GL_APPLE_texture_range (AGP texturing)$/;"	m	struct:__anon16
fTransformHint	driver/MAC/macGlCheck.h	/^  bool fTransformHint; \/\/ GL_APPLE_transform_hint $/;"	m	struct:__anon16
fTransposeMatrix	driver/MAC/macGlCheck.h	/^  bool fTransposeMatrix; \/\/ GL_ARB_transpose_matrix or 1.3+$/;"	m	struct:__anon16
fVAO	driver/MAC/macGlCheck.h	/^  bool fVAO; \/\/ GL_APPLE_vertex_array_object$/;"	m	struct:__anon16
fVAR	driver/MAC/macGlCheck.h	/^  bool fVAR; \/\/ GL_APPLE_vertex_array_range$/;"	m	struct:__anon16
fVPEvals	driver/MAC/macGlCheck.h	/^  bool fVPEvals; \/\/ GL_APPLE_vertex_program_evaluators$/;"	m	struct:__anon16
fVel	driver/common.h	/^	GLfloat fVel [3];$/;"	m	struct:recContext
fVertexBlend	driver/MAC/macGlCheck.h	/^  bool fVertexBlend; \/\/ GL_ARB_vertex_blend$/;"	m	struct:__anon16
fVertexProg	driver/MAC/macGlCheck.h	/^  bool fVertexProg; \/\/ GL_ARB_vertex_program$/;"	m	struct:__anon16
fWindowPos	driver/MAC/macGlCheck.h	/^  bool fWindowPos; \/\/ GL_ARB_window_pos or 1.4+$/;"	m	struct:__anon16
fYCbCr	driver/MAC/macGlCheck.h	/^  bool fYCbCr; \/\/ GL_APPLE_ycbcr_422 (YUV texturing)$/;"	m	struct:__anon16
features	driver/MAC/HID Support/HID_Utilities.h	/^	long features;							\/\/ number of elements of type kIOHIDElementTypeFeature$/;"	m	struct:recDevice
features	driver/MAC/HID Support/HID_Utilities_External.h	/^	long features;							\/\/ number of elements of type kIOHIDElementTypeFeature$/;"	m	struct:recDevice
fequal	util/fpUtil.h	/^inline bool fequal(double a, double b)$/;"	f
fgreater	util/fpUtil.h	/^inline bool fgreater(double a, double b) { return (a > b + TOLERANCE); }$/;"	f
filename	util/HogConfig.h	/^		char* filename; \/\/ config filename$/;"	m	class:HogConfig
filter	filters/CorridorFilter.cpp	/^bool CorridorFilter::filter(node* n)$/;"	f	class:CorridorFilter
filter	filters/NoFilter.h	/^		virtual bool filter(node* n) { return true; }$/;"	f	class:NoFilter
filter	policies/SelectiveExpansionPolicy.cpp	/^bool SelectiveExpansionPolicy::filter(node* n)$/;"	f	class:SelectiveExpansionPolicy
filters	policies/SelectiveExpansionPolicy.h	/^		std::vector<NodeFilter*> filters;$/;"	m	class:SelectiveExpansionPolicy
find	util/heap2.h	/^OBJ heap2<OBJ, HashKey, EqKey, CmpKey>::find(OBJ val)$/;"	f	class:heap2
findBranchingNode	jump/RecursiveJumpPointExpansionPolicy.cpp	/^RecursiveJumpPointExpansionPolicy::findBranchingNode($/;"	f	class:RecursiveJumpPointExpansionPolicy
findDirectedEdge	util/graph.cpp	/^edge *graph::findDirectedEdge(unsigned int from, unsigned int to)$/;"	f	class:graph
findEdge	util/graph.cpp	/^edge *graph::findEdge(unsigned int from, unsigned int to)$/;"	f	class:graph
findJumpNode	jump/JumpPointExpansionPolicy.cpp	/^JumpPointExpansionPolicy::findJumpNode(Jump::Direction d, int x, int y)$/;"	f	class:JumpPointExpansionPolicy
findJumpNode	jump/OfflineJumpPointLocator.cpp	/^OfflineJumpPointLocator::findJumpNode(Jump::Direction d, int x, int y, $/;"	f	class:OfflineJumpPointLocator
findJumpNode	jump/OnlineJumpPointLocator.cpp	/^OnlineJumpPointLocator::findJumpNode(Jump::Direction d, int x, int y, $/;"	f	class:OnlineJumpPointLocator
findJumpNode	jump/RecursiveJumpPointExpansionPolicy.cpp	/^RecursiveJumpPointExpansionPolicy::findJumpNode($/;"	f	class:RecursiveJumpPointExpansionPolicy
findNextStat	util/statCollection.cpp	/^int statCollection::findNextStat(const char *category, const char *owner, int startIndex) const$/;"	f	class:statCollection
findNextStat	util/statCollection.cpp	/^int statCollection::findNextStat(const char *what, bool findCategory, int startIndex) const$/;"	f	class:statCollection
findPrevStat	util/statCollection.cpp	/^int statCollection::findPrevStat(const char *category, const char *owner, int startIndex) const$/;"	f	class:statCollection
findPrevStat	util/statCollection.cpp	/^int statCollection::findPrevStat(const char *what, bool findCategory, int startIndex) const$/;"	f	class:statCollection
findSterileJumpNode	jump/OfflineJumpPointLocator.cpp	/^OfflineJumpPointLocator::findSterileJumpNode(Jump::Direction d, int x, int y)$/;"	f	class:OfflineJumpPointLocator
findUnit	simulation/unitSimulation.cpp	/^unit *unitSimulation::findUnit(int x, int y)$/;"	f	class:unitSimulation
findUnit	simulation/unitSimulation.cpp	/^unitInfo *unitSimulation::findUnit(unit *u)$/;"	f	class:unitSimulation
findUnitDisplayTime	simulation/unitSimulation.cpp	/^bool unitSimulation::findUnitDisplayTime(unitInfo *ui)$/;"	f	class:unitSimulation
first	jump/JumpPointExpansionPolicy.cpp	/^JumpPointExpansionPolicy::first()$/;"	f	class:JumpPointExpansionPolicy
first	jump/RecursiveJumpPointExpansionPolicy.cpp	/^RecursiveJumpPointExpansionPolicy::first()$/;"	f	class:RecursiveJumpPointExpansionPolicy
first	policies/GridMapExpansionPolicy.cpp	/^node* GridMapExpansionPolicy::first()$/;"	f	class:GridMapExpansionPolicy
first	policies/SelectiveExpansionPolicy.cpp	/^node* SelectiveExpansionPolicy::first()$/;"	f	class:SelectiveExpansionPolicy
first_impl	policies/IncidentEdgesExpansionPolicy.cpp	/^IncidentEdgesExpansionPolicy::first_impl()$/;"	f	class:IncidentEdgesExpansionPolicy
fless	util/fpUtil.h	/^inline bool fless(double a, double b) { return (a < b - TOLERANCE); }$/;"	f
floatStored	util/statCollection.h	/^enum storedType { floatStored, longStored };$/;"	e	enum:storedType
fpUtil_H	util/fpUtil.h	/^#define fpUtil_H$/;"	d
fps	driver/main.cpp	/^double fps = 30.0;$/;"	v
frames	driver/MAC/mac_main.cpp	/^std::vector<movieFrame *> frames;$/;"	v
from	util/graph.h	/^	unsigned int from, to;$/;"	m	class:edge
fullScreenCapable	driver/MAC/macGlCheck.h	/^  bool fullScreenCapable; \/\/ does device support full screen$/;"	m	struct:__anon16
fval	util/graph.h	/^typedef union { double fval; long lval; } labelValue;$/;"	m	union:__anon23
fval	util/statCollection.h	/^typedef union { double fval; long lval; } statValue;$/;"	m	union:__anon26
g	policies/IncidentEdgesExpansionPolicy.h	/^		graph* g;$/;"	m	class:IncidentEdgesExpansionPolicy
g	shared/aStar.h	/^	graph *g;$/;"	m	class:aStar
g	simulation/unit.h	/^	GLfloat r, g, b;$/;"	m	class:unit
g	util/SearchEnvironment.h	/^	graph *g;$/;"	m	class:GraphSearchEnvironment
g	util/glUtil.h	/^	GLfloat r,g,b;$/;"	m	class:recColor
gActionArray	driver/MAC/HID Support/HIDSupport.cpp	/^static actionRec gActionArray [kNumActions]; \/\/ array of action records for mapping and values$/;"	v	file:
gConfigEDMUPP	driver/MAC/mac_main.cpp	/^DMExtendedNotificationUPP gConfigEDMUPP = NULL;$/;"	v
gCost	shared/aStar.h	/^		double gCost;$/;"	m	class:AStar3Util::SearchNode
gCurrButton	driver/main.cpp	/^int gCurrButton = -1;$/;"	v
gCurrentGetDevice	driver/MAC/HID Support/HID_Utilities.cpp	/^pRecDevice gCurrentGetDevice = NULL;$/;"	v
gDefaultMap	driver/common.cpp	/^char gDefaultMap[1024] = "";$/;"	v
gDisplayCaps	driver/MAC/mac_main.cpp	/^GLCaps * gDisplayCaps = NULL; \/\/ array of GLCaps$/;"	v
gDolly	driver/MAC/mac_main.cpp	/^GLboolean gDolly = GL_FALSE;$/;"	v
gDolly	driver/main.cpp	/^GLboolean gDolly = GL_FALSE;$/;"	v
gDollyPanStartPoint	driver/MAC/mac_main.cpp	/^GLint gDollyPanStartPoint[2] = {0, 0};$/;"	v
gDollyPanStartPoint	driver/main.cpp	/^GLint gDollyPanStartPoint[2] = {0, 0};$/;"	v
gEdgeProb	abstraction/mapAbstraction.cpp	/^static const int gEdgeProb = 100;$/;"	v	file:
gEndPtTrackball	driver/trackball.cpp	/^float gEndPtTrackball[3];$/;"	v
gErrorMessage	driver/MAC/mac_main.cpp	/^char gErrorMessage[256] = ""; \/\/ buffer for error message output$/;"	v
gErrorTime	driver/MAC/mac_main.cpp	/^float gErrorTime = 0.0;$/;"	v
gEvtHandler	driver/MAC/mac_main.cpp	/^EventHandlerUPP gEvtHandler;			\/\/ main event handler$/;"	v
gHIDTimer	driver/MAC/HID Support/HIDSupport.cpp	/^EventLoopTimerRef gHIDTimer = NULL; \/\/ input timer$/;"	v
gNumDevices	driver/MAC/HID Support/HID_Utilities.cpp	/^unsigned long gNumDevices = 0;$/;"	v
gNumDisplays	driver/MAC/mac_main.cpp	/^CGDisplayCount gNumDisplays = 0;$/;"	v
gOrigin	driver/common.cpp	/^const recVec gOrigin = { 0.0, 0.0, 0.0 };$/;"	v
gPan	driver/MAC/mac_main.cpp	/^GLboolean gPan = GL_FALSE;$/;"	v
gPan	driver/main.cpp	/^GLboolean gPan = GL_FALSE;$/;"	v
gRadiusTrackball	driver/trackball.cpp	/^float gRadiusTrackball;$/;"	v
gStartPtTrackball	driver/trackball.cpp	/^float gStartPtTrackball[3];$/;"	v
gStartTime	driver/MAC/mac_main.cpp	/^AbsoluteTime gStartTime;$/;"	v
gStraightEdgeProb	abstraction/mapAbstraction.cpp	/^static const int gStraightEdgeProb = 100;$/;"	v	file:
gTrackBallRotation	driver/MAC/mac_main.cpp	/^GLfloat gTrackBallRotation [4] = {0.0f, 0.0f, 0.0f, 0.0f};$/;"	v
gTrackBallRotation	driver/main.cpp	/^GLfloat gTrackBallRotation [4] = {0.0f, 0.0f, 0.0f, 0.0f};$/;"	v
gTrackball	driver/MAC/mac_main.cpp	/^GLboolean gTrackball = GL_FALSE;$/;"	v
gTrackball	driver/main.cpp	/^GLboolean gTrackball = GL_FALSE;$/;"	v
gTrackingContextInfo	driver/MAC/mac_main.cpp	/^pRecContext gTrackingContextInfo = NULL;$/;"	v
gTrackingContextInfo	driver/main.cpp	/^pRecContext gTrackingContextInfo = NULL;$/;"	v
gWinEvtHandler	driver/MAC/mac_main.cpp	/^EventHandlerUPP gWinEvtHandler;			\/\/ window event handler$/;"	v
gXCenterTrackball	driver/trackball.cpp	/^long gXCenterTrackball = 0, gYCenterTrackball = 0;$/;"	v
gYCenterTrackball	driver/trackball.cpp	/^long gXCenterTrackball = 0, gYCenterTrackball = 0;$/;"	v
gcost	util/SearchEnvironment.cpp	/^double GraphSearchEnvironment::gcost(uint32_t node1, uint32_t node2)$/;"	f	class:GraphSearchEnvironment
gcost	util/SearchEnvironment.cpp	/^double MapSearchEnvironment::gcost(uint32_t node1, uint32_t node2)$/;"	f	class:MapSearchEnvironment
generateExperiments	extras/ScenarioManager.cpp	/^ScenarioManager::generateExperiments(mapAbstraction* absMap, int numexperiments) $/;"	f	class:ScenarioManager
generatePaths	shared/pathGeneration.cpp	/^void generatePaths(char *_map, int mapSizeX, int mapSizeY, int numBuckets, int bucketSize, int pathsPerBucket)$/;"	f
generateSingleExperiment	extras/ScenarioManager.cpp	/^ScenarioManager::generateSingleExperiment(mapAbstraction* absMap)$/;"	f	class:ScenarioManager
generated	extras/ScenarioManager.h	/^		int generated, target;$/;"	m	class:TooManyTriesException
get	util/bitVector.cpp	/^bool bitVector::get(int index) const$/;"	f	class:bitVector
getAbstractGraph	abstraction/graphAbstraction.h	/^	inline graph* getAbstractGraph(node *which) { return abstractions[which->getLabelL(kAbstractionLevel)]; }$/;"	f	class:graphAbstraction
getAbstractGraph	abstraction/graphAbstraction.h	/^  graph* getAbstractGraph(int level) { return abstractions[level]; }$/;"	f	class:graphAbstraction
getAbstractionLevel	abstraction/graphAbstraction.h	/^	inline long getAbstractionLevel(node *which) { return which->getLabelL(kAbstractionLevel); }$/;"	f	class:graphAbstraction
getAlg	util/HogConfig.h	/^		inline const char* getAlg() { return alg; }$/;"	f	class:HogConfig
getAlgorithm	shared/searchUnit.h	/^	virtual searchAlgorithm* getAlgorithm() { return algorithm; }$/;"	f	class:searchUnit
getBitmap	driver/TextBox.cpp	/^uint32_t TextBox::getBitmap(char c)$/;"	f	class:TextBox
getBucket	extras/Experiment.h	/^		inline int getBucket(){return bucket;}$/;"	f	class:Experiment
getCPUSpeed	apps/entry_jps/Timer.cpp	/^float Timer::getCPUSpeed()$/;"	f	class:Timer
getCPUSpeed	apps/entry_jps_plus/Timer.cpp	/^float Timer::getCPUSpeed()$/;"	f	class:Timer
getCPUSpeed	extras/timer.cpp	/^float Timer::getCPUSpeed()$/;"	f	class:Timer
getCachedMove	shared/searchUnit.cpp	/^bool searchUnit::getCachedMove(tDirection &dir)$/;"	f	class:searchUnit
getColor	simulation/unit.h	/^	void getColor(GLfloat& _r, GLfloat& _g, GLfloat& _b) { _r=r; _g=g; _b=b; }$/;"	f	class:unit
getColor	util/glUtil.cpp	/^recColor getColor(GLfloat v, GLfloat vmin, GLfloat vmax, int type)$/;"	f
getColorMap	util/mapOverlay.h	/^	int getColorMap() { return colorMap; }$/;"	f	class:MapOverlay
getConfigFilename	util/HogConfig.h	/^		inline const char* getConfigFilename() { return filename; }$/;"	f	class:HogConfig
getCoordinateScale	util/map.cpp	/^double Map::getCoordinateScale()$/;"	f	class:Map
getCornerHeight	util/map.cpp	/^long Map::getCornerHeight(long x, long y, tCorner which, tEdge edge) const$/;"	f	class:Map
getCornerHeight	util/map.cpp	/^long Map::getCornerHeight(long x, long y, tCorner which, tSplitSide split) const$/;"	f	class:Map
getCost	jump/JumpInfo.h	/^		inline double getCost(unsigned int index)$/;"	f	class:JumpInfo
getCurrentCaps	driver/MAC/mac_main.cpp	/^static void getCurrentCaps(void)$/;"	f	file:
getCurrentContext	driver/MAC/mac_main.cpp	/^pRecContext getCurrentContext()$/;"	f
getCurrentContext	driver/main.cpp	/^pRecContext getCurrentContext()$/;"	f
getCutCorners	jump/JumpPointLocator.h	/^		inline bool getCutCorners() { return cutCorners; }$/;"	f	class:JumpPointLocator
getDebugInfo	util/graph.h	/^  bool getDebugInfo() { return debuginfo; }$/;"	f	class:graph_object
getDefaultEdgeWeight	shared/aStar3.h	/^	double getDefaultEdgeWeight() { return wh; }$/;"	f	class:aStarOld
getDirection	jump/JumpInfo.h	/^		inline Jump::Direction getDirection(unsigned int index)$/;"	f	class:JumpInfo
getDirection	jump/RecursiveJumpPointExpansionPolicy.cpp	/^RecursiveJumpPointExpansionPolicy::getDirection(node* n_)$/;"	f	class:RecursiveJumpPointExpansionPolicy
getDisableGUI	driver/common.cpp	/^bool getDisableGUI()$/;"	f
getDisplayMapNumber	simulation/unitSimulation.h	/^	int getDisplayMapNumber() { return which_map; }$/;"	f	class:unitSimulation
getDisplayTime	simulation/unitSimulation.h	/^	double getDisplayTime() { return viewTime; }$/;"	f	class:unitSimulation
getDistance	extras/Experiment.h	/^		inline double getDistance(){return distance;}$/;"	f	class:Experiment
getDrawLand	util/map.h	/^  bool getDrawLand() { return drawLand; }$/;"	f	class:Map
getEdge	util/graph.cpp	/^edge *node::getEdge(unsigned int which)$/;"	f	class:node
getEdgeIter	util/graph.cpp	/^edge_iterator graph::getEdgeIter() const$/;"	f	class:graph
getEdgeIter	util/graph.cpp	/^edge_iterator node::getEdgeIter() const$/;"	f	class:node
getEdgeNum	util/graph.h	/^	int getEdgeNum() const { return edgeNum; } $/;"	f	class:edge
getEdgeWidthX	util/map.cpp	/^float Map::getEdgeWidthX(int x, int y)$/;"	f	class:Map
getEdgeWidthY	util/map.cpp	/^float Map::getEdgeWidthY(int x, int y)$/;"	f	class:Map
getElapsedTime	driver/MAC/mac_main.cpp	/^static float getElapsedTime(void)$/;"	f	file:
getElapsedTime	extras/timer.h	/^	double getElapsedTime(){return elapsedTime;}$/;"	f	class:Timer
getExpander	shared/FlexibleAStar.h	/^		ExpansionPolicy* getExpander() { return policy; }$/;"	f	class:FlexibleAStar
getFrom	util/graph.h	/^	unsigned int getFrom() { return from; }$/;"	f	class:edge
getGUI	util/HogConfig.h	/^		inline bool getGUI() { return gui; }$/;"	f	class:HogConfig
getGoal	util/altheap.h	/^		inline node* getGoal() { return goal; } $/;"	f	class:altheap
getGoalNode	util/ProblemInstance.cpp	/^ProblemInstance::getGoalNode()$/;"	f	class:ProblemInstance
getGoalX	extras/Experiment.h	/^		inline int getGoalX(){return goalx;}$/;"	f	class:Experiment
getGoalY	extras/Experiment.h	/^		inline int getGoalY(){return goaly;}$/;"	f	class:Experiment
getGraphAbstraction	shared/aStar3.h	/^	graphAbstraction* getGraphAbstraction() { return map; }$/;"	f	class:aStarOld
getGroupID	simulation/unitGroup.h	/^	int getGroupID() { return id; }$/;"	f	class:unitGroup
getHeight	util/map.cpp	/^long Map::getHeight(long x, long y, tSplitSide split)$/;"	f	class:Map
getHeuristic	shared/FlexibleAStar.h	/^		Heuristic* getHeuristic() { return heuristic; }$/;"	f	class:FlexibleAStar
getHeuristic	util/ProblemInstance.cpp	/^ProblemInstance::getHeuristic()$/;"	f	class:ProblemInstance
getHome	driver/common.cpp	/^char* getHome() { return HOGHOME; }$/;"	f
getIncomingEdgeIter	util/graph.cpp	/^edge_iterator node::getIncomingEdgeIter() const$/;"	f	class:node
getInsertedAtIndex	policies/InsertionPolicy.h	/^		node* getInsertedAtIndex(int idx) { return insertedNodes->at(idx); }$/;"	f	class:InsertionPolicy
getJumpInfo	jump/RecursiveJumpPointExpansionPolicy.cpp	/^RecursiveJumpPointExpansionPolicy::getJumpInfo()$/;"	f	class:RecursiveJumpPointExpansionPolicy
getKey	util/graph.h	/^  double getKey() { return label[keyLabel].fval; }$/;"	f	class:node
getKey	util/graph.h	/^  virtual double getKey() { return 0; }$/;"	f	class:graph_object
getLabelF	util/graph.h	/^	inline double getLabelF(unsigned int index) const { if (index < label.size()) return label[index].fval; return MAXINT; }$/;"	f	class:edge
getLabelF	util/graph.h	/^  inline double getLabelF(unsigned int index) {$/;"	f	class:node
getLabelL	util/graph.h	/^	inline long getLabelL(unsigned int index) const { if (index < label.size()) return label[index].lval; return MAXINT; }$/;"	f	class:edge
getLabelL	util/graph.h	/^  inline long getLabelL(unsigned int index) {$/;"	f	class:node
getLastStat	util/statCollection.cpp	/^statValue *statCollection::getLastStat(const char *category, const char *owner)$/;"	f	class:statCollection
getLimit	jump/JumpPointLocator.h	/^		inline int getLimit() { return jumplimit; }$/;"	f	class:JumpPointLocator
getLocation	driver/TextBox.cpp	/^point3d TextBox::getLocation()$/;"	f	class:TextBox
getLocation	simulation/unit.cpp	/^void unit::getLocation(int &_x, int &_y)$/;"	f	class:unit
getLockstepTime	simulation/unitSimulation.h	/^	bool getLockstepTime() { return lockstepTime; }$/;"	f	class:unitSimulation
getMap	abstraction/mapAbstraction.h	/^	Map* getMap() { return m; }$/;"	f	class:mapAbstraction
getMap	simulation/unitSimulation.h	/^	Map *getMap() { return map; }$/;"	f	class:unitSimulation
getMap	util/HogConfig.h	/^		inline const char* getMap() { return map; }$/;"	f	class:HogConfig
getMap	util/ProblemInstance.cpp	/^ProblemInstance::getMap()$/;"	f	class:ProblemInstance
getMap	util/mapOverlay.h	/^	Map *getMap() { return m; }$/;"	f	class:MapOverlay
getMapAbstraction	simulation/unitGroup.cpp	/^mapAbstraction *unitGroup::getMapAbstraction()$/;"	f	class:unitGroup
getMapAbstraction	simulation/unitSimulation.cpp	/^mapAbstraction *unitSimulation::getMapAbstraction()$/;"	f	class:unitSimulation
getMapAbstraction	simulation/unitSimulation.cpp	/^mapAbstraction *unitSimulation::getMapAbstraction(int _which)$/;"	f	class:unitSimulation
getMapAbstractionDisplay	simulation/unitSimulation.cpp	/^mapAbstraction *unitSimulation::getMapAbstractionDisplay()$/;"	f	class:unitSimulation
getMapGraph	abstraction/mapAbstraction.cpp	/^graph *getMapGraph(Map *m)$/;"	f
getMapGraph	abstraction/mapAbstraction.cpp	/^graph* getMapGraph(Map* m, INodeFactory* nf, IEdgeFactory* ef, bool allowDiagonals, bool cutCorners)$/;"	f
getMapHeight	util/map.h	/^  inline long getMapHeight() const { return height; }$/;"	f	class:Map
getMapName	extras/Experiment.h	/^		inline const char *getMapName() { return map.c_str(); }$/;"	f	class:Experiment
getMapName	extras/Experiment.h	/^		inline void getMapName(char* mymap){strcpy(mymap,map.c_str());}$/;"	f	class:Experiment
getMapName	util/map.cpp	/^const char *Map::getMapName()$/;"	f	class:Map
getMapWidth	util/map.h	/^  inline long getMapWidth() const { return width; }$/;"	f	class:Map
getMarked	util/graph.h	/^	bool getMarked() { return mark; }$/;"	f	class:edge
getMarkedEdge	util/graph.h	/^  edge *getMarkedEdge() { return markedEdge; }$/;"	f	class:node
getMaxDepth	jump/RecursiveJumpPointExpansionPolicy.h	/^		int getMaxDepth() { return MAX_DEPTH; } $/;"	f	class:RecursiveJumpPointExpansionPolicy
getMaxValue	util/mapOverlay.h	/^	double getMaxValue() { return maxVal; }$/;"	f	class:MapOverlay
getMemoryUsage	shared/aStar.cpp	/^int aStar::getMemoryUsage()$/;"	f	class:aStar
getMinValue	util/mapOverlay.h	/^	double getMinValue() { return minVal; }$/;"	f	class:MapOverlay
getModifierText	driver/common.cpp	/^const char *getModifierText(tKeyboardModifier t)$/;"	f
getMoveStochasticity	simulation/unitSimulation.h	/^	double getMoveStochasticity() { return stochasticity; }$/;"	f	class:unitSimulation
getName	jump/JumpPointSearch.h	/^		virtual const char *getName() { return name.c_str(); }$/;"	f	class:JumpPointSearch
getName	shared/FlexibleAStar.cpp	/^FlexibleAStar::getName()$/;"	f	class:FlexibleAStar
getName	shared/aStar.cpp	/^const char *aStar::getName()$/;"	f	class:aStar
getName	shared/aStar3.h	/^	virtual const char *getName() { return aStarName; }$/;"	f	class:aStarOld
getName	shared/searchUnit.h	/^	virtual const char *getName() { return algorithm->getName(); }$/;"	f	class:searchUnit
getName	shared/spreadExecSearchAlgorithm.h	/^	virtual const char *getName() { return "unnamed"; }$/;"	f	class:spreadExecSearchAlgorithm
getName	simulation/unit.h	/^	virtual const char *getName() { return "basicUnit"; }$/;"	f	class:unit
getName	simulation/unit.h	/^	virtual const char *getName() { return "billiardBallUnit"; }$/;"	f	class:billiardBallUnit
getName	simulation/unit.h	/^	virtual const char *getName() { return "randomUnit"; }$/;"	f	class:randomUnit
getName	simulation/unit.h	/^	virtual const char *getName() { return "randomerUnit"; }$/;"	f	class:randomerUnit
getName	simulation/unitGroup.h	/^	virtual const char *getName() { return "UnitGroupx"; }$/;"	f	class:unitGroup
getName	util/graph.h	/^  const char *getName() const { return name; }$/;"	f	class:node
getNeighborIter	util/graph.cpp	/^neighbor_iterator node::getNeighborIter() const$/;"	f	class:node
getNeighbors	util/SearchEnvironment.cpp	/^void GraphSearchEnvironment::getNeighbors(uint32_t nodeID, std::vector<uint32_t> &neighbors)$/;"	f	class:GraphSearchEnvironment
getNeighbors	util/SearchEnvironment.cpp	/^void MapSearchEnvironment::getNeighbors(uint32_t nodeID, std::vector<uint32_t> &neighbors)$/;"	f	class:MapSearchEnvironment
getNextNode	shared/aStar.cpp	/^node *aStar::getNextNode()$/;"	f	class:aStar
getNode	jump/JumpInfo.h	/^		inline node* getNode(unsigned int index) $/;"	f	class:JumpInfo
getNode	util/graph.cpp	/^node *graph::getNode(unsigned int num)$/;"	f	class:graph
getNodeFromMap	abstraction/mapAbstraction.h	/^	node *getNodeFromMap(int x, int y, tCorner c = kNone) { return abstractions[0]->getNode(m->getNodeNum(x, y, c)); }$/;"	f	class:mapAbstraction
getNodeIter	util/graph.cpp	/^node_iterator graph::getNodeIter() const$/;"	f	class:graph
getNodeLoc	abstraction/mapAbstraction.cpp	/^recVec mapAbstraction::getNodeLoc(node *n)$/;"	f	class:mapAbstraction
getNodeNum	util/map.cpp	/^int Map::getNodeNum(int x, int y, tCorner corner)$/;"	f	class:Map
getNodesExpanded	policies/InsertionPolicy.h	/^		long getNodesExpanded() { return nodesExpanded; }$/;"	f	class:InsertionPolicy
getNodesExpanded	policies/RefinementPolicy.h	/^		inline long getNodesExpanded() { return nodesExpanded; }$/;"	f	class:RefinementPolicy
getNodesExpanded	shared/aStar.h	/^	long getNodesExpanded() { return nodesExpanded; }$/;"	f	class:aStar
getNodesExpanded	shared/searchAlgorithm.h	/^	long getNodesExpanded() { return nodesExpanded; }$/;"	f	class:searchAlgorithm
getNodesExpanded	util/GenericIDAStar.h	/^	long getNodesExpanded() { return nodesExpanded; }$/;"	f	class:GenericIDAStar
getNodesGenerated	policies/InsertionPolicy.h	/^		long getNodesGenerated() { return nodesGenerated; }$/;"	f	class:InsertionPolicy
getNodesGenerated	policies/RefinementPolicy.h	/^		inline long getNodesGenerated() { return nodesGenerated; }$/;"	f	class:RefinementPolicy
getNodesGenerated	shared/searchAlgorithm.h	/^	long getNodesGenerated() { return nodesGenerated; }$/;"	f	class:searchAlgorithm
getNodesTouched	policies/InsertionPolicy.h	/^		long getNodesTouched() { return nodesTouched; }$/;"	f	class:InsertionPolicy
getNodesTouched	policies/RefinementPolicy.h	/^		inline long getNodesTouched() { return nodesTouched; }$/;"	f	class:RefinementPolicy
getNodesTouched	shared/aStar.h	/^	long getNodesTouched() { return nodesTouched; }$/;"	f	class:aStar
getNodesTouched	shared/searchAlgorithm.h	/^	long getNodesTouched() { return nodesTouched; }$/;"	f	class:searchAlgorithm
getNodesTouched	util/GenericIDAStar.h	/^	long getNodesTouched() { return nodesTouched; }$/;"	f	class:GenericIDAStar
getNthChild	abstraction/graphAbstraction.h	/^	inline node *getNthChild(node *which, int n) { return abstractions[getAbstractionLevel(which)-1]->getNode(which->getLabelL(kFirstData+n)); }$/;"	f	class:graphAbstraction
getNthExperiment	extras/ScenarioManager.h	/^		Experiment* getNthExperiment(int which) { if(which < (int)experiments.size()) return experiments[which]; return 0; }$/;"	f	class:AbstractScenarioManager
getNthParent	abstraction/graphAbstraction.cpp	/^node *graphAbstraction::getNthParent(node *which, int n)$/;"	f	class:graphAbstraction
getNum	util/graph.h	/^  unsigned int getNum() const { return nodeNum; }$/;"	f	class:node
getNumAbstractGraphs	abstraction/graphAbstraction.h	/^  unsigned int getNumAbstractGraphs() { return abstractions.size(); }$/;"	f	class:graphAbstraction
getNumChildren	abstraction/graphAbstraction.h	/^	inline long getNumChildren(node *which) { return which->getLabelL(kNumAbstractedNodes); }$/;"	f	class:graphAbstraction
getNumEdges	util/graph.h	/^  inline int getNumEdges() const { return _edges.size(); }$/;"	f	class:graph
getNumEdges	util/graph.h	/^  int getNumEdges() { return getNumOutgoingEdges()+getNumIncomingEdges(); }$/;"	f	class:node
getNumExperiments	extras/ScenarioManager.h	/^		int getNumExperiments() { return experiments.size(); }$/;"	f	class:AbstractScenarioManager
getNumExternalEdges	abstraction/graphAbstraction.cpp	/^int graphAbstraction::getNumExternalEdges(node *n, node *p)$/;"	f	class:graphAbstraction
getNumIncomingEdges	util/graph.cpp	/^int node::getNumIncomingEdges()$/;"	f	class:node
getNumInserted	policies/InsertionPolicy.h	/^		int getNumInserted() { return insertedNodes->size(); }$/;"	f	class:InsertionPolicy
getNumNodes	util/graph.h	/^  inline int getNumNodes() const { return _nodes.size(); }$/;"	f	class:graph
getNumOutgoingEdges	util/graph.cpp	/^int node::getNumOutgoingEdges()$/;"	f	class:node
getNumOwners	util/statCollection.cpp	/^int statCollection::getNumOwners() const$/;"	f	class:statCollection
getNumSetBits	util/bitVector.cpp	/^int bitVector::getNumSetBits()$/;"	f	class:bitVector
getNumStats	util/statCollection.cpp	/^int statCollection::getNumStats() const$/;"	f	class:statCollection
getNumUnits	simulation/unitSimulation.h	/^	int getNumUnits() { return units.size(); }$/;"	f	class:unitSimulation
getObjectType	simulation/unit.h	/^	tObjectType getObjectType() { return unitType; }$/;"	f	class:unit
getOpenGLCoord	util/map.cpp	/^void Map::getOpenGLCoord(int _x, int _y, GLdouble &x, GLdouble &y, GLdouble &z, GLdouble &radius) const$/;"	f	class:Map
getOpenGLLocation	simulation/unit.cpp	/^void unit::getOpenGLLocation(Map *map, GLdouble &_x, GLdouble &_y, GLdouble &_z, GLdouble &radius)$/;"	f	class:unit
getOutgoingEdgeIter	util/graph.cpp	/^edge_iterator node::getOutgoingEdgeIter() const$/;"	f	class:node
getOverlayValue	util/mapOverlay.cpp	/^double MapOverlay::getOverlayValue(int x, int y)$/;"	f	class:MapOverlay
getParent	abstraction/graphAbstraction.h	/^	inline node *getParent(node *which) { return abstractions[getAbstractionLevel(which)+1]->getNode(which->getLabelL(kParent)); }$/;"	f	class:graphAbstraction
getParentHierarchy	abstraction/graphAbstraction.cpp	/^void graphAbstraction::getParentHierarchy(node *from, node *to,$/;"	f	class:graphAbstraction
getPath	jump/JumpPointSearch.cpp	/^JumpPointSearch::getPath(graphAbstraction *aMap, node *start,$/;"	f	class:JumpPointSearch
getPath	shared/FlexibleAStar.cpp	/^FlexibleAStar::getPath(graphAbstraction *aMap, node *start, node *goal,$/;"	f	class:FlexibleAStar
getPath	shared/aStar.cpp	/^path *aStar::getPath(graphAbstraction *aMap, node *from, node *to, reservationProvider *)$/;"	f	class:aStar
getPath	shared/aStar3.cpp	/^path *aStarOld::getPath(graphAbstraction *aMap, node *from, node *to, reservationProvider *rp)$/;"	f	class:aStarOld
getPath	shared/spreadExecSearchAlgorithm.cpp	/^path *spreadExecSearchAlgorithm::getPath(graphAbstraction *_aMap, node *from, node *to, reservationProvider *_rp)$/;"	f	class:spreadExecSearchAlgorithm
getPath	util/GenericIDAStar.cpp	/^void GenericIDAStar::getPath(SearchEnvironment *env, uint32_t from, uint32_t to,$/;"	f	class:GenericIDAStar
getPathToNode	shared/aStar.cpp	/^path *aStar::getPathToNode(node *target)$/;"	f	class:aStar
getPenalty	simulation/unitSimulation.h	/^	double getPenalty() { return penalty; }$/;"	f	class:unitSimulation
getPointFromCoordinate	util/map.cpp	/^void Map::getPointFromCoordinate(point3d loc, int &px, int &py) const$/;"	f	class:Map
getPrecision	extras/Experiment.h	/^		inline int getPrecision() { return precision; }$/;"	f	class:Experiment
getProblemInstance	policies/ExpansionPolicy.cpp	/^ExpansionPolicy::getProblemInstance()$/;"	f	class:ExpansionPolicy
getQuadrant	abstraction/mapQuadTreeAbstraction.cpp	/^int mapQuadTreeAbstraction::getQuadrant(node *which)$/;"	f	class:mapQuadTreeAbstraction
getRandomEdge	util/graph.cpp	/^edge *graph::getRandomEdge()$/;"	f	class:graph
getRandomEdge	util/graph.cpp	/^edge *node::getRandomEdge()$/;"	f	class:node
getRandomIncomingEdge	util/graph.cpp	/^edge *node::getRandomIncomingEdge()$/;"	f	class:node
getRandomLocation	simulation/unitSimulation.cpp	/^void unitSimulation::getRandomLocation(int &x, int &y, tTerrain terrain)$/;"	f	class:unitSimulation
getRandomLocation	simulation/unitSimulation.cpp	/^void unitSimulation::getRandomLocation(int x1, int y1, int &x2, int &y2, tTerrain terrain)$/;"	f	class:unitSimulation
getRandomLocations	simulation/unitSimulation.cpp	/^void unitSimulation::getRandomLocations(int &x1, int &y1, int &x2, int &y2, tTerrain terrain)$/;"	f	class:unitSimulation
getRandomNode	util/graph.cpp	/^node *graph::getRandomNode()$/;"	f	class:graph
getRandomOutgoingEdge	util/graph.cpp	/^edge *node::getRandomOutgoingEdge()$/;"	f	class:node
getRandomTileFromNode	abstraction/mapAbstraction.cpp	/^void mapAbstraction::getRandomTileFromNode(node *n, int &x, int &y)$/;"	f	class:mapAbstraction
getReachableNodes	util/graph.cpp	/^vector<node*>* graph::getReachableNodes(node* start)$/;"	f	class:graph
getRealTime	simulation/unitSimulation.h	/^	bool getRealTime() { return realTime; }$/;"	f	class:unitSimulation
getRevision	util/map.h	/^  int getRevision() { return revision; }$/;"	f	class:Map
getSaveFSSpec	driver/MAC/mac_main.cpp	/^OSStatus getSaveFSSpec(WindowRef parentWin, CFStringRef title, CFStringRef action, CFStringRef file, CFStringRef message, FSSpec &fileRef)$/;"	f
getScenario	util/HogConfig.h	/^		inline const char* getScenario() { return scenario; }$/;"	f	class:HogConfig
getSearchTime	policies/InsertionPolicy.h	/^		double getSearchTime() { return searchTime; }$/;"	f	class:InsertionPolicy
getSearchTime	policies/RefinementPolicy.h	/^		inline double getSearchTime() { return searchTime; }$/;"	f	class:RefinementPolicy
getSearchTime	shared/searchAlgorithm.h	/^	double getSearchTime() { return searchTime; }$/;"	f	class:searchAlgorithm
getSimulationPaused	simulation/unitSimulation.h	/^	bool getSimulationPaused() { return pause; }$/;"	f	class:unitSimulation
getSimulationTime	simulation/unitSimulation.h	/^	double getSimulationTime() { return currTime; }$/;"	f	class:unitSimulation
getSize	util/bitVector.h	/^  int getSize() { return true_size; }$/;"	f	class:bitVector
getSpeed	simulation/unit.h	/^	virtual double getSpeed() { return speed; }$/;"	f	class:unit
getSplit	util/map.cpp	/^tSplit Map::getSplit(long x, long y) const$/;"	f	class:Map
getStartNode	util/ProblemInstance.cpp	/^ProblemInstance::getStartNode()$/;"	f	class:ProblemInstance
getStartX	extras/Experiment.h	/^		inline int getStartX(){return startx;}$/;"	f	class:Experiment
getStartY	extras/Experiment.h	/^		inline int getStartY(){return starty;}$/;"	f	class:Experiment
getStatNum	util/statCollection.cpp	/^const stat *statCollection::getStatNum(int which) const$/;"	f	class:statCollection
getStats	simulation/unitSimulation.h	/^	statCollection *getStats() { return &stats; }$/;"	f	class:unitSimulation
getTarget	policies/ExpansionPolicy.h	/^		node* getTarget() const { return target;}$/;"	f	class:ExpansionPolicy
getTarget	simulation/unit.h	/^	unit *getTarget() { return target; }$/;"	f	class:unit
getTerrainType	util/map.cpp	/^long Map::getTerrainType(long x, long y, tEdge side) const$/;"	f	class:Map
getTerrainType	util/map.cpp	/^long Map::getTerrainType(long x, long y, tSplitSide split) const$/;"	f	class:Map
getTile	util/map.cpp	/^Tile &Map::getTile(long x, long y)$/;"	f	class:Map
getTileFromNode	abstraction/mapAbstraction.cpp	/^void mapAbstraction::getTileFromNode(node *n, int &x, int &y)$/;"	f	class:mapAbstraction
getTileSet	util/map.cpp	/^tTileset Map::getTileSet()$/;"	f	class:Map
getTileUnderLoc	abstraction/mapAbstraction.cpp	/^void mapAbstraction::getTileUnderLoc(int &x, int &y, const recVec &v)$/;"	f	class:mapAbstraction
getTimerUPP	driver/MAC/mac_main.cpp	/^static EventLoopTimerUPP getTimerUPP(void)$/;"	f	file:
getTo	util/graph.h	/^	unsigned int getTo() { return to; }$/;"	f	class:edge
getUniqueID	util/graph.h	/^  int getUniqueID() const { return uniqueID; }$/;"	f	class:graph_object
getUnit	simulation/unitGroup.cpp	/^unit *unitGroup::getUnit(unsigned int which)$/;"	f	class:unitGroup
getUnit	simulation/unitSimulation.cpp	/^unit *unitSimulation::getUnit(int which)$/;"	f	class:unitSimulation
getUnitGroup	simulation/unit.h	/^	unitGroup *getUnitGroup() { return group; }$/;"	f	class:unit
getUnitGroup	simulation/unitSimulation.cpp	/^unitGroup *unitSimulation::getUnitGroup(int which)$/;"	f	class:unitSimulation
getUnitID	simulation/unit.h	/^	int getUnitID() { return id; }$/;"	f	class:unit
getVerbose	jump/JumpPointAbstraction.h	/^		bool getVerbose() { return verbose; }$/;"	f	class:JumpPointAbstraction
getVerbose	policies/InsertionPolicy.h	/^		inline bool getVerbose() { return verbose; }$/;"	f	class:InsertionPolicy
getVerbose	policies/RefinementPolicy.h	/^		inline bool getVerbose() { return verbose; }$/;"	f	class:RefinementPolicy
getWeight	util/graph.h	/^	double getWeight() { return getLabelF(kEdgeWeight); }$/;"	f	class:edge
getWidth	util/graph.h	/^	double getWidth() { return getLabelF(kEdgeWidth); }$/;"	f	class:edge
getWidth	util/graph.h	/^  double getWidth() { return width; }$/;"	f	class:node
getXScale	extras/Experiment.h	/^		inline int getXScale(){return scaleX;}$/;"	f	class:Experiment
getYScale	extras/Experiment.h	/^		inline int getYScale(){return scaleY;}$/;"	f	class:Experiment
gfAddAsChild	driver/MAC/HID Support/HID_Utilities.cpp	/^Boolean gfAddAsChild = true;$/;"	v
glBegin	driver/STUB/GL/gl.cpp	/^void glBegin ( GLenum mode ) {}$/;"	f
glBindTexture	driver/STUB/GL/gl.cpp	/^void glBindTexture(GLenum target, GLuint texture) {}$/;"	f
glBlendFunc	driver/STUB/GL/gl.cpp	/^void glBlendFunc ( GLenum sfactor, GLenum dfactor ) {}$/;"	f
glCallList	driver/STUB/GL/gl.cpp	/^void glCallList ( GLuint list ) {}$/;"	f
glClear	driver/STUB/GL/gl.cpp	/^void glClear ( GLbitfield mask ) {}$/;"	f
glClearColor	driver/STUB/GL/gl.cpp	/^void glClearColor ( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha ) {}$/;"	f
glColor3f	driver/STUB/GL/gl.cpp	/^void glColor3f ( GLfloat red, GLfloat green, GLfloat blue ) {}$/;"	f
glColor3fv	driver/STUB/GL/gl.cpp	/^void glColor3fv ( const GLfloat *v ) {}$/;"	f
glColor4f	driver/STUB/GL/gl.cpp	/^void glColor4f ( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha ) {}$/;"	f
glColorMaterial	driver/STUB/GL/gl.cpp	/^void glColorMaterial ( GLenum face, GLenum mode ) {}$/;"	f
glCullFace	driver/STUB/GL/gl.cpp	/^void glCullFace(GLenum mode) {}$/;"	f
glDeleteLists	driver/STUB/GL/gl.cpp	/^void glDeleteLists ( GLuint list, GLsizei range ) {}$/;"	f
glDepthMask	driver/STUB/GL/gl.cpp	/^void glDepthMask(GLboolean b) {}$/;"	f
glDisable	driver/STUB/GL/gl.cpp	/^void glDisable ( GLenum cap ) {}$/;"	f
glEnable	driver/STUB/GL/gl.cpp	/^void glEnable ( GLenum cap ) {}$/;"	f
glEnd	driver/STUB/GL/gl.cpp	/^void glEnd () {}$/;"	f
glEndList	driver/STUB/GL/gl.cpp	/^void glEndList () {}$/;"	f
glFrontFace	driver/STUB/GL/gl.cpp	/^void glFrontFace( GLenum mode ) {}$/;"	f
glFrustum	driver/STUB/GL/gl.cpp	/^void glFrustum ( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, $/;"	f
glGenLists	driver/STUB/GL/gl.cpp	/^GLuint glGenLists ( GLsizei range ) {return 0;}$/;"	f
glGenTextures	driver/STUB/GL/gl.cpp	/^void glGenTextures(GLsizei n, GLuint *texture) {}$/;"	f
glGetBooleanv	driver/STUB/GL/gl.cpp	/^void glGetBooleanv ( GLenum pname, GLboolean *params ) {}$/;"	f
glGetDoublev	driver/STUB/GL/gl.cpp	/^void glGetDoublev ( GLenum pname, GLdouble *params ) {}$/;"	f
glGetFloatv	driver/STUB/GL/gl.cpp	/^void glGetFloatv ( GLenum pname, GLfloat *params ) {}$/;"	f
glGetIntegerv	driver/STUB/GL/gl.cpp	/^void glGetIntegerv ( GLenum pname, GLint *params ) {}$/;"	f
glGetString	driver/STUB/GL/gl.cpp	/^const GLubyte* glGetString ( GLenum name ) { return 0; }$/;"	f
glIsEnabled	driver/STUB/GL/gl.cpp	/^GLboolean glIsEnabled ( GLenum cap ) {return false;}$/;"	f
glLightModeli	driver/STUB/GL/gl.cpp	/^void glLightModeli ( GLenum pname, GLint param ) {}$/;"	f
glLightfv	driver/STUB/GL/gl.cpp	/^void glLightfv ( GLenum light, GLenum pname, const GLfloat *params ) {}$/;"	f
glLineWidth	driver/STUB/GL/gl.cpp	/^void glLineWidth ( GLfloat width ) {}$/;"	f
glLoadIdentity	driver/STUB/GL/gl.cpp	/^void glLoadIdentity () {}$/;"	f
glMaterialfv	driver/STUB/GL/gl.cpp	/^void glMaterialfv ( GLenum face, GLenum pname, const GLfloat *params ) {}$/;"	f
glMatrixMode	driver/STUB/GL/gl.cpp	/^void glMatrixMode ( GLenum mode ) {}$/;"	f
glNewList	driver/STUB/GL/gl.cpp	/^void glNewList ( GLuint list, GLenum mode ) {}$/;"	f
glNormal3f	driver/STUB/GL/gl.cpp	/^void glNormal3f ( GLfloat nx, GLfloat ny, GLfloat nz ) {}$/;"	f
glNormal3fv	driver/STUB/GL/gl.cpp	/^void glNormal3fv(const GLfloat *v) {}$/;"	f
glPolygonMode	driver/STUB/GL/gl.cpp	/^void glPolygonMode ( GLenum face, GLenum mode ) {}$/;"	f
glPolygonOffset	driver/STUB/GL/gl.cpp	/^void glPolygonOffset ( GLfloat factor, GLfloat units ) {}$/;"	f
glPopMatrix	driver/STUB/GL/gl.cpp	/^void glPopMatrix () {}$/;"	f
glPushMatrix	driver/STUB/GL/gl.cpp	/^void glPushMatrix () {}$/;"	f
glRasterPos3d	driver/STUB/GL/gl.cpp	/^void glRasterPos3d ( GLdouble x, GLdouble y, GLdouble z ) {}$/;"	f
glReadPixels	driver/STUB/GL/gl.cpp	/^void glReadPixels ( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels ) {}$/;"	f
glReportError	driver/MAC/mac_main.cpp	/^OSStatus glReportError(void)$/;"	f
glRotatef	driver/STUB/GL/gl.cpp	/^void glRotatef ( GLfloat angle, GLfloat x, GLfloat y, GLfloat z ) {}$/;"	f
glScalef	driver/STUB/GL/gl.cpp	/^void glScalef ( GLfloat x, GLfloat y, GLfloat z ) {}$/;"	f
glShadeModel	driver/STUB/GL/gl.cpp	/^void glShadeModel ( GLenum mode ) {}$/;"	f
glTexCoord2f	driver/STUB/GL/gl.cpp	/^void glTexCoord2f(GLfloat s, GLfloat t) {}$/;"	f
glTexParameteri	driver/STUB/GL/gl.cpp	/^void glTexParameteri(GLenum target, GLenum pname, GLint param) {}$/;"	f
glTranslated	driver/STUB/GL/gl.cpp	/^void glTranslated ( GLdouble x, GLdouble y, GLdouble z ) {}$/;"	f
glTranslatef	driver/STUB/GL/gl.cpp	/^void glTranslatef ( GLfloat x, GLfloat y, GLfloat z ) {}$/;"	f
glVersion	driver/MAC/macGlCheck.h	/^  unsigned short glVersion; \/\/ bcd gl version (ie. 1.4 is 0x0140)$/;"	m	struct:__anon16
glVertex2f	driver/STUB/GL/gl.cpp	/^void glVertex2f ( GLfloat x, GLfloat y ) {}$/;"	f
glVertex3d	driver/STUB/GL/gl.cpp	/^void glVertex3d ( GLdouble x, GLdouble y, GLdouble z ) {}$/;"	f
glVertex3f	driver/STUB/GL/gl.cpp	/^void glVertex3f ( GLfloat x, GLfloat y, GLfloat z ) {}$/;"	f
glViewport	driver/STUB/GL/gl.cpp	/^void glViewport ( GLint x, GLint y, GLsizei width, GLsizei height ) {}$/;"	f
gluBuild2DMipmaps	driver/STUB/GL/gl.cpp	/^GLint gluBuild2DMipmaps(GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *data) { return 0; }$/;"	f
gluLookAt	driver/STUB/GL/glut.cpp	/^void gluLookAt (GLdouble eyeX, GLdouble eyeY, GLdouble eyeZ, $/;"	f
gluUnProject	driver/STUB/GL/gl.cpp	/^int gluUnProject (GLdouble winx, GLdouble winy, GLdouble winz,$/;"	f
glutAddMenuEntry	driver/STUB/GL/glut.cpp	/^void glutAddMenuEntry (char *label, int value) {}$/;"	f
glutAddSubMenu	driver/STUB/GL/glut.cpp	/^void glutAddSubMenu (char *label, int submenu) {}$/;"	f
glutAttachMenu	driver/STUB/GL/glut.cpp	/^void glutAttachMenu (int button) {}$/;"	f
glutCreateMenu	driver/STUB/GL/glut.cpp	/^int glutCreateMenu (void (*) (int)) {return 0;}$/;"	f
glutCreateWindow	driver/STUB/GL/glut.cpp	/^int glutCreateWindow (char *title) {return 0;}$/;"	f
glutDisplayFunc	driver/STUB/GL/glut.cpp	/^void glutDisplayFunc (void (*) (void)) {}$/;"	f
glutGet	driver/STUB/GL/glut.cpp	/^int glutGet (GLenum type) {return 0;}$/;"	f
glutGetModifiers	driver/STUB/GL/glut.cpp	/^int glutGetModifiers (void) {return 0;}$/;"	f
glutIdleFunc	driver/STUB/GL/glut.cpp	/^int glutIdleFunc (void (*)(void)) {return 0;}$/;"	f
glutInit	driver/STUB/GL/glut.cpp	/^void glutInit (int *argcp, char **argv) {}$/;"	f
glutInitDisplayMode	driver/STUB/GL/glut.cpp	/^void glutInitDisplayMode (unsigned int mode) {}$/;"	f
glutInitWindowPosition	driver/STUB/GL/glut.cpp	/^void glutInitWindowPosition (int x, int y) {}$/;"	f
glutInitWindowSize	driver/STUB/GL/glut.cpp	/^void glutInitWindowSize (int width, int height) {}$/;"	f
glutKeyboardFunc	driver/STUB/GL/glut.cpp	/^void glutKeyboardFunc (void (*) (unsigned char key, int x, int y)) {}$/;"	f
glutMainLoop	driver/STUB/GL/glut.cpp	/^void glutMainLoop (void) { $/;"	f
glutMotionFunc	driver/STUB/GL/glut.cpp	/^void glutMotionFunc (void (*) (int x, int y)) {}$/;"	f
glutMouseFunc	driver/STUB/GL/glut.cpp	/^void glutMouseFunc (void (*) (int button, int state, int x, int y)) {}$/;"	f
glutReshapeFunc	driver/STUB/GL/glut.cpp	/^void glutReshapeFunc (void (*) (int width, int height)) {}$/;"	f
glutSwapBuffers	driver/STUB/GL/glut.cpp	/^void glutSwapBuffers (void) {}$/;"	f
goal	shared/aStar.h	/^	node *goal, *start;$/;"	m	class:aStar
goal	util/ProblemInstance.h	/^		node *start, *goal;$/;"	m	class:ProblemInstance
goal	util/altheap.h	/^		node* goal;$/;"	m	class:altheap
goalTest	util/SearchEnvironment.h	/^	virtual bool goalTest(uint32_t node, uint32_t goal) { return (node == goal); }$/;"	f	class:SearchEnvironment
goalx	apps/entry_jps/ScenarioLoader.h	/^	int startx, starty, goalx, goaly;$/;"	m	class:Experiment
goalx	apps/entry_jps_plus/ScenarioLoader.h	/^	int startx, starty, goalx, goaly;$/;"	m	class:Experiment
goalx	extras/Experiment.h	/^		int startx, starty, goalx, goaly;$/;"	m	class:Experiment
goaly	apps/entry_jps/ScenarioLoader.h	/^	int startx, starty, goalx, goaly;$/;"	m	class:Experiment
goaly	apps/entry_jps_plus/ScenarioLoader.h	/^	int startx, starty, goalx, goaly;$/;"	m	class:Experiment
goaly	extras/Experiment.h	/^		int startx, starty, goalx, goaly;$/;"	m	class:Experiment
gobjCount	util/graph.cpp	/^int graph_object::gobjCount = 0;$/;"	m	class:graph_object	file:
gobjCount	util/graph.h	/^  static int gobjCount;$/;"	m	class:graph_object
gpDeviceList	driver/MAC/HID Support/HID_Utilities.cpp	/^pRecDevice gpDeviceList = NULL;$/;"	v
graph	util/graph.cpp	/^graph::graph()$/;"	f	class:graph
graph	util/graph.h	/^class graph : public graph_object {$/;"	c
graphAbstraction	abstraction/graphAbstraction.h	/^	graphAbstraction() :abstractions() {}$/;"	f	class:graphAbstraction
graphAbstraction	abstraction/graphAbstraction.h	/^class graphAbstraction {$/;"	c
graph_object	util/graph.h	/^  graph_object():key(0), debuginfo(false), uniqueID(uniqueIDCounter++) { gobjCount++; }$/;"	f	class:graph_object
graph_object	util/graph.h	/^class graph_object {$/;"	c
greaterThan	util/altheap.cpp	/^altheap::greaterThan(graph_object* first, graph_object* second)$/;"	f	class:altheap
greaterThan	util/heap.cpp	/^bool heap::greaterThan(graph_object* first, graph_object* second)$/;"	f	class:heap
group	simulation/unit.h	/^	unitGroup *group;$/;"	m	class:unit
groupID	simulation/unitGroup.cpp	/^int unitGroup::groupID = 0;$/;"	m	class:unitGroup	file:
groupID	simulation/unitGroup.h	/^	static int groupID;$/;"	m	class:unitGroup
groups	abstraction/mapFlatAbstraction.h	/^		std::vector<int> groups;$/;"	m	class:mapFlatAbstraction
groupsValid	abstraction/mapFlatAbstraction.h	/^		bool groupsValid;$/;"	m	class:mapFlatAbstraction
gui	util/HogConfig.h	/^		bool gui;$/;"	m	class:HogConfig
h	abstraction/mapAbstraction.cpp	/^double mapAbstraction::h(node *a, node *b)$/;"	f	class:mapAbstraction
h	apps/entry_jps/Timer.h	/^		struct { uint32_t l, h; } c4;$/;"	m	struct:Timer::CycleCounter::__anon2::__anon3
h	apps/entry_jps_plus/Timer.h	/^		struct { uint32_t l, h; } c4;$/;"	m	struct:Timer::CycleCounter::__anon4::__anon5
h	extras/timer.h	/^		struct { uint32_t l, h; } c4;$/;"	m	struct:Timer::CycleCounter::__anon17::__anon18
h	heuristics/ManhattanHeuristic.cpp	/^double ManhattanHeuristic::h(node* a, node* b) const$/;"	f	class:ManhattanHeuristic
h	heuristics/OctileHeuristic.cpp	/^double OctileHeuristic::h(node* a, node* b) const$/;"	f	class:OctileHeuristic
h	shared/aStar3.cpp	/^double aStarOld::h(node* a, node*b) throw(std::invalid_argument)$/;"	f	class:aStarOld
hGDevice	driver/MAC/macGlCheck.h	/^  GDHandle hGDevice; \/\/ graphics device handle$/;"	m	struct:__anon16
halfTile	util/map.cpp	/^halfTile::halfTile()$/;"	f	class:halfTile
halfTile	util/map.h	/^class halfTile {$/;"	c
handleConfigDMEvent	driver/MAC/mac_main.cpp	/^void handleConfigDMEvent(void *, short theMessage, void *)$/;"	f
handleJoystickMovement	driver/common.cpp	/^void handleJoystickMovement(pRecContext pContextInfo, double panX, double panY)$/;"	f
handleKeyInput	driver/MAC/mac_main.cpp	/^static OSStatus handleKeyInput (EventHandlerCallRef myHandler, EventRef event, Boolean keyDown, void* userData)$/;"	f	file:
handleMouseClick	driver/common.cpp	/^bool handleMouseClick(pRecContext pContextInfo, int x, int y, point3d where,$/;"	f
handleWindowDMEvent	driver/MAC/mac_main.cpp	/^void handleWindowDMEvent(void *userData, short theMessage, void *)$/;"	f
handleWindowMouseEvents	driver/MAC/mac_main.cpp	/^static OSStatus handleWindowMouseEvents (EventHandlerCallRef myHandler, EventRef event)$/;"	f	file:
handleWindowUpdate	driver/MAC/mac_main.cpp	/^static void handleWindowUpdate(WindowRef window)$/;"	f	file:
hasCenter	driver/MAC/HID Support/HID_Utilities_External.h	/^    unsigned char  hasCenter; 				\/\/ whether or not to use center for calibration$/;"	m	struct:recElement
hasNext	jump/JumpPointExpansionPolicy.cpp	/^JumpPointExpansionPolicy::hasNext()$/;"	f	class:JumpPointExpansionPolicy
hasNext	jump/RecursiveJumpPointExpansionPolicy.cpp	/^RecursiveJumpPointExpansionPolicy::hasNext()$/;"	f	class:RecursiveJumpPointExpansionPolicy
hasNext	policies/GridMapExpansionPolicy.cpp	/^bool GridMapExpansionPolicy::hasNext()$/;"	f	class:GridMapExpansionPolicy
hasNext	policies/IncidentEdgesExpansionPolicy.cpp	/^IncidentEdgesExpansionPolicy::hasNext()$/;"	f	class:IncidentEdgesExpansionPolicy
hats	driver/MAC/HID Support/HID_Utilities.h	/^    long hats;								\/\/ number of hat switches (calculated, not reported by device)$/;"	m	struct:recDevice
hats	driver/MAC/HID Support/HID_Utilities_External.h	/^    long hats;								\/\/ number of hat switches (calculated, not reported by device)$/;"	m	struct:recDevice
head_offset	extras/ScenarioManager.cpp	/^static int head_offset = 0;$/;"	v	file:
heap	util/heap.cpp	/^heap::heap(int s, bool minheap)$/;"	f	class:heap
heap	util/heap.h	/^class heap {$/;"	c
heap2	util/heap2.h	/^class heap2 {$/;"	c
heap2	util/heap2.h	/^heap2<OBJ, HashKey, EqKey, CmpKey>::heap2()$/;"	f	class:heap2
heapifyDown	util/heap.cpp	/^void heap::heapifyDown(int index)$/;"	f	class:heap
heapifyDown	util/heap2.h	/^void heap2<OBJ, HashKey, EqKey, CmpKey>::heapifyDown(unsigned int index)$/;"	f	class:heap2
heapifyUp	util/heap.cpp	/^void heap::heapifyUp(int index)$/;"	f	class:heap
heapifyUp	util/heap2.h	/^void heap2<OBJ, HashKey, EqKey, CmpKey>::heapifyUp(unsigned int index)$/;"	f	class:heap2
height	driver/MAC/mac_main.cpp	/^	int width, height;$/;"	m	class:movieFrame	file:
height	driver/main.h	/^   float height;$/;"	m	struct:CGSize
height	util/map.h	/^	int width, height;$/;"	m	class:Map
heuristic	jump/JumpPointSearch.h	/^		Heuristic* heuristic;$/;"	m	class:JumpPointSearch
heuristic	shared/FlexibleAStar.h	/^		Heuristic* heuristic;$/;"	m	class:FlexibleAStar
heuristic	util/DebugUtility.h	/^		Heuristic* heuristic;$/;"	m	class:DebugUtility
heuristic	util/ProblemInstance.h	/^		Heuristic* heuristic;$/;"	m	class:ProblemInstance
heuristic	util/SearchEnvironment.cpp	/^double GraphSearchEnvironment::heuristic(uint32_t node1, uint32_t node2)$/;"	f	class:GraphSearchEnvironment
heuristic	util/SearchEnvironment.cpp	/^double MapSearchEnvironment::heuristic(uint32_t node1, uint32_t node2)$/;"	f	class:MapSearchEnvironment
heuristic	util/altheap.h	/^		Heuristic* heuristic;$/;"	m	class:altheap
hf	shared/FlexibleAStarFactory.h	/^		IHeuristicFactory* hf;$/;"	m	class:FlexibleAStarFactory
historyIndex	simulation/unitSimulation.h	/^	unsigned int historyIndex;$/;"	m	class:unitInfo
hog_asserts_enabled	jump/Jump.cpp	/^bool Jump::hog_asserts_enabled()$/;"	f	class:Jump
id	simulation/unit.h	/^	int id;$/;"	m	class:unit
id	simulation/unitGroup.h	/^	int id;$/;"	m	class:unitGroup
ignoreOnTarget	simulation/unitSimulation.h	/^	bool ignoreOnTarget;$/;"	m	class:unitInfo
ignoreVal	util/mapOverlay.h	/^	double ignoreVal;$/;"	m	class:MapOverlay
image	driver/MAC/mac_main.cpp	/^	char *image;$/;"	m	class:movieFrame	file:
importGraph	jump/JumpPointAbstraction.cpp	/^JumpPointAbstraction::importGraph(const char* filename)$/;"	f	class:JumpPointAbstraction
includeFilters	util/statCollection.h	/^	std::vector<const char *> includeFilters;$/;"	m	class:statCollection
increaseColorMap	util/mapOverlay.h	/^	void increaseColorMap() { colorMap++; }$/;"	f	class:MapOverlay
increaseDisplayALevel	simulation/unitGroup.h	/^	virtual void increaseDisplayALevel(void) {  }$/;"	f	class:unitGroup
increaseKey	util/heap.cpp	/^void heap::increaseKey(graph_object* val)$/;"	f	class:heap
info	driver/common.h	/^	bool info;$/;"	m	struct:recContext
initialCenter	driver/MAC/HID Support/HID_Utilities_External.h	/^    long initialCenter; 					\/\/ center value at start up$/;"	m	struct:recElement
initialConditions	driver/common.cpp	/^void initialConditions(pRecContext pContextInfo)$/;"	f
inputs	driver/MAC/HID Support/HID_Utilities.h	/^	long inputs;							\/\/ number of elements of type kIOHIDElementTypeInput_Misc or kIOHIDElementTypeInput_Button or kIOHIDElementTypeInput_Axis or kIOHIDElementTypeInput_ScanCodes$/;"	m	struct:recDevice
inputs	driver/MAC/HID Support/HID_Utilities_External.h	/^	long inputs;							\/\/ number of elements of type kIOHIDElementTypeInput_Misc or kIOHIDElementTypeInput_Button or kIOHIDElementTypeInput_Axis or kIOHIDElementTypeInput_ScanCodes$/;"	m	struct:recDevice
insert	policies/NoInsertionPolicy.cpp	/^NoInsertionPolicy::insert(node* n) throw(std::invalid_argument)$/;"	f	class:NoInsertionPolicy
insertedNodes	policies/InsertionPolicy.h	/^		std::vector<node*>* insertedNodes;$/;"	m	class:InsertionPolicy
installCommandLineHandler	driver/common.cpp	/^void installCommandLineHandler(commandLineCallback CLC,$/;"	f
installJoystickHandler	driver/common.cpp	/^void installJoystickHandler(joystickCallback jC, void *userdata)$/;"	f
installKeyboardHandler	driver/common.cpp	/^void installKeyboardHandler(keyboardCallback kf, const char *title, const char *description,$/;"	f
installMouseClickHandler	driver/common.cpp	/^void installMouseClickHandler(mouseCallback mC)$/;"	f
interface	driver/MAC/HID Support/HID_Utilities.h	/^    IOHIDDeviceInterface ** interface;		\/\/ interface to device, NULL = no interface$/;"	m	struct:recDevice
interface	driver/MAC/HID Support/HID_Utilities_External.h	/^    void * interface;						\/\/ interface to device, NULL = no interface$/;"	m	struct:recDevice
internalHeuristic	shared/aStar.cpp	/^double aStar::internalHeuristic(node *from, node *to)$/;"	f	class:aStar
isIn	util/heap.cpp	/^bool heap::isIn(graph_object *val)$/;"	f	class:heap
isIn	util/heap2.h	/^bool heap2<OBJ, HashKey, EqKey, CmpKey>::isIn(OBJ val)$/;"	f	class:heap2
isLegalStone	util/map.cpp	/^bool Map::isLegalStone(char c)$/;"	f	class:Map
isMinHeap	util/heap.h	/^  bool isMinHeap() { return minheap; } $/;"	f	class:heap
jC	driver/common.h	/^	joystickCallback jC;$/;"	m	class:joystickCallbackData
joystickCallback	driver/common.h	/^typedef void (*joystickCallback)(unitSimulation *, double offsetX, double offsetY, void*);$/;"	t
joystickCallbackData	driver/common.h	/^	joystickCallbackData(joystickCallback _jC, void *_userData)$/;"	f	class:joystickCallbackData
joystickCallbackData	driver/common.h	/^class joystickCallbackData {$/;"	c
joystickCallbacks	driver/common.cpp	/^static std::vector<joystickCallbackData *> joystickCallbacks;$/;"	v	file:
jpl	jump/JumpPointExpansionPolicy.h	/^		JumpPointLocator* jpl;$/;"	m	class:JumpPointExpansionPolicy
jpl	jump/JumpPointRefinementPolicy.h	/^		OnlineJumpPointLocator* jpl;$/;"	m	class:JumpPointRefinementPolicy
jpl	jump/RecursiveJumpPointExpansionPolicy.h	/^		JumpPointLocator* jpl;$/;"	m	class:RecursiveJumpPointExpansionPolicy
jumpcosts	jump/JumpInfo.h	/^		std::vector<double> jumpcosts; $/;"	m	class:JumpInfo
jumpdirs	jump/JumpInfo.h	/^		std::vector<Jump::Direction> jumpdirs; $/;"	m	class:JumpInfo
jumplimit	jump/JumpPointExpansionPolicy.h	/^		int jumplimit; $/;"	m	class:JumpPointExpansionPolicy
jumplimit	jump/JumpPointLocator.h	/^		int jumplimit; \/\/ max # of steps to take before giving up (default=inf)$/;"	m	class:JumpPointLocator
jumplimit	jump/RecursiveJumpPointExpansionPolicy.h	/^		int jumplimit; $/;"	m	class:RecursiveJumpPointExpansionPolicy
jumpnodes	jump/JumpInfo.h	/^		std::vector<node*> jumpnodes;$/;"	m	class:JumpInfo
kAbstractionLevel	simulation/constants.h	/^  kAbstractionLevel = 0, \/\/ this is a LONG label$/;"	e	enum:__anon20
kActionXAxis	driver/MAC/HID Support/HIDSupport.h	/^	kActionXAxis,$/;"	e	enum:__anon15
kActionYAxis	driver/MAC/HID Support/HIDSupport.h	/^	kActionYAxis,$/;"	e	enum:__anon15
kAltDown	driver/common.h	/^	kAltDown \/\/ option on the mac$/;"	e	enum:tKeyboardModifier
kAnimateMenuItem	driver/common.h	/^	kAnimateMenuItem = 5,$/;"	e	enum:__anon6
kAnimateState	driver/common.h	/^	kAnimateState = 0$/;"	e	enum:__anon6
kAnyModifier	driver/common.h	/^	kAnyModifier,$/;"	e	enum:tKeyboardModifier
kBackwardSplit	util/map.h	/^  kBackwardSplit=2     \/\/ ie like back slash$/;"	e	enum:tSplit
kBlight	util/map.h	/^  kBlight=0x20,$/;"	e	enum:tTerrain
kBottomEdge	util/map.h	/^  kBottomEdge$/;"	e	enum:tEdge
kBottomLeft	util/map.h	/^  kBottomLeft = 3,$/;"	e	enum:tCorner
kBottomRight	util/map.h	/^  kBottomRight = 4$/;"	e	enum:tCorner
kBuildGraph	abstraction/graphAbstraction.cpp	/^	kBuildGraph = 0x01,$/;"	e	enum:__anon1	file:
kCloseMenuItem	driver/common.h	/^	kCloseMenuItem = 2,$/;"	e	enum:__anon6
kControlDown	driver/common.h	/^	kControlDown,$/;"	e	enum:tKeyboardModifier
kDefaultUserMax	driver/MAC/HID Support/HID_Utilities.h	/^    kDefaultUserMax = 255,$/;"	e	enum:__anon11
kDefaultUserMax	driver/MAC/HID Support/HID_Utilities_External.h	/^    kDefaultUserMax = 255$/;"	e	enum:__anon12
kDefaultUserMin	driver/MAC/HID Support/HID_Utilities.h	/^    kDefaultUserMin = 0,					\/\/ default user min and max used for scaling$/;"	e	enum:__anon11
kDefaultUserMin	driver/MAC/HID Support/HID_Utilities_External.h	/^    kDefaultUserMin = 0,					\/\/ default user min and max used for scaling$/;"	e	enum:__anon12
kDeg2Rad	driver/trackball.cpp	/^static const float kDeg2Rad = 3.1415927 \/ 180.;$/;"	v	file:
kDeviceQueueSize	driver/MAC/HID Support/HID_Queue_Utilities.h	/^    kDeviceQueueSize = 50	\/\/ this is wired kernel memory so should be set to as small as possible$/;"	e	enum:__anon10
kDeviceQueueSize	driver/MAC/HID Support/HID_Utilities_External.h	/^    kDeviceQueueSize = 50	\/\/ this is wired kernel memory so should be set to as small as possible$/;"	e	enum:__anon13
kDisplayOnly	simulation/constants.h	/^	kDisplayOnly, kIncidentalUnit, kWorldObject$/;"	e	enum:tObjectType
kE	simulation/constants.h	/^	kN=0x8, kS=0x4, kE=0x2, kW=0x1, kNW=kN|kW, kNE=kN|kE, $/;"	e	enum:tDirection
kEdgeCapacity	simulation/constants.h	/^  kEdgeCapacity=2$/;"	e	enum:__anon21
kEdgeWeight	util/graph.h	/^	kEdgeWeight = 0,$/;"	e	enum:__anon24
kEdgeWidth	util/graph.h	/^	kEdgeWidth = 1$/;"	e	enum:__anon24
kFSAAFast	driver/common.h	/^	kFSAAFast = 1,$/;"	e	enum:__anon7
kFSAANice	driver/common.h	/^	kFSAANice = 2,$/;"	e	enum:__anon7
kFSAAOff	driver/common.h	/^	kFSAAOff = 0,$/;"	e	enum:__anon7
kFall	util/map.h	/^	kFall,$/;"	e	enum:tTileset
kFallTile	util/map.h	/^	kFallTile,$/;"	e	enum:tTileset
kFast	util/map.h	/^	kFast$/;"	e	enum:tTileset
kFirstData	simulation/constants.h	/^  kFirstData = 9$/;"	e	enum:__anon20
kForwardSplit	util/map.h	/^  kForwardSplit=1, \/\/ ie like forward slash$/;"	e	enum:tSplit
kGrass	util/map.h	/^  kGrass=0x0F,$/;"	e	enum:tTerrain
kGround	util/map.h	/^  kGround=0x04,     \/\/ ground$/;"	e	enum:tTerrain
kHIDElementTypeAll	driver/MAC/HID Support/HID_Utilities.h	/^	kHIDElementTypeAll					= kHIDElementTypeIO | kHIDElementTypeCollection$/;"	e	enum:HIDElementTypeMask
kHIDElementTypeAll	driver/MAC/HID Support/HID_Utilities_External.h	/^	kHIDElementTypeAll					= kHIDElementTypeIO | kHIDElementTypeCollection$/;"	e	enum:HIDElementTypeMask
kHIDElementTypeCollection	driver/MAC/HID Support/HID_Utilities.h	/^	kHIDElementTypeCollection        	= 1 << 4,$/;"	e	enum:HIDElementTypeMask
kHIDElementTypeCollection	driver/MAC/HID Support/HID_Utilities_External.h	/^	kHIDElementTypeCollection        	= 1 << 4,$/;"	e	enum:HIDElementTypeMask
kHIDElementTypeFeature	driver/MAC/HID Support/HID_Utilities.h	/^	kHIDElementTypeFeature           	= 1 << 3,$/;"	e	enum:HIDElementTypeMask
kHIDElementTypeFeature	driver/MAC/HID Support/HID_Utilities_External.h	/^	kHIDElementTypeFeature           	= 1 << 3,$/;"	e	enum:HIDElementTypeMask
kHIDElementTypeIO	driver/MAC/HID Support/HID_Utilities.h	/^	kHIDElementTypeIO					= kHIDElementTypeInput | kHIDElementTypeOutput | kHIDElementTypeFeature,$/;"	e	enum:HIDElementTypeMask
kHIDElementTypeIO	driver/MAC/HID Support/HID_Utilities_External.h	/^	kHIDElementTypeIO					= kHIDElementTypeInput | kHIDElementTypeOutput | kHIDElementTypeFeature,$/;"	e	enum:HIDElementTypeMask
kHIDElementTypeInput	driver/MAC/HID Support/HID_Utilities.h	/^	kHIDElementTypeInput				= 1 << 1,$/;"	e	enum:HIDElementTypeMask
kHIDElementTypeInput	driver/MAC/HID Support/HID_Utilities_External.h	/^	kHIDElementTypeInput				= 1 << 1,$/;"	e	enum:HIDElementTypeMask
kHIDElementTypeOutput	driver/MAC/HID Support/HID_Utilities.h	/^	kHIDElementTypeOutput            	= 1 << 2,$/;"	e	enum:HIDElementTypeMask
kHIDElementTypeOutput	driver/MAC/HID Support/HID_Utilities_External.h	/^	kHIDElementTypeOutput            	= 1 << 2,$/;"	e	enum:HIDElementTypeMask
kIncidentalUnit	simulation/constants.h	/^	kDisplayOnly, kIncidentalUnit, kWorldObject$/;"	e	enum:tObjectType
kInfoMenuItem	driver/common.h	/^	kInfoMenuItem = 4,$/;"	e	enum:__anon6
kInfoState	driver/common.h	/^	kInfoState = 1,$/;"	e	enum:__anon6
kInternalEdge	util/map.h	/^  kInternalEdge,$/;"	e	enum:tEdge
kLeftButton	driver/common.h	/^	kLeftButton,$/;"	e	enum:tButtonType
kLeftEdge	util/map.h	/^  kLeftEdge,$/;"	e	enum:tEdge
kLeftSide	util/map.h	/^  kLeftSide = 2,$/;"	e	enum:tSplitSide
kLines	util/map.h	/^  kLines,$/;"	e	enum:tDisplay
kMacallyID	driver/MAC/HID Support/HID_Name_Lookup.h	/^#define kMacallyID /;"	d
kMainMenu	driver/common.h	/^	kMainMenu = 500,$/;"	e	enum:__anon6
kMiddleButton	driver/common.h	/^	kMiddleButton \/\/ option on the mac$/;"	e	enum:tButtonType
kMiscMessages	abstraction/graphAbstraction.cpp	/^	kMiscMessages = 0x04$/;"	e	enum:__anon1	file:
kMouseDown	driver/common.h	/^	kMouseDown,$/;"	e	enum:tMouseEventType
kMouseDrag	driver/common.h	/^	kMouseDrag \/\/ option on the mac$/;"	e	enum:tMouseEventType
kMouseUp	driver/common.h	/^	kMouseUp,$/;"	e	enum:tMouseEventType
kN	simulation/constants.h	/^	kN=0x8, kS=0x4, kE=0x2, kW=0x1, kNW=kN|kW, kNE=kN|kE, $/;"	e	enum:tDirection
kNE	simulation/constants.h	/^	kN=0x8, kS=0x4, kE=0x2, kW=0x1, kNW=kN|kW, kNE=kN|kE, $/;"	e	enum:tDirection
kNW	simulation/constants.h	/^	kN=0x8, kS=0x4, kE=0x2, kW=0x1, kNW=kN|kW, kNE=kN|kE, $/;"	e	enum:tDirection
kNoGraphNode	util/map.h	/^const int kNoGraphNode = -1;$/;"	v
kNoModifier	driver/common.h	/^	kNoModifier,$/;"	e	enum:tKeyboardModifier
kNoScaling	apps/entry_jps/ScenarioLoader.h	/^static const int kNoScaling = -1;$/;"	v
kNoScaling	apps/entry_jps_plus/ScenarioLoader.h	/^static const int kNoScaling = -1;$/;"	v
kNoScaling	extras/Experiment.h	/^static const int kNoScaling = -1;$/;"	v
kNoSplit	util/map.h	/^  kNoSplit=0,$/;"	e	enum:tSplit
kNodeBlocked	simulation/constants.h	/^  kNodeBlocked = 8, \/\/ this is a LONG label$/;"	e	enum:__anon20
kNodeWidth	simulation/constants.h	/^  kNodeWidth = 3, \/\/ the maximum size object that can completely traverse this node; this is a LONG label$/;"	e	enum:__anon20
kNone	util/map.h	/^  kNone = 0,$/;"	e	enum:tCorner
kNumAbstractedNodes	simulation/constants.h	/^  kNumAbstractedNodes = 1, \/\/ nodes that we abstract; this is a LONG label$/;"	e	enum:__anon20
kNumActions	driver/MAC/HID Support/HIDSupport.h	/^	kNumActions$/;"	e	enum:__anon15
kOctile	util/map.h	/^	kOctile,$/;"	e	enum:tMapType
kOctileCorner	util/map.h	/^	kOctileCorner,$/;"	e	enum:tMapType
kOneSecond	driver/MAC/mac_main.cpp	/^#define kOneSecond /;"	d	file:
kOutOfBounds	util/map.h	/^  kOutOfBounds =0x0, \/\/ not part of map$/;"	e	enum:tTerrain
kOutOfBounds2	util/map.h	/^  kOutOfBounds2=0x01, \/\/ not part of map - different color$/;"	e	enum:tTerrain
kParent	simulation/constants.h	/^  kParent = 2, \/\/ node that abstracts us; this is a LONG label$/;"	e	enum:__anon20
kPercentMove	driver/MAC/HID Support/HID_Config_Utilities.h	/^    kPercentMove = 10 \/\/ precent of overall range a element must move to register$/;"	e	enum:__anon9
kPercentMove	driver/MAC/HID Support/HID_Utilities_External.h	/^    kPercentMove = 10 \/\/ precent of overall range a element must move to register$/;"	e	enum:__anon14
kPoints	util/map.h	/^  kPoints$/;"	e	enum:tDisplay
kPolygons	util/map.h	/^  kPolygons,$/;"	e	enum:tDisplay
kQuiet	abstraction/graphAbstraction.cpp	/^	kQuiet = 0x00,$/;"	e	enum:__anon1	file:
kRad2Deg	driver/trackball.cpp	/^static const float kRad2Deg = 180. \/ 3.1415927;$/;"	v	file:
kRaw	util/map.h	/^	kRaw$/;"	e	enum:tMapType
kRepairGraph	abstraction/graphAbstraction.cpp	/^	kRepairGraph = 0x02,$/;"	e	enum:__anon1	file:
kRightButton	driver/common.h	/^	kRightButton,$/;"	e	enum:tButtonType
kRightEdge	util/map.h	/^  kRightEdge,$/;"	e	enum:tEdge
kRightSide	util/map.h	/^  kRightSide = 3$/;"	e	enum:tSplitSide
kS	simulation/constants.h	/^	kN=0x8, kS=0x4, kE=0x2, kW=0x1, kNW=kN|kW, kNE=kN|kE, $/;"	e	enum:tDirection
kSE	simulation/constants.h	/^	kSE=kS|kE, kSW=kS|kW, kStay=0, kTeleport=kSW|kNE$/;"	e	enum:tDirection
kSW	simulation/constants.h	/^	kSE=kS|kE, kSW=kS|kW, kStay=0, kTeleport=kSW|kNE$/;"	e	enum:tDirection
kSamples	driver/common.h	/^	kSamples = 4$/;"	e	enum:__anon7
kShiftDown	driver/common.h	/^	kShiftDown,$/;"	e	enum:tKeyboardModifier
kSokoban	util/map.h	/^	kSokoban,$/;"	e	enum:tMapType
kStay	simulation/constants.h	/^	kSE=kS|kE, kSW=kS|kW, kStay=0, kTeleport=kSW|kNE$/;"	e	enum:tDirection
kStayIndex	simulation/constants.h	/^const int kStayIndex = 8; \/\/ index of kStay$/;"	v
kSwamp	util/map.h	/^  kSwamp=0x08,$/;"	e	enum:tTerrain
kTeleport	simulation/constants.h	/^	kSE=kS|kE, kSW=kS|kW, kStay=0, kTeleport=kSW|kNE$/;"	e	enum:tDirection
kTemporaryLabel	simulation/constants.h	/^  kTemporaryLabel = 4, \/\/ for any temporary usage; this label can be LONG or FLOATING point$/;"	e	enum:__anon20
kTol	driver/trackball.cpp	/^static const float kTol = 0.001;$/;"	v	file:
kTopEdge	util/map.h	/^  kTopEdge,$/;"	e	enum:tEdge
kTopLeft	util/map.h	/^  kTopLeft = 1,$/;"	e	enum:tCorner
kTopRight	util/map.h	/^  kTopRight = 2,$/;"	e	enum:tCorner
kTrees	util/map.h	/^  kTrees=0x40,$/;"	e	enum:tTerrain
kUndefined	util/map.h	/^  kUndefined \/\/ mixed type due to split tile$/;"	e	enum:tTerrain
kUndefinedHeight	util/map.h	/^	kUndefinedHeight = -999$/;"	e	enum:__anon25
kUnitSimulationMap	simulation/unitSimulation.h	/^	kUnitSimulationMap = 0$/;"	e	enum:__anon22
kUnknownPosition	simulation/constants.h	/^const double kUnknownPosition = -50.0;$/;"	v
kUseMultiSample	driver/MAC/mac_main.cpp	/^#define kUseMultiSample /;"	d	file:
kVerboseErrors	driver/MAC/HID Support/HID_Error_Handler.cpp	/^	#define kVerboseErrors$/;"	d	file:
kW	simulation/constants.h	/^	kN=0x8, kS=0x4, kE=0x2, kW=0x1, kNW=kN|kW, kNE=kN|kE, $/;"	e	enum:tDirection
kWater	util/map.h	/^  kWater=0x02,     \/\/ water$/;"	e	enum:tTerrain
kWholeTile	util/map.h	/^  kWholeTile = 1,$/;"	e	enum:tSplitSide
kWinter	util/map.h	/^	kWinter,$/;"	e	enum:tTileset
kWinterTile	util/map.h	/^	kWinterTile,$/;"	e	enum:tTileset
kWorldObject	simulation/constants.h	/^	kDisplayOnly, kIncidentalUnit, kWorldObject$/;"	e	enum:tObjectType
kXCoordinate	simulation/constants.h	/^  kXCoordinate = 5, \/\/ cache for opengl drawing; this is a FLOATING POINT label$/;"	e	enum:__anon20
kYCoordinate	simulation/constants.h	/^  kYCoordinate = 6,	\/\/ this is a FLOATING POINT label$/;"	e	enum:__anon20
kZCoordinate	simulation/constants.h	/^  kZCoordinate = 7,	\/\/ this is a FLOATING POINT label$/;"	e	enum:__anon20
keepHistory	simulation/unitSimulation.h	/^	bool keepHistory; \/\/ keep action history$/;"	m	class:unitSimulation
key	util/graph.h	/^  unsigned int key; \/\/ for use by a data structure to maintain a reverse-lookup$/;"	m	class:graph_object
keyLabel	util/graph.h	/^  int keyLabel;$/;"	m	class:node
keyPressed	driver/main.cpp	/^void keyPressed(unsigned char key, int x, int y)$/;"	f
keyboardCallback	driver/common.h	/^typedef void (*keyboardCallback)(unitSimulation *,tKeyboardModifier,char);$/;"	t
keyboardCallbackData	driver/common.h	/^	keyboardCallbackData(keyboardCallback kc, const char *_title, const char *_desc,$/;"	f	class:keyboardCallbackData
keyboardCallbackData	driver/common.h	/^class keyboardCallbackData {$/;"	c
keyboardCallbacks	driver/common.cpp	/^static keyboardCallbackData *keyboardCallbacks[256] = $/;"	v	file:
kiShock2ID	driver/MAC/HID Support/HID_Name_Lookup.h	/^	#define kiShock2ID /;"	d
kiShockID	driver/MAC/HID Support/HID_Name_Lookup.h	/^	#define kiShockID /;"	d
l	apps/entry_jps/Timer.h	/^		struct { uint32_t l, h; } c4;$/;"	m	struct:Timer::CycleCounter::__anon2::__anon3
l	apps/entry_jps_plus/Timer.h	/^		struct { uint32_t l, h; } c4;$/;"	m	struct:Timer::CycleCounter::__anon4::__anon5
l	extras/timer.h	/^		struct { uint32_t l, h; } c4;$/;"	m	struct:Timer::CycleCounter::__anon17::__anon18
label	util/graph.h	/^	std::vector<labelValue> label;$/;"	m	class:edge
label	util/graph.h	/^  std::vector<labelValue> label;$/;"	m	class:node
labelValue	util/graph.h	/^typedef union { double fval; long lval; } labelValue;$/;"	t	typeref:union:__anon23
label_n	jump/JumpPointExpansionPolicy.cpp	/^JumpPointExpansionPolicy::label_n()$/;"	f	class:JumpPointExpansionPolicy
label_n	jump/RecursiveJumpPointExpansionPolicy.cpp	/^RecursiveJumpPointExpansionPolicy::label_n()$/;"	f	class:RecursiveJumpPointExpansionPolicy
label_n	policies/IncidentEdgesExpansionPolicy.cpp	/^IncidentEdgesExpansionPolicy::label_n()$/;"	f	class:IncidentEdgesExpansionPolicy
label_n	policies/TileExpansionPolicy.cpp	/^void TileExpansionPolicy::label_n()$/;"	f	class:TileExpansionPolicy
land	util/map.h	/^  Tile **land;$/;"	m	class:Map
lastIndex	simulation/unit.h	/^		int lastIndex;$/;"	m	class:rhrUnit
lastIndex	simulation/unit.h	/^	int lastIndex;$/;"	m	class:billiardBallUnit
lastIndex	simulation/unit.h	/^	int lastIndex;$/;"	m	class:randomUnit
lastMove	simulation/unitSimulation.h	/^	tDirection lastMove;$/;"	m	class:unitInfo
length	util/path.cpp	/^unsigned path::length()$/;"	f	class:path
lengths	apps/entry_jps/main.cpp	/^	std::vector<int> lengths;$/;"	m	struct:stats	file:
lengths	apps/entry_jps_plus/main.cpp	/^	std::vector<int> lengths;$/;"	m	struct:stats	file:
lessThan	util/altheap.cpp	/^altheap::lessThan(graph_object* first, graph_object* second)$/;"	f	class:altheap
lessThan	util/heap.cpp	/^bool heap::lessThan(graph_object* first, graph_object* second)$/;"	f	class:heap
levelDraw	abstraction/mapAbstraction.h	/^	unsigned long levelDraw;$/;"	m	class:mapAbstraction
lighting	driver/common.h	/^	long lighting;$/;"	m	struct:recContext
lines	driver/common.h	/^	bool lines;$/;"	m	struct:recContext
load	util/map.cpp	/^void Map::load(FILE *f)$/;"	f	class:Map
load	util/map.cpp	/^void Map::load(const char *filename)$/;"	f	class:Map
loadGPPC	util/map.cpp	/^void Map::loadGPPC(std::vector<bool>& mapData)$/;"	f	class:Map
loadHistory	simulation/unitSimulation.cpp	/^bool unitSimulation::loadHistory(char *fname)$/;"	f	class:unitSimulation
loadOctile	util/map.cpp	/^void Map::loadOctile(FILE *f, int high, int wide)$/;"	f	class:Map
loadOctileCorner	util/map.cpp	/^void Map::loadOctileCorner(FILE *f, int high, int wide)$/;"	f	class:Map
loadPath	driver/MAC/mac_main.cpp	/^void loadPath(char *path)$/;"	f
loadRaw	util/map.cpp	/^void Map::loadRaw(FILE *f, int high, int wide)$/;"	f	class:Map
loadScenarioFile	extras/ScenarioManager.cpp	/^ScenarioManager::loadScenarioFile(const char* filelocation)$/;"	f	class:ScenarioManager
loadV1ScenarioFile	extras/ScenarioManager.cpp	/^ScenarioManager::loadV1ScenarioFile(std::ifstream& infile)$/;"	f	class:ScenarioManager
loadV3ScenarioFile	extras/ScenarioManager.cpp	/^ScenarioManager::loadV3ScenarioFile(std::ifstream& infile)$/;"	f	class:ScenarioManager
locID	driver/MAC/HID Support/HID_Config_Utilities.h	/^    long locID;$/;"	m	struct:recSaveHID
locID	driver/MAC/HID Support/HID_Utilities.h	/^    long locID;								\/\/ long representing location in USB (or other I\/O) chain which device is pluged into, can identify specific device on machine$/;"	m	struct:recDevice
locID	driver/MAC/HID Support/HID_Utilities_External.h	/^    long locID;								\/\/ long representing location in USB (or other I\/O) chain which device is pluged into, can identify specific device on machine$/;"	m	struct:recDevice
locID	driver/MAC/HID Support/HID_Utilities_External.h	/^    long locID;$/;"	m	struct:recSaveHID
lockstepTime	simulation/unitSimulation.h	/^	bool lockstepTime;      \/\/ Finn\/Wes - individual unit times will be update exactly according to the amount specified to advanceTime$/;"	m	class:unitSimulation
logFinalStats	shared/searchAlgorithm.cpp	/^void searchAlgorithm::logFinalStats(statCollection* stats)$/;"	f	class:searchAlgorithm
logFinalStats	shared/searchUnit.cpp	/^void searchUnit::logFinalStats(statCollection *stats)$/;"	f	class:searchUnit
logFinalStats	simulation/unit.h	/^	virtual void logFinalStats(statCollection *) {}$/;"	f	class:unit
logFinalStats	simulation/unitGroup.h	/^	virtual void logFinalStats(statCollection *) {}$/;"	f	class:unitGroup
logStats	shared/searchUnit.cpp	/^void searchUnit::logStats(statCollection *stats)$/;"	f	class:searchUnit
logStats	simulation/unit.cpp	/^void unit::logStats(statCollection *)$/;"	f	class:unit
logStats	simulation/unitGroup.cpp	/^void unitGroup::logStats(statCollection *)$/;"	f	class:unitGroup
longStored	util/statCollection.h	/^enum storedType { floatStored, longStored };$/;"	e	enum:storedType
lookupCategory	util/statCollection.cpp	/^int statCollection::lookupCategory(const char *category) const$/;"	f	class:statCollection
lookupCategoryID	util/statCollection.cpp	/^const char *statCollection::lookupCategoryID(int id) const$/;"	f	class:statCollection
lookupOwner	util/statCollection.cpp	/^int statCollection::lookupOwner(const char *owner) const$/;"	f	class:statCollection
lookupOwnerID	util/statCollection.cpp	/^const char *statCollection::lookupOwnerID(int id) const$/;"	f	class:statCollection
lookupStat	util/statCollection.cpp	/^bool statCollection::lookupStat(const char *category, const char *owner, statValue &v) const$/;"	f	class:statCollection
lookupStat	util/statCollection.cpp	/^bool statCollection::lookupStat(unsigned int index, statValue &v) const$/;"	f	class:statCollection
lval	util/graph.h	/^typedef union { double fval; long lval; } labelValue;$/;"	m	union:__anon23
lval	util/statCollection.h	/^typedef union { double fval; long lval; } statValue;$/;"	m	union:__anon26
m	abstraction/mapAbstraction.h	/^	Map *m;$/;"	m	class:mapAbstraction
m	util/mapOverlay.h	/^	Map *m;$/;"	m	class:MapOverlay
mC	driver/common.h	/^	mouseCallback mC;$/;"	m	class:mouseCallbackData
main	apps/entry_jps/main.cpp	/^int main(int argc, char **argv)$/;"	f
main	apps/entry_jps_plus/main.cpp	/^int main(int argc, char **argv)$/;"	f
main	driver/MAC/mac_main.cpp	/^int main(int argc, char* argv[])$/;"	f
main	driver/main.cpp	/^int main(int argc, char** argv)$/;"	f
makeJumpPointGraph	jump/JumpPointAbstraction.cpp	/^JumpPointAbstraction::makeJumpPointGraph()$/;"	f	class:JumpPointAbstraction
makeMapNodes	abstraction/mapAbstraction.cpp	/^graph* makeMapNodes(Map* m, INodeFactory* nf)$/;"	f
makeMaze	util/map.cpp	/^void makeMaze(Map *map, int pathSize)$/;"	f
makeMove	shared/searchUnit.cpp	/^tDirection searchUnit::makeMove(mapProvider *mp, reservationProvider *rp, simulationInfo *simInfo)$/;"	f	class:searchUnit
makeMove	simulation/unit.cpp	/^tDirection billiardBallUnit::makeMove(mapProvider *, reservationProvider *, simulationInfo *)$/;"	f	class:billiardBallUnit
makeMove	simulation/unit.cpp	/^tDirection randomUnit::makeMove(mapProvider *, reservationProvider *, simulationInfo *)$/;"	f	class:randomUnit
makeMove	simulation/unit.cpp	/^tDirection rhrUnit::makeMove(mapProvider *, reservationProvider *, simulationInfo *)$/;"	f	class:rhrUnit
makeMove	simulation/unit.cpp	/^tDirection teleportUnit::makeMove(mapProvider *mp, reservationProvider *, simulationInfo *)$/;"	f	class:teleportUnit
makeMove	simulation/unit.cpp	/^tDirection unit::makeMove(mapProvider *, reservationProvider *, simulationInfo *)$/;"	f	class:unit
makeMove	simulation/unit.h	/^	tDirection makeMove(mapProvider *, reservationProvider *, simulationInfo *)$/;"	f	class:randomerUnit
makeMove	simulation/unitGroup.cpp	/^tDirection unitGroup::makeMove(unit *u, mapProvider *mp, reservationProvider *rp, simulationInfo *simInfo)$/;"	f	class:unitGroup
manufacturer	driver/MAC/HID Support/HID_Utilities.h	/^    Str255 manufacturer;					\/\/ name of manufacturer$/;"	m	struct:recDevice
manufacturer	driver/MAC/HID Support/HID_Utilities_External.h	/^    char manufacturer[256];					\/\/ name of manufacturer$/;"	m	struct:recDevice
map	apps/entry_jps/ScenarioLoader.h	/^	string map;$/;"	m	class:Experiment
map	apps/entry_jps_plus/ScenarioLoader.h	/^	string map;$/;"	m	class:Experiment
map	extras/Experiment.h	/^		string map;$/;"	m	class:Experiment
map	jump/JumpPointLocator.h	/^		mapAbstraction* map;$/;"	m	class:JumpPointLocator
map	jump/JumpPointRefinementPolicy.h	/^		mapAbstraction* map;$/;"	m	class:JumpPointRefinementPolicy
map	jump/JumpPointSearch.h	/^		mapAbstraction* map;$/;"	m	class:JumpPointSearch
map	policies/IncidentEdgesExpansionPolicy.h	/^		graphAbstraction* map;$/;"	m	class:IncidentEdgesExpansionPolicy
map	policies/IncidentEdgesPolicyFactory.h	/^		graphAbstraction* map;$/;"	m	class:IncidentEdgesPolicyFactory
map	policies/OctileDistanceRefinementPolicy.h	/^		mapAbstraction* map;$/;"	m	class:OctileDistanceRefinementPolicy
map	shared/aStar3.h	/^	graphAbstraction *map;$/;"	m	class:aStarOld
map	simulation/unitSimulation.h	/^	Map *map;$/;"	m	class:unitSimulation
map	util/DebugUtility.h	/^		graphAbstraction* map;$/;"	m	class:DebugUtility
map	util/HogConfig.h	/^		char* map; \/\/ map filename$/;"	m	class:HogConfig
map	util/ProblemInstance.h	/^		mapAbstraction* map;$/;"	m	class:ProblemInstance
map	util/SearchEnvironment.h	/^	Map *map;$/;"	m	class:MapSearchEnvironment
mapAbstraction	abstraction/mapAbstraction.h	/^	mapAbstraction(Map *_m) :m(_m), levelDraw(0) {}$/;"	f	class:mapAbstraction
mapAbstraction	abstraction/mapAbstraction.h	/^class mapAbstraction : public graphAbstraction {$/;"	c
mapFlatAbstraction	abstraction/mapFlatAbstraction.cpp	/^mapFlatAbstraction::mapFlatAbstraction(Map *_m, bool allowDiagonals, bool cutCorners)$/;"	f	class:mapFlatAbstraction
mapFlatAbstraction	abstraction/mapFlatAbstraction.h	/^class mapFlatAbstraction : public mapAbstraction {$/;"	c
mapProvider	abstraction/mapProvider.h	/^class mapProvider {$/;"	c
mapQuadTreeAbstraction	abstraction/mapQuadTreeAbstraction.cpp	/^mapQuadTreeAbstraction::mapQuadTreeAbstraction(Map *_m, int _sectorSize)$/;"	f	class:mapQuadTreeAbstraction
mapQuadTreeAbstraction	abstraction/mapQuadTreeAbstraction.h	/^class mapQuadTreeAbstraction : public mapAbstraction {$/;"	c
mapType	util/map.h	/^	tMapType mapType;$/;"	m	class:Map
mapUpdated	simulation/unit.cpp	/^bool unit::mapUpdated(mapAbstraction *aMap)$/;"	f	class:unit
map_height	simulation/unitSimulation.h	/^	int map_width, map_height, map_revision;$/;"	m	class:unitSimulation
map_name	util/map.h	/^	char map_name[128];$/;"	m	class:Map
map_revision	simulation/unit.h	/^	int map_revision;$/;"	m	class:unit
map_revision	simulation/unitSimulation.h	/^	int map_width, map_height, map_revision;$/;"	m	class:unitSimulation
map_width	simulation/unitSimulation.h	/^	int map_width, map_height, map_revision;$/;"	m	class:unitSimulation
mark	util/graph.h	/^	bool mark;$/;"	m	class:edge
markEdge	util/graph.h	/^  void markEdge(edge *e) { markedEdge = e; }$/;"	f	class:node
markForVis	shared/FlexibleAStar.h	/^		bool markForVis;	$/;"	m	class:FlexibleAStar
markedEdge	util/graph.h	/^  edge *markedEdge;$/;"	m	class:node
max	driver/MAC/HID Support/HID_Utilities.h	/^    long max;								\/\/ reported max value possible$/;"	m	struct:recElement
max	driver/MAC/HID Support/HID_Utilities_External.h	/^    long max;								\/\/ reported max value possible$/;"	m	struct:recElement
max	policies/GridMapExpansionPolicy.h	/^		int max; \/\/ maximum degree of a grid node$/;"	m	class:GridMapExpansionPolicy
max	shared/aStar.cpp	/^inline double max(double a, double b)$/;"	f
max	util/statUtil.cpp	/^inline double max(double a, double b)$/;"	f
max3DTextureSize	driver/MAC/macGlCheck.h	/^  long max3DTextureSize; \/\/ maximum 3D texture size supported$/;"	m	struct:__anon16
maxCubeMapTextureSize	driver/MAC/macGlCheck.h	/^  long maxCubeMapTextureSize; \/\/ maximum cube map texture size supported$/;"	m	struct:__anon16
maxRectTextureSize	driver/MAC/macGlCheck.h	/^  long maxRectTextureSize; \/\/ maximum rectangular texture size supported$/;"	m	struct:__anon16
maxReport	driver/MAC/HID Support/HID_Config_Utilities.h	/^    long maxReport; 						\/\/ max returned value (calibrate call)$/;"	m	struct:recSaveHID
maxReport	driver/MAC/HID Support/HID_Utilities.h	/^    long maxReport; 						\/\/ max returned value (calibrate call)$/;"	m	struct:recElement
maxReport	driver/MAC/HID Support/HID_Utilities_External.h	/^	long maxReport;$/;"	m	struct:recSaveHID
maxReport	driver/MAC/HID Support/HID_Utilities_External.h	/^    long maxReport; 						\/\/ max returned value (calibrate call)$/;"	m	struct:recElement
maxStatEntries	util/statUtil.cpp	/^double maxStatEntries(statCollection *stats, const char *category, const char *owner)$/;"	f
maxTextureSize	driver/MAC/macGlCheck.h	/^  long maxTextureSize; \/\/ maximum 1D and 2D texture size supported$/;"	m	struct:__anon16
maxVal	util/mapOverlay.h	/^	double maxVal, minVal;$/;"	m	class:MapOverlay
maxdepth	jump/JumpPointRefinementPolicy.h	/^		int maxdepth;$/;"	m	class:JumpPointRefinementPolicy
maxdepth	jump/JumpPointSearch.h	/^		unsigned int maxdepth;$/;"	m	class:JumpPointSearch
measureAbstractionValues	abstraction/graphAbstraction.cpp	/^void graphAbstraction::measureAbstractionValues(int level, double &n, double &n_dev, double &c, double &c_dev)$/;"	f	class:graphAbstraction
measureAverageNodeWidth	abstraction/graphAbstraction.cpp	/^double graphAbstraction::measureAverageNodeWidth(int level)$/;"	f	class:graphAbstraction
measureAverageRatio	util/statUtil.cpp	/^void measureAverageRatio(statCollection *stats)$/;"	f
measureExpectedNodeWidth	abstraction/graphAbstraction.cpp	/^double graphAbstraction::measureExpectedNodeWidth(node *n)$/;"	f	class:graphAbstraction
measureRepairHits	abstraction/graphAbstraction.h	/^	virtual int measureRepairHits() { return 0; }$/;"	f	class:graphAbstraction
merge	util/bitVector.cpp	/^void bitVector::merge(bitVector *bv)$/;"	f	class:bitVector
message	driver/common.h	/^	char message[256]; \/\/ buffer for message output$/;"	m	struct:recContext
min	driver/MAC/HID Support/HID_Utilities.h	/^    long min;								\/\/ reported min value possible$/;"	m	struct:recElement
min	driver/MAC/HID Support/HID_Utilities_External.h	/^    long min;								\/\/ reported min value possible$/;"	m	struct:recElement
minReport	driver/MAC/HID Support/HID_Config_Utilities.h	/^    long minReport; 						\/\/ min returned value$/;"	m	struct:recSaveHID
minReport	driver/MAC/HID Support/HID_Utilities.h	/^    long minReport; 						\/\/ min returned value$/;"	m	struct:recElement
minReport	driver/MAC/HID Support/HID_Utilities_External.h	/^	long minReport;$/;"	m	struct:recSaveHID
minReport	driver/MAC/HID Support/HID_Utilities_External.h	/^    long minReport; 						\/\/ min returned value$/;"	m	struct:recElement
minVal	util/mapOverlay.h	/^	double maxVal, minVal;$/;"	m	class:MapOverlay
minheap	util/heap.h	/^  bool minheap;$/;"	m	class:heap
mod	driver/common.h	/^	tKeyboardModifier mod;$/;"	m	class:keyboardCallbackData
modeFSAA	driver/common.h	/^	long modeFSAA;$/;"	m	struct:recContext
mouseCallback	driver/common.h	/^typedef bool (*mouseCallback)(unitSimulation *, int x, int y, point3d loc, tButtonType, tMouseEventType);$/;"	t
mouseCallbackData	driver/common.h	/^	mouseCallbackData(mouseCallback _mC)$/;"	f	class:mouseCallbackData
mouseCallbackData	driver/common.h	/^class mouseCallbackData {$/;"	c
mouseCallbacks	driver/common.cpp	/^static std::vector<mouseCallbackData *> mouseCallbacks;$/;"	v	file:
mouseDolly	driver/MAC/mac_main.cpp	/^static void mouseDolly (HIPoint location, pRecContext pContextInfo)$/;"	f	file:
mouseDolly	driver/main.cpp	/^static void mouseDolly (int x, int y, pRecContext pContextInfo)$/;"	f	file:
mouseMovedButton	driver/main.cpp	/^void mouseMovedButton(int x, int y)$/;"	f
mousePan	driver/MAC/mac_main.cpp	/^static void mousePan (HIPoint location, pRecContext pContextInfo)$/;"	f	file:
mousePan	driver/main.cpp	/^static void mousePan (int x, int y, pRecContext pContextInfo)$/;"	f	file:
mousePressedButton	driver/main.cpp	/^void mousePressedButton(int button, int state, int x, int y)$/;"	f
moveDist	simulation/unitSimulation.h	/^	double thinkTime, moveDist;$/;"	m	class:unitInfo
moveQ	simulation/unitSimulation.h	/^	std::priority_queue<const unitInfo*, std::vector<unitInfo *>, unitInfoCompare> moveQ;$/;"	m	class:unitSimulation
moves	shared/searchUnit.h	/^	std::vector<tDirection> moves;$/;"	m	class:searchUnit
movieFrame	driver/MAC/mac_main.cpp	/^	movieFrame(char *im, int w, int h, double dur)$/;"	f	class:movieFrame
movieFrame	driver/MAC/mac_main.cpp	/^class movieFrame {$/;"	c	file:
movieMedia	driver/MAC/mac_main.cpp	/^Media movieMedia = NULL;$/;"	v
msgTime	driver/common.h	/^	float msgTime; \/\/ message posting time for expiration$/;"	m	struct:recContext
myColor	driver/TextBox.h	/^	recColor myColor;$/;"	m	class:TextBox
myTextBox	driver/main.cpp	/^TextBox *myTextBox = 0;$/;"	v
myUnits	simulation/unitGroup.h	/^	std::vector<unit *> myUnits;$/;"	m	class:unitGroup
n	jump/JumpPointExpansionPolicy.cpp	/^JumpPointExpansionPolicy::n()$/;"	f	class:JumpPointExpansionPolicy
n	jump/RecursiveJumpPointExpansionPolicy.cpp	/^RecursiveJumpPointExpansionPolicy::n()$/;"	f	class:RecursiveJumpPointExpansionPolicy
n	policies/OctileExpansionPolicy.cpp	/^node* OctileExpansionPolicy::n()$/;"	f	class:OctileExpansionPolicy
n	policies/SelectiveExpansionPolicy.cpp	/^node* SelectiveExpansionPolicy::n()$/;"	f	class:SelectiveExpansionPolicy
n	policies/TileExpansionPolicy.cpp	/^node* TileExpansionPolicy::n()$/;"	f	class:TileExpansionPolicy
n	util/path.h	/^  node *n;$/;"	m	class:path
n_impl	policies/IncidentEdgesExpansionPolicy.cpp	/^IncidentEdgesExpansionPolicy::n_impl()$/;"	f	class:IncidentEdgesExpansionPolicy
name	driver/MAC/HID Support/HID_Utilities.h	/^    Str255 name;							\/\/ name of element (not used often)$/;"	m	struct:recElement
name	driver/MAC/HID Support/HID_Utilities_External.h	/^    char name[256];							\/\/ name of element (c string)$/;"	m	struct:recElement
name	jump/JumpPointSearch.h	/^		std::string name;$/;"	m	class:JumpPointSearch
name	util/graph.h	/^  char name[30];$/;"	m	class:node
names	driver/common.h	/^	char * names;$/;"	m	struct:recContext
neighbor_iterator	util/graph.h	/^typedef unsigned int neighbor_iterator;$/;"	t
neighbourIndex	jump/JumpPointExpansionPolicy.h	/^		unsigned int neighbourIndex; $/;"	m	class:JumpPointExpansionPolicy
neighbourIndex	jump/RecursiveJumpPointExpansionPolicy.h	/^		unsigned int neighbourIndex; \/\/ index of the neighbour returned by ::n()$/;"	m	class:RecursiveJumpPointExpansionPolicy
neighbours	jump/JumpPointExpansionPolicy.h	/^		std::vector<node*> neighbours;$/;"	m	class:JumpPointExpansionPolicy
neighbours	jump/RecursiveJumpPointExpansionPolicy.h	/^		std::vector<JumpInfo*> neighbours; \/\/ jump point successors for ::target$/;"	m	class:RecursiveJumpPointExpansionPolicy
newEdge	util/EdgeFactory.cpp	/^edge* EdgeFactory::newEdge(unsigned int fromId, unsigned int toId, double weight)$/;"	f	class:EdgeFactory
newExpansionPolicy	policies/IncidentEdgesPolicyFactory.cpp	/^ExpansionPolicy* IncidentEdgesPolicyFactory::newExpansionPolicy()$/;"	f	class:IncidentEdgesPolicyFactory
newHeuristic	heuristics/ManhattanHeuristicFactory.cpp	/^Heuristic* ManhattanHeuristicFactory::newHeuristic()$/;"	f	class:ManhattanHeuristicFactory
newHeuristic	heuristics/OctileHeuristicFactory.cpp	/^Heuristic* OctileHeuristicFactory::newHeuristic()$/;"	f	class:OctileHeuristicFactory
newNode	util/NodeFactory.cpp	/^node* NodeFactory::newNode(const char* name) throw(std::invalid_argument)$/;"	f	class:NodeFactory
newNode	util/NodeFactory.cpp	/^node* NodeFactory::newNode(const node* _n) throw(std::invalid_argument)$/;"	f	class:NodeFactory
newSearchAlgorithm	shared/FlexibleAStarFactory.cpp	/^searchAlgorithm* FlexibleAStarFactory::newSearchAlgorithm()$/;"	f	class:FlexibleAStarFactory
next	driver/common.h	/^	keyboardCallbackData *next;$/;"	m	class:keyboardCallbackData
next	jump/JumpPointExpansionPolicy.cpp	/^JumpPointExpansionPolicy::next()$/;"	f	class:JumpPointExpansionPolicy
next	jump/RecursiveJumpPointExpansionPolicy.cpp	/^RecursiveJumpPointExpansionPolicy::next()$/;"	f	class:RecursiveJumpPointExpansionPolicy
next	policies/GridMapExpansionPolicy.cpp	/^node* GridMapExpansionPolicy::next()$/;"	f	class:GridMapExpansionPolicy
next	policies/SelectiveExpansionPolicy.cpp	/^node* SelectiveExpansionPolicy::next()$/;"	f	class:SelectiveExpansionPolicy
next	util/path.h	/^  path *next;$/;"	m	class:path
nextBound	util/GenericIDAStar.h	/^	double nextBound;$/;"	m	class:GenericIDAStar
nextExperiment	simulation/unitSimulation.h	/^	void (*nextExperiment) (unitSimulation*);$/;"	m	class:unitSimulation
nextStep	policies/OctileDistanceRefinementPolicy.cpp	/^OctileDistanceRefinementPolicy::nextStep(node* first, node* last)$/;"	f	class:OctileDistanceRefinementPolicy
nextTime	simulation/unitSimulation.h	/^	double nextTime;$/;"	m	class:unitInfo
next_impl	policies/IncidentEdgesExpansionPolicy.cpp	/^IncidentEdgesExpansionPolicy::next_impl()$/;"	f	class:IncidentEdgesExpansionPolicy
nf	jump/JumpPointAbstraction.h	/^		INodeFactory* nf;$/;"	m	class:JumpPointAbstraction
nibRef	driver/MAC/mac_main.cpp	/^IBNibRef nibRef = NULL;$/;"	v
noOpenGLDraw	simulation/unitSimulation.h	/^	bool noOpenGLDraw;		\/\/ turns display on\/off$/;"	m	class:unitSimulation
node	util/graph.cpp	/^node::node(const char *n)$/;"	f	class:node
node	util/graph.cpp	/^node::node(const node* n)$/;"	f	class:node
node	util/graph.h	/^class node : public graph_object {$/;"	c
node	util/map.h	/^  long node;$/;"	m	class:halfTile
nodeInCorridor	shared/aStar.cpp	/^bool aStar::nodeInCorridor(node *n)$/;"	f	class:aStar
nodeIterNext	util/graph.cpp	/^node *graph::nodeIterNext(node_iterator &node_iter) const$/;"	f	class:graph
nodeNeighborNext	util/graph.cpp	/^int node::nodeNeighborNext(neighbor_iterator& ni) const$/;"	f	class:node
nodeNum	util/graph.h	/^  unsigned int nodeNum;\/\/, label[MAXLABELS];$/;"	m	class:node
nodeOccupied	simulation/unitSimulation.h	/^	inline bool nodeOccupied(node *currNode)$/;"	f	class:unitSimulation
nodeTable	util/GenericIDAStar.h	/^	NodeHashTable nodeTable;$/;"	m	class:GenericIDAStar
node_iterator	util/graph.h	/^typedef std::vector<node *>::const_iterator node_iterator;$/;"	t
nodecount	jump/JumpInfo.h	/^		inline unsigned int nodecount() $/;"	f	class:JumpInfo
nodesExpanded	policies/InsertionPolicy.h	/^		long nodesExpanded;$/;"	m	class:InsertionPolicy
nodesExpanded	policies/RefinementPolicy.h	/^		long nodesExpanded;$/;"	m	class:RefinementPolicy
nodesExpanded	shared/searchAlgorithm.h	/^	long nodesExpanded;$/;"	m	class:searchAlgorithm
nodesExpanded	shared/searchUnit.h	/^	int nodesExpanded;$/;"	m	class:searchUnit
nodesExpanded	util/GenericIDAStar.h	/^	unsigned long nodesExpanded, nodesTouched;$/;"	m	class:GenericIDAStar
nodesGenerated	policies/InsertionPolicy.h	/^		long nodesGenerated;$/;"	m	class:InsertionPolicy
nodesGenerated	policies/RefinementPolicy.h	/^		long nodesGenerated;$/;"	m	class:RefinementPolicy
nodesGenerated	shared/searchAlgorithm.h	/^	long nodesGenerated;$/;"	m	class:searchAlgorithm
nodesTouched	policies/InsertionPolicy.h	/^		long nodesTouched;$/;"	m	class:InsertionPolicy
nodesTouched	policies/RefinementPolicy.h	/^		long nodesTouched;$/;"	m	class:RefinementPolicy
nodesTouched	shared/searchAlgorithm.h	/^	long nodesTouched;$/;"	m	class:searchAlgorithm
nodesTouched	shared/searchUnit.h	/^	int nodesTouched;$/;"	m	class:searchUnit
nodesTouched	util/GenericIDAStar.h	/^	unsigned long nodesExpanded, nodesTouched;$/;"	m	class:GenericIDAStar
nonLinear	driver/MAC/HID Support/HID_Utilities.h	/^    Boolean nonLinear;						\/\/ are the values reported non-linear relative to element movement$/;"	m	struct:recElement
nonLinear	driver/MAC/HID Support/HID_Utilities_External.h	/^    unsigned char nonLinear;						\/\/ are the values reported non-linear relative to element movement$/;"	m	struct:recElement
normalise	util/glUtil.cpp	/^void recVec::normalise()$/;"	f	class:recVec
nullState	driver/MAC/HID Support/HID_Utilities.h	/^    Boolean nullState;						\/\/ does element have null state$/;"	m	struct:recElement
nullState	driver/MAC/HID Support/HID_Utilities_External.h	/^    unsigned char nullState;						\/\/ does element have null state$/;"	m	struct:recElement
numActions	simulation/constants.h	/^const int numActions = 10;$/;"	v
numPrimitiveActions	simulation/constants.h	/^const int numPrimitiveActions = 8;$/;"	v
objectRotation	driver/common.h	/^	GLfloat objectRotation [4];$/;"	m	struct:recContext
octileDistance	abstraction/mapAbstraction.cpp	/^double mapAbstraction::octileDistance(double x1, double y1, double x2, double y2)$/;"	f	class:mapAbstraction
offsetDisplayTime	simulation/unitSimulation.cpp	/^void unitSimulation::offsetDisplayTime(double val)$/;"	f	class:unitSimulation
onTarget	shared/searchUnit.h	/^	bool onTarget;$/;"	m	class:searchUnit
online	jump/JumpPointSearch.h	/^		bool online;$/;"	m	class:JumpPointSearch
openGLDraw	abstraction/mapAbstraction.cpp	/^void mapAbstraction::openGLDraw()$/;"	f	class:mapAbstraction
openGLDraw	shared/searchUnit.cpp	/^void searchUnit::openGLDraw(mapProvider *mp, simulationInfo *si)$/;"	f	class:searchUnit
openGLDraw	simulation/unit.cpp	/^void unit::openGLDraw(mapProvider *mp, simulationInfo *)$/;"	f	class:unit
openGLDraw	simulation/unitGroup.cpp	/^void unitGroup::openGLDraw(mapProvider *mp, simulationInfo *)$/;"	f	class:unitGroup
openGLDraw	simulation/unitSimulation.cpp	/^void unitSimulation::openGLDraw()$/;"	f	class:unitSimulation
openGLDraw	util/map.cpp	/^void Map::openGLDraw(tDisplay how)$/;"	f	class:Map
openGLDraw	util/mapOverlay.cpp	/^void MapOverlay::openGLDraw()$/;"	f	class:MapOverlay
openList	shared/aStar.h	/^	AStar3Util::NodeLookupTable openList, closedList;$/;"	m	class:aStar
openNewMap	driver/MAC/mac_main.cpp	/^void openNewMap()$/;"	f
openQueue	shared/aStar.h	/^	AStar3Util::PQueue openQueue;$/;"	m	class:aStar
openSimHistory	driver/MAC/mac_main.cpp	/^void openSimHistory()$/;"	f
operator ()	shared/aStar.h	/^		bool operator()(const SearchNode &i1, const SearchNode &i2)$/;"	f	struct:AStar3Util::SearchNodeCompare
operator ()	shared/aStar.h	/^		bool operator()(const SearchNode &i1, const SearchNode &i2)$/;"	f	struct:AStar3Util::SearchNodeEqual
operator ()	shared/aStar.h	/^		bool operator()(const node *i1, const node *i2)$/;"	f	struct:AStar3Util::NodeEqual
operator ()	shared/aStar.h	/^		size_t operator()(const SearchNode &x) const$/;"	f	struct:AStar3Util::SearchNodeHash
operator ()	shared/aStar.h	/^		size_t operator()(const node *x) const$/;"	f	struct:AStar3Util::NodeHash
operator ()	simulation/unitSimulation.cpp	/^bool unitInfoCompare::operator()(const unitInfo* u1, const unitInfo* u2)$/;"	f	class:unitInfoCompare
operator <<	util/graph.cpp	/^ostream& operator <<(ostream & out, const edge &_Edge)$/;"	f
operator <<	util/graph.cpp	/^ostream& operator <<(ostream & out, const graph &_Graph)$/;"	f
operator <<	util/graph.cpp	/^ostream& operator <<(ostream & out, const graph_object &_Obj)$/;"	f
operator <<	util/graph.cpp	/^ostream& operator <<(ostream & out, const node &_Node)$/;"	f
origin	driver/main.h	/^   CGPoint origin;$/;"	m	struct:CGRect
outputs	driver/MAC/HID Support/HID_Utilities.h	/^	long outputs;							\/\/ number of elements of type kIOHIDElementTypeOutput$/;"	m	struct:recDevice
outputs	driver/MAC/HID Support/HID_Utilities_External.h	/^	long outputs;							\/\/ number of elements of type kIOHIDElementTypeOutput$/;"	m	struct:recDevice
owner	util/statCollection.h	/^	int category, owner;$/;"	m	class:stat
owners	util/statCollection.h	/^	std::vector<const char *> owners;$/;"	m	class:statCollection
pActionRec	driver/MAC/HID Support/HIDSupport.h	/^typedef actionRec * pActionRec;$/;"	t
pChild	driver/MAC/HID Support/HID_Utilities.h	/^    struct recElement * pChild;				\/\/ next child (only of collections)$/;"	m	struct:recElement	typeref:struct:recElement::recElement
pChild	driver/MAC/HID Support/HID_Utilities_External.h	/^    struct recElement * pChild;				\/\/ next child (only of collections)$/;"	m	struct:recElement	typeref:struct:recElement::recElement
pDevice	driver/MAC/HID Support/HIDSupport.h	/^    pRecDevice pDevice;$/;"	m	struct:actionRec
pElement	driver/MAC/HID Support/HIDSupport.h	/^    pRecElement pElement;$/;"	m	struct:actionRec
pListElements	driver/MAC/HID Support/HID_Utilities.h	/^    recElement* pListElements; 				\/\/ head of linked list of elements $/;"	m	struct:recDevice
pListElements	driver/MAC/HID Support/HID_Utilities_External.h	/^    recElement* pListElements; 				\/\/ head of linked list of elements $/;"	m	struct:recDevice
pNext	driver/MAC/HID Support/HID_Utilities.h	/^    struct recDevice* pNext; 				\/\/ next device$/;"	m	struct:recDevice	typeref:struct:recDevice::recDevice
pNext	driver/MAC/HID Support/HID_Utilities_External.h	/^    struct recDevice* pNext; 				\/\/ next device$/;"	m	struct:recDevice	typeref:struct:recDevice::recDevice
pPrevious	driver/MAC/HID Support/HID_Utilities.h	/^	struct recElement * pPrevious;			\/\/ previous element (NULL at list head)$/;"	m	struct:recElement	typeref:struct:recElement::recElement
pPrevious	driver/MAC/HID Support/HID_Utilities_External.h	/^	struct recElement * pPrevious;			\/\/ previous element (NULL at list head)$/;"	m	struct:recElement	typeref:struct:recElement::recElement
pRecContext	driver/common.h	/^typedef struct recContext * pRecContext;$/;"	t	typeref:struct:recContext
pRecDevice	driver/MAC/HID Support/HID_Utilities.h	/^typedef recDevice* pRecDevice;$/;"	t
pRecDevice	driver/MAC/HID Support/HID_Utilities_External.h	/^typedef recDevice* pRecDevice;$/;"	t
pRecElement	driver/MAC/HID Support/HID_Utilities.h	/^typedef recElement* pRecElement;$/;"	t
pRecElement	driver/MAC/HID Support/HID_Utilities_External.h	/^typedef recElement* pRecElement;$/;"	t
pRecSaveHID	driver/MAC/HID Support/HID_Config_Utilities.h	/^typedef recSaveHID * pRecSaveHID;$/;"	t
pRecSaveHID	driver/MAC/HID Support/HID_Utilities_External.h	/^typedef recSaveHID * pRecSaveHID;$/;"	t
pSibling	driver/MAC/HID Support/HID_Utilities.h	/^    struct recElement * pSibling;			\/\/ next sibling (for elements and collections)$/;"	m	struct:recElement	typeref:struct:recElement::recElement
pSibling	driver/MAC/HID Support/HID_Utilities_External.h	/^    struct recElement * pSibling;			\/\/ next sibling (for elements and collections)$/;"	m	struct:recElement	typeref:struct:recElement::recElement
paintRoomInside	util/map.cpp	/^void Map::paintRoomInside(int x, int y)$/;"	f	class:Map
param	driver/common.h	/^	const char *param;$/;"	m	class:commandLineCallbackData
passFilter	util/statCollection.cpp	/^bool statCollection::passFilter(const char *category) const$/;"	f	class:statCollection
path	apps/entry_jps/main.cpp	/^	std::vector<xyLoc> path;$/;"	m	struct:stats	file:
path	apps/entry_jps_plus/main.cpp	/^	std::vector<xyLoc> path;$/;"	m	struct:stats	file:
path	util/path.cpp	/^path::path(node* _n, path* _next) : n(_n), next(_next)$/;"	f	class:path
path	util/path.h	/^class path {$/;"	c
pathable	abstraction/mapFlatAbstraction.cpp	/^bool mapFlatAbstraction::pathable(node *from, node *to)$/;"	f	class:mapFlatAbstraction
pathable	abstraction/mapQuadTreeAbstraction.cpp	/^bool mapQuadTreeAbstraction::pathable(node *from, node *to)$/;"	f	class:mapQuadTreeAbstraction
pathable	jump/JumpPointAbstraction.cpp	/^JumpPointAbstraction::pathable(node* n, node* m)$/;"	f	class:JumpPointAbstraction
pause	simulation/unitSimulation.h	/^	bool pause;$/;"	m	class:unitSimulation
peek	util/heap.cpp	/^graph_object* heap::peek()$/;"	f	class:heap
penalty	simulation/unitSimulation.h	/^	double penalty;$/;"	m	class:unitSimulation
point3d	util/glUtil.h	/^  point3d() {}$/;"	f	class:point3d
point3d	util/glUtil.h	/^  point3d(GLfloat a, GLfloat b, GLfloat c) :x(a), y(b), z(c) {}$/;"	f	class:point3d
point3d	util/glUtil.h	/^class point3d {$/;"	c
points	driver/common.h	/^	bool points;$/;"	m	struct:recContext
policy	shared/FlexibleAStar.h	/^		ExpansionPolicy* policy;$/;"	m	class:FlexibleAStar
polygons	driver/common.h	/^	bool polygons;$/;"	m	struct:recContext
pop	util/heap2.h	/^	void pop() { remove(); }$/;"	f	class:heap2
possibleDir	simulation/constants.h	/^const tDirection possibleDir[numActions] = { kN, kNE, kE, kSE, kS, kSW, kW, kNW, kStay, kTeleport };$/;"	v
precision	extras/Experiment.h	/^		int precision;$/;"	m	class:Experiment
preferredState	driver/MAC/HID Support/HID_Utilities.h	/^    Boolean preferredState;					\/\/ does element have a preferred state (such as a button)$/;"	m	struct:recElement
preferredState	driver/MAC/HID Support/HID_Utilities_External.h	/^    unsigned char preferredState;					\/\/ does element have a preferred state (such as a button)$/;"	m	struct:recElement
prevNode	shared/aStar.h	/^		node *prevNode;$/;"	m	class:AStar3Util::SearchNode
print	extras/Experiment.cpp	/^void Experiment::print(std::ostream& out)$/;"	f	class:Experiment
print	jump/JumpInfo.cpp	/^JumpInfo::print(std::ostream& out)$/;"	f	class:JumpInfo
print	simulation/unitSimulation.cpp	/^void unitSimulation::print(bool forceOutput)$/;"	f	class:unitSimulation
print	util/graph.cpp	/^void edge::print(ostream& out) const$/;"	f	class:edge
print	util/graph.cpp	/^void graph::print(ostream &out) const$/;"	f	class:graph
print	util/graph.cpp	/^void graph_object::print(ostream& \/*out*\/) const$/;"	f	class:graph_object
print	util/graph.cpp	/^void node::print(ostream& out) const$/;"	f	class:node
print	util/map.cpp	/^void Map::print(int _scale)$/;"	f	class:Map
print	util/path.cpp	/^void path::print(bool beginning)$/;"	f	class:path
printCollectedStats	simulation/unitSimulation.h	/^	void printCollectedStats(bool v) { stats.enablePrintOutput(v); }$/;"	f	class:unitSimulation
printCommandLineArguments	driver/common.cpp	/^void printCommandLineArguments()$/;"	f
printGraph	util/DebugUtility.cpp	/^void DebugUtility::printGraph(graph* g)$/;"	f	class:DebugUtility
printKeyboardAssignments	driver/common.cpp	/^void printKeyboardAssignments()$/;"	f
printNode	util/DebugUtility.cpp	/^void DebugUtility::printNode(std::string msg, node* n, node* goal)$/;"	f	class:DebugUtility
printOutput	util/statCollection.h	/^	bool printOutput;$/;"	m	class:statCollection
printPath	util/DebugUtility.cpp	/^void DebugUtility::printPath(path* p)$/;"	f	class:DebugUtility
printStats	shared/aStar.cpp	/^void aStar::printStats()$/;"	f	class:aStar
printStats	util/graph.cpp	/^void graph::printStats()$/;"	f	class:graph
printStatsTable	util/statCollection.cpp	/^void statCollection::printStatsTable() const$/;"	f	class:statCollection
probDirChange	simulation/unit.h	/^	double probDirChange;$/;"	m	class:billiardBallUnit
problem	policies/ExpansionPolicy.h	/^		ProblemInstance* problem;$/;"	m	class:ExpansionPolicy
processCommandLineArgs	driver/common.cpp	/^void processCommandLineArgs(int argc, char *argv[])$/;"	f
processFramesPerSecond	driver/main.cpp	/^int processFramesPerSecond(char *argument[], int maxNumArgs)$/;"	f
processMenuEvents	driver/main.cpp	/^void processMenuEvents(int option)$/;"	f
product	driver/MAC/HID Support/HID_Utilities.h	/^    Str255 product;							\/\/ name of product$/;"	m	struct:recDevice
product	driver/MAC/HID Support/HID_Utilities_External.h	/^    char product[256];						\/\/ name of product$/;"	m	struct:recDevice
productID	driver/MAC/HID Support/HID_Config_Utilities.h	/^    long productID;$/;"	m	struct:recSaveHID
productID	driver/MAC/HID Support/HID_Utilities.h	/^    long productID;							\/\/ id for particular product, unique across all of a vendors devices$/;"	m	struct:recDevice
productID	driver/MAC/HID Support/HID_Utilities_External.h	/^    long productID;							\/\/ id for particular product, unique across all of a vendors devices$/;"	m	struct:recDevice
productID	driver/MAC/HID Support/HID_Utilities_External.h	/^    long productID;$/;"	m	struct:recSaveHID
queue	driver/MAC/HID Support/HID_Utilities.h	/^    IOHIDQueueInterface ** queue;			\/\/ device queue, NULL = no queue$/;"	m	struct:recDevice
queue	driver/MAC/HID Support/HID_Utilities_External.h	/^    void * queue;							\/\/ device queue, NULL = no queue$/;"	m	struct:recDevice
r	simulation/unit.h	/^	GLfloat r, g, b;$/;"	m	class:unit
r	util/glUtil.h	/^	GLfloat r,g,b;$/;"	m	class:recColor
randomUnit	simulation/unit.h	/^	randomUnit(int _x, int _y)$/;"	f	class:randomUnit
randomUnit	simulation/unit.h	/^	randomUnit(int _x, int _y, int _r, int _g, int _b)$/;"	f	class:randomUnit
randomUnit	simulation/unit.h	/^class randomUnit : public unit {$/;"	c
randomerUnit	simulation/unit.h	/^	randomerUnit(int _x, int _y)$/;"	f	class:randomerUnit
randomerUnit	simulation/unit.h	/^	randomerUnit(int _x, int _y, int _r, int _g, int _b)$/;"	f	class:randomerUnit
randomerUnit	simulation/unit.h	/^class randomerUnit : public unit {$/;"	c
readFile	util/HogConfig.cpp	/^HogConfig::readFile(const char* filename)$/;"	f	class:HogConfig
realTime	simulation/unitSimulation.h	/^	bool realTime;$/;"	m	class:unitSimulation
recCamera	driver/common.h	/^} recCamera;$/;"	t	typeref:struct:__anon8
recColor	util/glUtil.h	/^class recColor {$/;"	c
recContext	driver/common.h	/^struct recContext$/;"	s
recContext	driver/common.h	/^typedef struct recContext recContext;$/;"	t	typeref:struct:recContext
recDevice	driver/MAC/HID Support/HID_Utilities.h	/^struct recDevice$/;"	s
recDevice	driver/MAC/HID Support/HID_Utilities.h	/^typedef struct recDevice recDevice;$/;"	t	typeref:struct:recDevice
recDevice	driver/MAC/HID Support/HID_Utilities_External.h	/^struct recDevice$/;"	s
recDevice	driver/MAC/HID Support/HID_Utilities_External.h	/^typedef struct recDevice recDevice;$/;"	t	typeref:struct:recDevice
recElement	driver/MAC/HID Support/HID_Utilities.h	/^struct recElement$/;"	s
recElement	driver/MAC/HID Support/HID_Utilities.h	/^typedef struct recElement recElement;$/;"	t	typeref:struct:recElement
recElement	driver/MAC/HID Support/HID_Utilities_External.h	/^struct recElement$/;"	s
recElement	driver/MAC/HID Support/HID_Utilities_External.h	/^typedef struct recElement recElement;$/;"	t	typeref:struct:recElement
recSaveHID	driver/MAC/HID Support/HID_Config_Utilities.h	/^struct recSaveHID$/;"	s
recSaveHID	driver/MAC/HID Support/HID_Config_Utilities.h	/^typedef struct recSaveHID recSaveHID;$/;"	t	typeref:struct:recSaveHID
recSaveHID	driver/MAC/HID Support/HID_Utilities_External.h	/^struct recSaveHID$/;"	s
recSaveHID	driver/MAC/HID Support/HID_Utilities_External.h	/^typedef struct recSaveHID recSaveHID;$/;"	t	typeref:struct:recSaveHID
recVec	util/glUtil.h	/^class recVec {$/;"	c
recording	driver/MAC/mac_main.cpp	/^bool recording = false;$/;"	v
recurse	jump/JumpPointRefinementPolicy.cpp	/^JumpPointRefinementPolicy::recurse(Jump::Direction d, node* current, $/;"	f	class:JumpPointRefinementPolicy
ref	util/path.cpp	/^int path::ref = 0;$/;"	m	class:path	file:
ref	util/path.h	/^  static int ref;$/;"	m	class:path
refine	jump/JumpPointRefinementPolicy.cpp	/^JumpPointRefinementPolicy::refine(path* abspath)$/;"	f	class:JumpPointRefinementPolicy
refine	policies/NoRefinementPolicy.cpp	/^path* NoRefinementPolicy::refine(path* abspath)$/;"	f	class:NoRefinementPolicy
refine	policies/OctileDistanceRefinementPolicy.cpp	/^OctileDistanceRefinementPolicy::refine(path* abspath)$/;"	f	class:OctileDistanceRefinementPolicy
regFontList	driver/common.h	/^	GLuint regFontList;$/;"	m	struct:recContext
relative	driver/MAC/HID Support/HID_Utilities.h	/^    Boolean relative;						\/\/ are reports relative to last report (deltas)$/;"	m	struct:recElement
relative	driver/MAC/HID Support/HID_Utilities_External.h	/^    unsigned char relative;						\/\/ are reports relative to last report (deltas)$/;"	m	struct:recElement
relax	util/graph.cpp	/^bool graph::relax(edge *e, int weightIndex)$/;"	f	class:graph
relaxEdge	shared/aStar3.cpp	/^void aStarOld::relaxEdge(heap *nodeHeap, graph *g, edge *e, int source, int nextNode, node *d)$/;"	f	class:aStarOld
relaxNode	shared/FlexibleAStar.cpp	/^FlexibleAStar::relaxNode(node* from, node* to, node* goal, double cost, $/;"	f	class:FlexibleAStar
relaxReverseEdge	util/graph.cpp	/^bool graph::relaxReverseEdge(edge *e, int weightIndex)$/;"	f	class:graph
remove	policies/NoInsertionPolicy.cpp	/^NoInsertionPolicy::remove(node* n)$/;"	f	class:NoInsertionPolicy
remove	util/heap.cpp	/^graph_object *heap::remove()$/;"	f	class:heap
remove	util/heap2.h	/^OBJ heap2<OBJ, HashKey, EqKey, CmpKey>::remove()$/;"	f	class:heap2
removeEdge	abstraction/mapFlatAbstraction.cpp	/^void mapFlatAbstraction::removeEdge(edge *e, unsigned int)$/;"	f	class:mapFlatAbstraction
removeEdge	abstraction/mapQuadTreeAbstraction.cpp	/^void mapQuadTreeAbstraction::removeEdge(edge *, unsigned int)$/;"	f	class:mapQuadTreeAbstraction
removeEdge	jump/JumpPointAbstraction.cpp	/^JumpPointAbstraction::removeEdge(edge *e, unsigned int absLevel)$/;"	f	class:JumpPointAbstraction
removeEdge	util/graph.cpp	/^void graph::removeEdge(edge *e)$/;"	f	class:graph
removeEdge	util/graph.cpp	/^void node::removeEdge(edge *e)$/;"	f	class:node
removeJoystickHandler	driver/common.cpp	/^void removeJoystickHandler(joystickCallback jC, void *userdata)$/;"	f
removeMouseClickHandler	driver/common.cpp	/^void removeMouseClickHandler(mouseCallback mC)$/;"	f
removeNode	abstraction/mapFlatAbstraction.cpp	/^void mapFlatAbstraction::removeNode(node *n)$/;"	f	class:mapFlatAbstraction
removeNode	abstraction/mapQuadTreeAbstraction.cpp	/^void mapQuadTreeAbstraction::removeNode(node *)$/;"	f	class:mapQuadTreeAbstraction
removeNode	jump/JumpPointAbstraction.cpp	/^JumpPointAbstraction::removeNode(node* n)$/;"	f	class:JumpPointAbstraction
removeNode	policies/InsertionPolicy.cpp	/^InsertionPolicy::removeNode(node* n)$/;"	f	class:InsertionPolicy
removeNode	util/graph.cpp	/^node *graph::removeNode(node *n, unsigned int &oldID)$/;"	f	class:graph
removeNode	util/graph.h	/^  void removeNode(node *n) { unsigned int x; removeNode(n, x); } \/\/ if you don't care about node #'s$/;"	f	class:graph
removeNode	util/graph.h	/^  void removeNode(unsigned int nodeNum) { removeNode(getNode(nodeNum)); }$/;"	f	class:graph
removeUnit	simulation/unitGroup.cpp	/^void unitGroup::removeUnit(unit *u)$/;"	f	class:unitGroup
renderScene	driver/main.cpp	/^void renderScene(void)$/;"	f
rendererID	driver/MAC/macGlCheck.h	/^  unsigned long rendererID; \/\/ renderer ID$/;"	m	struct:__anon16
repairAbstraction	abstraction/mapFlatAbstraction.cpp	/^void mapFlatAbstraction::repairAbstraction()$/;"	f	class:mapFlatAbstraction
repairAbstraction	abstraction/mapQuadTreeAbstraction.cpp	/^void mapQuadTreeAbstraction::repairAbstraction()$/;"	f	class:mapQuadTreeAbstraction
repairAbstraction	jump/JumpPointAbstraction.cpp	/^JumpPointAbstraction::repairAbstraction()$/;"	f	class:JumpPointAbstraction
reportError	driver/MAC/mac_main.cpp	/^void reportError(char * strError)$/;"	f
resRefNum	driver/MAC/mac_main.cpp	/^short resRefNum;$/;"	v
reservationProvider	simulation/reservationProvider.h	/^class reservationProvider {$/;"	c
reserveMove	simulation/unitSimulation.h	/^	virtual bool reserveMove(node *, node *, double, unit *) { return true; }$/;"	f	class:unitSimulation
reset	jump/RecursiveJumpPointExpansionPolicy.h	/^		virtual void reset() { directions.clear(); }$/;"	f	class:RecursiveJumpPointExpansionPolicy
reset	util/heap2.h	/^void heap2<OBJ, HashKey, EqKey, CmpKey>::reset()$/;"	f	class:heap2
resetCamera	driver/common.cpp	/^void resetCamera()$/;"	f
resetCamera	driver/common.cpp	/^void resetCamera(recCamera * pCamera)$/;"	f
resetMetrics	jump/JumpPointSearch.cpp	/^JumpPointSearch::resetMetrics()$/;"	f	class:JumpPointSearch
resetMetrics	policies/InsertionPolicy.cpp	/^InsertionPolicy::resetMetrics()$/;"	f	class:InsertionPolicy
resetMetrics	policies/RefinementPolicy.cpp	/^RefinementPolicy::resetMetrics()$/;"	f	class:RefinementPolicy
resetNodeCount	shared/aStar.h	/^	void resetNodeCount() { nodesExpanded = nodesTouched = 0; }$/;"	f	class:aStar
resetNodeCount	util/GenericIDAStar.h	/^	void resetNodeCount() { nodesExpanded = nodesTouched = 0; }$/;"	f	class:GenericIDAStar
resetValues	util/mapOverlay.cpp	/^void MapOverlay::resetValues()$/;"	f	class:MapOverlay
resizeGL	driver/MAC/mac_main.cpp	/^OSStatus resizeGL(pRecContext pContextInfo, CGRect viewRect)$/;"	f
resizeGL	driver/main.cpp	/^void resizeGL(pRecContext pContextInfo, CGRect viewRect)$/;"	f
resizeWindow	driver/main.cpp	/^void resizeWindow(int x, int y)$/;"	f
reverse	util/path.cpp	/^path *path::reverse()$/;"	f	class:path
revision	util/map.h	/^  int revision;$/;"	m	class:Map
rhrUnit	simulation/unit.h	/^	rhrUnit(int _x, int _y)$/;"	f	class:rhrUnit
rhrUnit	simulation/unit.h	/^class rhrUnit : public unit {$/;"	c
rollToTrackball	driver/trackball.cpp	/^void rollToTrackball (long x, long y, float rot [4]) \/\/ rot is output rotation angle$/;"	f
rotPoint	driver/common.h	/^	recVec rotPoint; \/\/ Point to rotate about$/;"	m	struct:__anon8
rotate	util/heap.cpp	/^bool heap::rotate(graph_object* first, graph_object* second)$/;"	f	class:heap
rotation2Quat	driver/trackball.cpp	/^static void rotation2Quat (float *A, float *q)$/;"	f	file:
rp	shared/spreadExecSearchAlgorithm.h	/^	reservationProvider *rp;$/;"	m	class:spreadExecSearchAlgorithm
sType	util/statCollection.h	/^	storedType sType;$/;"	m	class:stat
s_algorithm	shared/searchUnit.h	/^	spreadExecSearchAlgorithm *s_algorithm;$/;"	m	class:searchUnit
save	util/map.cpp	/^void Map::save(FILE *f)$/;"	f	class:Map
save	util/map.cpp	/^void Map::save(const char *filename)$/;"	f	class:Map
save	util/map.cpp	/^void Map::save(std::stringstream &\/*data*\/) {}$/;"	f	class:Map
saveHistory	simulation/unitSimulation.cpp	/^bool unitSimulation::saveHistory(char *fname, bool includeMap)$/;"	f	class:unitSimulation
saveOctile	util/map.cpp	/^void Map::saveOctile(FILE *f)$/;"	f	class:Map
savePath	driver/MAC/mac_main.cpp	/^void savePath(WindowRef window, pRecContext pContextInfo)$/;"	f
savePicture	driver/MAC/mac_main.cpp	/^void savePicture(WindowRef window, pRecContext pContextInfo)$/;"	f
saveRaw	util/map.cpp	/^void Map::saveRaw(FILE *f)$/;"	f	class:Map
saveSimHistory	driver/MAC/mac_main.cpp	/^void saveSimHistory(WindowRef window, pRecContext pContextInfo)$/;"	f
scale	util/map.cpp	/^void Map::scale(long newWidth, long newHeight)$/;"	f	class:Map
scaleX	apps/entry_jps/ScenarioLoader.h	/^	int scaleX;$/;"	m	class:Experiment
scaleX	apps/entry_jps_plus/ScenarioLoader.h	/^	int scaleX;$/;"	m	class:Experiment
scaleX	extras/Experiment.h	/^		int scaleX;$/;"	m	class:Experiment
scaleY	apps/entry_jps/ScenarioLoader.h	/^	int scaleY;$/;"	m	class:Experiment
scaleY	apps/entry_jps_plus/ScenarioLoader.h	/^	int scaleY;$/;"	m	class:Experiment
scaleY	extras/Experiment.h	/^		int scaleY;$/;"	m	class:Experiment
scaledMax	driver/MAC/HID Support/HID_Utilities.h	/^    long scaledMax;							\/\/ reported scaled max value possible$/;"	m	struct:recElement
scaledMax	driver/MAC/HID Support/HID_Utilities_External.h	/^    long scaledMax;							\/\/ reported scaled max value possible$/;"	m	struct:recElement
scaledMin	driver/MAC/HID Support/HID_Utilities.h	/^    long scaledMin;							\/\/ reported scaled min value possible$/;"	m	struct:recElement
scaledMin	driver/MAC/HID Support/HID_Utilities_External.h	/^    long scaledMin;							\/\/ reported scaled min value possible$/;"	m	struct:recElement
scenName	apps/entry_jps/ScenarioLoader.h	/^	char scenName[1024];$/;"	m	class:ScenarioLoader
scenName	apps/entry_jps_plus/ScenarioLoader.h	/^	char scenName[1024];$/;"	m	class:ScenarioLoader
scenario	util/HogConfig.h	/^		char* scenario; \/\/ scenario filename$/;"	m	class:HogConfig
scrolling	driver/TextBox.h	/^	bool deform, scrolling;$/;"	m	class:TextBox
search	shared/FlexibleAStar.cpp	/^FlexibleAStar::search(node* start, node* goal)$/;"	f	class:FlexibleAStar
searchAlgorithm	shared/searchAlgorithm.h	/^	searchAlgorithm() { nodesExpanded = nodesTouched = 0; searchTime = 0; verbose = 0;}$/;"	f	class:searchAlgorithm
searchAlgorithm	shared/searchAlgorithm.h	/^class searchAlgorithm {$/;"	c
searchTime	policies/InsertionPolicy.h	/^		double searchTime;$/;"	m	class:InsertionPolicy
searchTime	policies/RefinementPolicy.h	/^		double searchTime;$/;"	m	class:RefinementPolicy
searchTime	shared/searchAlgorithm.h	/^	double searchTime;$/;"	m	class:searchAlgorithm
searchUnit	shared/searchUnit.cpp	/^searchUnit::searchUnit(int _x, int _y, float _r, float _g, float _b, unit *_target, searchAlgorithm *alg)$/;"	f	class:searchUnit
searchUnit	shared/searchUnit.cpp	/^searchUnit::searchUnit(int _x, int _y, int _r, int _g, int _b, unit *_target, searchAlgorithm *alg)$/;"	f	class:searchUnit
searchUnit	shared/searchUnit.cpp	/^searchUnit::searchUnit(int _x, int _y, unit *_target, searchAlgorithm *alg)$/;"	f	class:searchUnit
searchUnit	shared/searchUnit.cpp	/^searchUnit::searchUnit(int _x, int _y, unit *_target, spreadExecSearchAlgorithm *alg)$/;"	f	class:searchUnit
searchUnit	shared/searchUnit.h	/^class searchUnit : public unit {$/;"	c
searchUnit_H	shared/searchUnit.h	/^#define searchUnit_H$/;"	d
sectorSize	abstraction/mapQuadTreeAbstraction.h	/^	int sectorSize;$/;"	m	class:mapQuadTreeAbstraction
serial	driver/MAC/HID Support/HID_Utilities.h	/^    Str255 serial;							\/\/ serial number of specific product, can be assumed unique across specific product or specific vendor (not used often)$/;"	m	struct:recDevice
serial	driver/MAC/HID Support/HID_Utilities_External.h	/^    char serial[256];						\/\/ serial number of specific product, can be assumed unique across specific product or specific vendor (not used often)$/;"	m	struct:recDevice
set	util/bitVector.cpp	/^void bitVector::set(int index, bool value)$/;"	f	class:bitVector
setAgentLocation	simulation/unitSimulation.cpp	/^void unitSimulation::setAgentLocation(unitInfo *u, bool success, bool timer)$/;"	f	class:unitSimulation
setAlg	util/HogConfig.cpp	/^HogConfig::setAlg(const char* alg)$/;"	f	class:HogConfig
setAsynchronous	simulation/unitSimulation.h	/^	void setAsynchronous() { asynch = true; }$/;"	f	class:unitSimulation
setCanCrossDiagonally	simulation/unitSimulation.h	/^	void setCanCrossDiagonally(bool cross) { disallowDiagonalCrossingMoves = !cross; }$/;"	f	class:unitSimulation
setColor	driver/TextBox.h	/^	void setColor(recColor _myColor) { myColor = _myColor; }$/;"	f	class:TextBox
setColor	simulation/unit.h	/^	void setColor(GLfloat _r, GLfloat _g, GLfloat _b) { r=_r; g=_g; b=_b; }$/;"	f	class:unit
setColorMap	util/mapOverlay.h	/^	void setColorMap(int val) { colorMap = val; }$/;"	f	class:MapOverlay
setCornerHeight	util/map.cpp	/^void Map::setCornerHeight(long x, long y, tCorner which,$/;"	f	class:Map
setCorridor	shared/aStar.cpp	/^void aStar::setCorridor(path *corridor, int width)$/;"	f	class:aStar
setCorridorNodes	filters/CorridorFilter.cpp	/^void CorridorFilter::setCorridorNodes(std::map<int, node*>* _nodes) $/;"	f	class:CorridorFilter
setCost	jump/JumpInfo.h	/^		inline void setCost(unsigned int index, double cost)$/;"	f	class:JumpInfo
setCutCorners	jump/JumpPointLocator.h	/^		inline void setCutCorners(bool cc) { cutCorners = cc; }$/;"	f	class:JumpPointLocator
setDebugInfo	util/graph.h	/^  void setDebugInfo(bool debug) { debuginfo = debug; }$/;"	f	class:graph_object
setDefaultEdgeWeight	shared/aStar3.h	/^	void setDefaultEdgeWeight(double newwh) { wh = newwh; }$/;"	f	class:aStarOld
setDisableGUI	driver/common.cpp	/^void setDisableGUI(bool val)$/;"	f
setDisplayTime	simulation/unitSimulation.cpp	/^void unitSimulation::setDisplayTime(double val)$/;"	f	class:unitSimulation
setDrawLand	util/map.cpp	/^void Map::setDrawLand(bool dLand)$/;"	f	class:Map
setFrom	util/graph.h	/^	void setFrom(int nodeid) { from = nodeid; }$/;"	f	class:edge
setGUI	util/HogConfig.h	/^		inline void setGUI(bool gui) { this->gui = gui; }$/;"	f	class:HogConfig
setGoal	util/altheap.h	/^		inline void	setGoal(node* newgoal) { goal = newgoal; } $/;"	f	class:altheap
setGraphAbstraction	shared/aStar3.h	/^	void setGraphAbstraction(graphAbstraction *aMap) { map = aMap; }$/;"	f	class:aStarOld
setHeight	util/map.cpp	/^void Map::setHeight(long x, long y, long tHeight, tSplitSide split)$/;"	f	class:Map
setHome	driver/common.cpp	/^void setHome(char* val) { HOGHOME=val; std::cout<<"\\nHOGHOME="<<HOGHOME<<". Can be overridden by setting the HOGHOME environment variable."<<std::endl; }$/;"	f
setIgnoreOnTarget	simulation/unitSimulation.cpp	/^bool unitSimulation::setIgnoreOnTarget(unit* u, bool x)$/;"	f	class:unitSimulation
setKeyLabel	util/graph.h	/^  void setKeyLabel(int which) { keyLabel = which; }$/;"	f	class:node
setLabelF	util/graph.cpp	/^void edge::setLabelF(unsigned int index, double val)$/;"	f	class:edge
setLabelF	util/graph.cpp	/^void node::setLabelF(unsigned int index, double val)$/;"	f	class:node
setLabelL	util/graph.cpp	/^void edge::setLabelL(unsigned int index, long val)$/;"	f	class:edge
setLabelL	util/graph.cpp	/^void node::setLabelL(unsigned int index, long val)$/;"	f	class:node
setLimit	jump/JumpPointLocator.h	/^		inline void setLimit(int lim) { jumplimit = lim; }$/;"	f	class:JumpPointLocator
setLockstepTime	simulation/unitSimulation.h	/^	inline void setLockstepTime(bool b) { lockstepTime = b; }$/;"	f	class:unitSimulation
setMap	util/HogConfig.cpp	/^HogConfig::setMap(const char* map)$/;"	f	class:HogConfig
setMarked	util/graph.h	/^	void setMarked(bool marked) { mark = marked; }$/;"	f	class:edge
setMoveStochasticity	simulation/unitSimulation.h	/^	void setMoveStochasticity(double _stochasticity) { stochasticity = _stochasticity; }$/;"	f	class:unitSimulation
setNextExperimentPtr	simulation/unitSimulation.h	/^	void setNextExperimentPtr(void (*nextExpPtr)(unitSimulation*)) { nextExperiment = nextExpPtr; }$/;"	f	class:unitSimulation
setNodeNum	util/map.cpp	/^void Map::setNodeNum(int num, int x, int y, tCorner corner)$/;"	f	class:Map
setObjectType	simulation/unit.h	/^	void setObjectType(tObjectType _unitType) { unitType = _unitType; }$/;"	f	class:unit
setOverlayValue	util/mapOverlay.cpp	/^void MapOverlay::setOverlayValue(int x, int y, double value)$/;"	f	class:MapOverlay
setPenalty	simulation/unitSimulation.h	/^	void setPenalty(double pen) { penalty = pen; }$/;"	f	class:unitSimulation
setPrecision	extras/Experiment.h	/^		inline void setPrecision(int prec) { precision = prec; }$/;"	f	class:Experiment
setProblemInstance	jump/RecursiveJumpPointExpansionPolicy.cpp	/^RecursiveJumpPointExpansionPolicy::setProblemInstance(ProblemInstance* p)$/;"	f	class:RecursiveJumpPointExpansionPolicy
setProblemInstance	policies/ExpansionPolicy.cpp	/^ExpansionPolicy::setProblemInstance(ProblemInstance* problem_)$/;"	f	class:ExpansionPolicy
setRealTime	simulation/unitSimulation.cpp	/^void unitSimulation::setRealTime(bool _realTime)$/;"	f	class:unitSimulation
setRectHeight	util/map.cpp	/^void Map::setRectHeight(long x1, long y1, long x2, long y2, long h, tTerrain type)$/;"	f	class:Map
setScenario	util/HogConfig.cpp	/^HogConfig::setScenario(const char* scenario)$/;"	f	class:HogConfig
setSimulationPaused	simulation/unitSimulation.h	/^	void setSimulationPaused(bool val) { pause = val; }$/;"	f	class:unitSimulation
setSizeMultipler	util/map.h	/^	void setSizeMultipler(int _sizeMultiplier)$/;"	f	class:Map
setSpeed	simulation/unit.h	/^	void setSpeed(double s) { speed = s; }$/;"	f	class:unit
setSplit	util/map.cpp	/^void Map::setSplit(long x, long y, tSplit split)$/;"	f	class:Map
setSynchronous	simulation/unitSimulation.h	/^	void setSynchronous() { asynch = false; }$/;"	f	class:unitSimulation
setTarget	simulation/unit.h	/^	virtual void setTarget(unit *u) { target = u; }$/;"	f	class:unit
setTargets	shared/spreadExecSearchAlgorithm.h	/^	virtual void setTargets(graphAbstraction *_aMap, node *s, node *e, reservationProvider *_rp = 0)$/;"	f	class:spreadExecSearchAlgorithm
setTerrainType	util/map.cpp	/^void Map::setTerrainType(long x, long y, tTerrain type, tSplitSide split)$/;"	f	class:Map
setTileSet	util/map.cpp	/^void Map::setTileSet(tTileset ts)$/;"	f	class:Map
setTo	util/graph.h	/^	void setTo(int nodeid) { to = nodeid; }$/;"	f	class:edge
setTransparentValue	util/mapOverlay.h	/^	void setTransparentValue(double v) { ignoreVal = v; }$/;"	f	class:MapOverlay
setUnitGroup	simulation/unit.cpp	/^void unit::setUnitGroup(unitGroup *_group)$/;"	f	class:unit
setUseBDPathMax	util/GenericIDAStar.h	/^	void setUseBDPathMax(bool val) { usePathMax = val; }$/;"	f	class:GenericIDAStar
setUseBlocking	simulation/unitSimulation.h	/^	void setUseBlocking(bool val) { blocking = val; }$/;"	f	class:unitSimulation
setVerbose	jump/JumpPointAbstraction.h	/^		void setVerbose(bool _verbose) { this->verbose = _verbose; }$/;"	f	class:JumpPointAbstraction
setVerbose	policies/InsertionPolicy.h	/^		inline void setVerbose(bool _v) { verbose = _v; }$/;"	f	class:InsertionPolicy
setVerbose	policies/RefinementPolicy.h	/^		inline void setVerbose(bool _verbose) { this->verbose = _verbose; }$/;"	f	class:RefinementPolicy
setWeight	util/graph.h	/^	void setWeight(double val) { setLabelF(kEdgeWeight, val); }$/;"	f	class:edge
setWidth	util/graph.h	/^	void setWidth(double val) { setLabelF(kEdgeWidth, val); }$/;"	f	class:edge
setWidth	util/graph.h	/^  void setWidth(double val) { width = val; }$/;"	f	class:node
setmapAbstractionDisplay	simulation/unitSimulation.cpp	/^void unitSimulation::setmapAbstractionDisplay(int _whichMap)$/;"	f	class:unitSimulation
setupAverageRatio	util/statUtil.cpp	/^void setupAverageRatio(statCollection *stats, char *stat1, char *stat2)$/;"	f
shapeSize	driver/common.h	/^	GLfloat shapeSize;$/;"	m	struct:recContext
showCredits	driver/common.h	/^	bool showCredits;$/;"	m	struct:recContext
showLand	driver/common.h	/^	bool showLand;$/;"	m	struct:recContext
simulationInfo	simulation/unitSimulation.h	/^class simulationInfo {$/;"	c
size	driver/MAC/HID Support/HID_Utilities.h	/^    long size;								\/\/ size in bits of data return from element$/;"	m	struct:recElement
size	driver/MAC/HID Support/HID_Utilities_External.h	/^    long size;								\/\/ size in bits of data return from element$/;"	m	struct:recElement
size	driver/main.h	/^   CGSize size;$/;"	m	struct:CGRect
size	util/bitVector.h	/^  int size, true_size;$/;"	m	class:bitVector
size	util/heap.cpp	/^unsigned int heap::size()$/;"	f	class:heap
size	util/heap2.h	/^	unsigned size() { return _elts.size(); }$/;"	f	class:heap2
sizeMultiplier	util/map.h	/^	int sizeMultiplier;$/;"	m	class:Map
sliders	driver/MAC/HID Support/HID_Utilities.h	/^    long sliders;							\/\/ number of sliders (calculated, not reported by device)$/;"	m	struct:recDevice
sliders	driver/MAC/HID Support/HID_Utilities_External.h	/^    long sliders;							\/\/ number of sliders (calculated, not reported by device)$/;"	m	struct:recDevice
smoothSetRectHeight	util/map.cpp	/^void Map::smoothSetRectHeight(long x1, long y1, long x2, long y2, long h, tTerrain type)$/;"	f	class:Map
sortExperiments	extras/ScenarioManager.cpp	/^AbstractScenarioManager::sortExperiments()$/;"	f	class:AbstractScenarioManager
speed	simulation/unit.h	/^	double speed;$/;"	m	class:unit
sphereDispList	simulation/unit.cpp	/^GLuint unit::sphereDispList = 0;$/;"	m	class:unit	file:
sphereDispList	simulation/unit.h	/^	static GLuint sphereDispList;$/;"	m	class:unit
split	util/map.h	/^	tSplit split;$/;"	m	class:Tile
spreadExecSearchAlgorithm	shared/spreadExecSearchAlgorithm.h	/^	spreadExecSearchAlgorithm() { }$/;"	f	class:spreadExecSearchAlgorithm
spreadExecSearchAlgorithm	shared/spreadExecSearchAlgorithm.h	/^class spreadExecSearchAlgorithm : public searchAlgorithm {$/;"	c
spread_cache	shared/searchUnit.h	/^	path *spread_cache;$/;"	m	class:searchUnit
stamp	apps/entry_jps/Timer.h	/^	void stamp() {$/;"	f	struct:Timer::CycleCounter
stamp	apps/entry_jps_plus/Timer.h	/^	void stamp() {$/;"	f	struct:Timer::CycleCounter
stamp	extras/timer.h	/^	void stamp() {$/;"	f	struct:Timer::CycleCounter
start	shared/aStar.h	/^	node *goal, *start;$/;"	m	class:aStar
start	shared/spreadExecSearchAlgorithm.h	/^	node *start, *end;$/;"	m	class:spreadExecSearchAlgorithm
start	util/ProblemInstance.h	/^		node *start, *goal;$/;"	m	class:ProblemInstance
startNewTrial	simulation/unitGroup.cpp	/^void unitGroup::startNewTrial(statCollection *)$/;"	f	class:unitGroup
startTime	apps/entry_jps/Timer.h	/^  AbsoluteTime startTime;$/;"	m	class:Timer
startTime	apps/entry_jps/Timer.h	/^  struct timeval startTime;$/;"	m	class:Timer	typeref:struct:Timer::timeval
startTime	apps/entry_jps/Timer.h	/^  uint64_t startTime;$/;"	m	class:Timer
startTime	apps/entry_jps_plus/Timer.h	/^  AbsoluteTime startTime;$/;"	m	class:Timer
startTime	apps/entry_jps_plus/Timer.h	/^  struct timeval startTime;$/;"	m	class:Timer	typeref:struct:Timer::timeval
startTime	apps/entry_jps_plus/Timer.h	/^  uint64_t startTime;$/;"	m	class:Timer
startTime	extras/timer.h	/^  AbsoluteTime startTime;$/;"	m	class:Timer
startTime	extras/timer.h	/^  uint64_t startTime;$/;"	m	class:Timer
startTime	simulation/unitSimulation.h	/^  double startTime;$/;"	m	class:timeStep
startTimer	apps/entry_jps/Timer.cpp	/^void Timer::startTimer()$/;"	f	class:Timer
startTimer	apps/entry_jps_plus/Timer.cpp	/^void Timer::startTimer()$/;"	f	class:Timer
startTimer	extras/timer.cpp	/^void Timer::startTimer()$/;"	f	class:Timer
startTrackball	driver/trackball.cpp	/^void startTrackball (long x, long y, long originX, long originY, long width, long height)$/;"	f
startTrajRecap	driver/main.h	/^bool startTrajRecap;$/;"	v
startx	apps/entry_jps/ScenarioLoader.h	/^	int startx, starty, goalx, goaly;$/;"	m	class:Experiment
startx	apps/entry_jps_plus/ScenarioLoader.h	/^	int startx, starty, goalx, goaly;$/;"	m	class:Experiment
startx	extras/Experiment.h	/^		int startx, starty, goalx, goaly;$/;"	m	class:Experiment
startx	simulation/unitSimulation.h	/^	int startx, starty;$/;"	m	class:unitInfo
starty	apps/entry_jps/ScenarioLoader.h	/^	int startx, starty, goalx, goaly;$/;"	m	class:Experiment
starty	apps/entry_jps_plus/ScenarioLoader.h	/^	int startx, starty, goalx, goaly;$/;"	m	class:Experiment
starty	extras/Experiment.h	/^		int startx, starty, goalx, goaly;$/;"	m	class:Experiment
starty	simulation/unitSimulation.h	/^	int startx, starty;$/;"	m	class:unitInfo
stat	util/statCollection.h	/^class stat {$/;"	c
statCollection	util/statCollection.cpp	/^statCollection::statCollection() :categories(), owners(), stats() { printOutput = false; } statCollection::~statCollection() { for (unsigned int x = 0; x < categories.size(); x++) { delete [] categories[x]; categories[x] = 0; } for (unsigned int x = 0; x < owners.size(); x++) { delete [] owners[x]; owners[x] = 0; } for (unsigned int x = 0; x < excludeFilters.size(); x++) { delete [] excludeFilters[x]; excludeFilters[x] = 0; } for (unsigned int x = 0; x < includeFilters.size(); x++) { delete [] includeFilters[x]; includeFilters[x] = 0; } } \/** * Add a new stat entry for the given category, owner and value.  *\/ void statCollection::addStat(const char *category, const char *owner, double value) { if (!passFilter(category)) return; int catID, ownerID; catID = addCategory(category); ownerID = addOwner(owner); stats.resize(stats.size()+1);$/;"	f	class:statCollection
statCollection	util/statCollection.h	/^class statCollection {$/;"	c
statValue	util/statCollection.h	/^typedef union { double fval; long lval; } statValue;$/;"	t	typeref:union:__anon26
stats	apps/entry_jps/main.cpp	/^struct stats {$/;"	s	file:
stats	apps/entry_jps_plus/main.cpp	/^struct stats {$/;"	s	file:
stats	simulation/unitSimulation.h	/^	statCollection stats;$/;"	m	class:unitSimulation
stats	util/statCollection.h	/^	std::vector<stat> stats;$/;"	m	class:statCollection
stayTime	simulation/unit.h	/^		int stayTime;$/;"	m	class:teleportUnit
stdevStatEntries	util/statUtil.cpp	/^double stdevStatEntries(statCollection *stats, const char *category, const char *owner)$/;"	f
stepTime	driver/TextBox.cpp	/^void TextBox::stepTime(double amount)$/;"	f	class:TextBox
stepUnitTime	simulation/unitSimulation.cpp	/^void unitSimulation::stepUnitTime(unitInfo *theUnit)$/;"	f	class:unitSimulation
stochasticity	simulation/unitSimulation.h	/^	double stochasticity;$/;"	m	class:unitSimulation
storage	util/bitVector.h	/^  uint32_t *storage;$/;"	m	class:bitVector
storedType	util/statCollection.h	/^enum storedType { floatStored, longStored };$/;"	g
strRendererName	driver/MAC/macGlCheck.h	/^  char strRendererName [256]; \/\/ name of hardware renderer$/;"	m	struct:__anon16
strRendererVendor	driver/MAC/macGlCheck.h	/^  char strRendererVendor [256]; \/\/ name of hardware renderer vendor$/;"	m	struct:__anon16
strRendererVersion	driver/MAC/macGlCheck.h	/^  char strRendererVersion [256]; \/\/ string rep of hardware renderer version$/;"	m	struct:__anon16
stringCopy	util/HogConfig.cpp	/^HogConfig::stringCopy(const char* src)$/;"	f	class:HogConfig
subdivisions	driver/common.h	/^	unsigned long subdivisions;$/;"	m	struct:recContext
submitTextToBuffer	driver/MAC/mac_main.cpp	/^void submitTextToBuffer(const char *val)$/;"	f
submitTextToBuffer	driver/main.cpp	/^void submitTextToBuffer(const char *val)$/;"	f
sumStat	util/statCollection.cpp	/^void statCollection::sumStat(const char *category, const char *owner, double value)$/;"	f	class:statCollection
sumStat	util/statCollection.cpp	/^void statCollection::sumStat(const char *category, const char *owner, long value)$/;"	f	class:statCollection
sumStatEntries	util/statUtil.cpp	/^double sumStatEntries(statCollection *stats, const char *category, const char *owner)$/;"	f
surface	driver/common.h	/^	long surface; $/;"	m	struct:recContext
tButtonType	driver/common.h	/^enum tButtonType {$/;"	g
tCorner	util/map.h	/^enum tCorner {$/;"	g
tDirection	simulation/constants.h	/^enum tDirection {$/;"	g
tDisplay	util/map.h	/^enum tDisplay {$/;"	g
tEdge	util/map.h	/^enum tEdge {$/;"	g
tKeyboardModifier	driver/common.h	/^enum tKeyboardModifier {$/;"	g
tMapType	util/map.h	/^enum tMapType {$/;"	g
tMouseEventType	driver/common.h	/^enum tMouseEventType {$/;"	g
tObjectType	simulation/constants.h	/^enum tObjectType {$/;"	g
tSplit	util/map.h	/^enum tSplit {$/;"	g
tSplitSide	util/map.h	/^enum tSplitSide {$/;"	g
tTerrain	util/map.h	/^enum tTerrain {$/;"	g
tTileset	util/map.h	/^enum tTileset {$/;"	g
table	util/heap2.h	/^	IndexTable table;$/;"	m	class:heap2
tail	util/path.h	/^	path *tail() { if (next) return next->tail(); return this; }$/;"	f	class:path
tail_offset	extras/ScenarioManager.cpp	/^static int tail_offset = 0;$/;"	v	file:
target	extras/ScenarioManager.h	/^		int generated, target;$/;"	m	class:TooManyTriesException
target	policies/ExpansionPolicy.h	/^		node* target;$/;"	m	class:ExpansionPolicy
target	simulation/unit.h	/^	unit *target;$/;"	m	class:unit
targetTime	shared/searchUnit.h	/^	double targetTime;$/;"	m	class:searchUnit
teleportUnit	simulation/unit.h	/^	teleportUnit(int _x, int _y, int _stayTime)$/;"	f	class:teleportUnit
teleportUnit	simulation/unit.h	/^class teleportUnit : public unit {$/;"	c
terrainBits	util/map.h	/^const int terrainBits = 4;$/;"	v
text	driver/TextBox.h	/^	char *text;$/;"	m	class:TextBox
textureUnits	driver/MAC/macGlCheck.h	/^  long textureUnits; \/\/ standard gl path max number of texture units$/;"	m	struct:__anon16
theMovie	driver/MAC/mac_main.cpp	/^Movie theMovie = NULL;$/;"	v
theSourceTrack	driver/MAC/mac_main.cpp	/^Track theSourceTrack = NULL;$/;"	v
think	simulation/unitGroup.h	/^	virtual void think(mapProvider *) { }$/;"	f	class:unitGroup
thinkTime	simulation/unitSimulation.h	/^	double thinkTime, moveDist;$/;"	m	class:unitInfo
tile1	util/map.h	/^	halfTile tile1, tile2;$/;"	m	class:Tile
tile2	util/map.h	/^	halfTile tile1, tile2;$/;"	m	class:Tile
tileOccupied	simulation/unitSimulation.h	/^	inline bool tileOccupied(int x, int y) { return bv->get(y*map_width+x); }$/;"	f	class:unitSimulation
tileSet	util/map.h	/^	tTileset tileSet;$/;"	m	class:Map
time	driver/common.h	/^	AbsoluteTime time;$/;"	m	struct:recContext
timeStep	simulation/unitSimulation.h	/^	timeStep() { x = -1; y = -1; startTime = 0; }$/;"	f	class:timeStep
timeStep	simulation/unitSimulation.h	/^	timeStep(int _x, int _y, double time)$/;"	f	class:timeStep
timeStep	simulation/unitSimulation.h	/^class timeStep {$/;"	c
timer	driver/common.h	/^	EventLoopTimerRef timer;$/;"	m	struct:recContext
timer	simulation/unit.h	/^	int timer;$/;"	m	class:teleportUnit
timerCB	driver/MAC/mac_main.cpp	/^static pascal void timerCB(EventLoopTimerRef inTimer, void* userData)$/;"	f	file:
timerContextCB	driver/MAC/mac_main.cpp	/^static void timerContextCB(pRecContext pContextInfo, WindowRef window)$/;"	f	file:
times	apps/entry_jps/main.cpp	/^	std::vector<double> times;$/;"	m	struct:stats	file:
times	apps/entry_jps_plus/main.cpp	/^	std::vector<double> times;$/;"	m	struct:stats	file:
title	driver/common.h	/^	const char *title;$/;"	m	class:keyboardCallbackData
tl	driver/TextBox.h	/^	point3d tl, br;$/;"	m	class:TextBox
to	util/graph.h	/^	unsigned int from, to;$/;"	m	class:edge
toString	jump/Jump.cpp	/^Jump::toString(Jump::Direction d)$/;"	f	class:Jump
toggleDrawAbstraction	abstraction/mapAbstraction.cpp	/^void mapAbstraction::toggleDrawAbstraction(int which)$/;"	f	class:mapAbstraction
toggleNoOpenGLDraw	simulation/unitSimulation.h	/^	void toggleNoOpenGLDraw() { noOpenGLDraw = !noOpenGLDraw; }$/;"	f	class:unitSimulation
top	util/heap2.h	/^	OBJ top() { return _elts[0]; }$/;"	f	class:heap2
totalCost	jump/JumpInfo.h	/^		inline double totalCost()$/;"	f	class:JumpInfo
totalElements	driver/MAC/HID Support/HID_Utilities.h	/^    long totalElements;						\/\/ number of total elements (should be total of all elements on device including collections) (calculated, not reported by device)$/;"	m	struct:recDevice
totalElements	driver/MAC/HID Support/HID_Utilities_External.h	/^    long totalElements;						\/\/ number of total elements (should be total of all elements on device including collections) (calculated, not reported by device)$/;"	m	struct:recDevice
transport	driver/MAC/HID Support/HID_Utilities.h	/^    Str255 transport;						\/\/ device transport$/;"	m	struct:recDevice
transport	driver/MAC/HID Support/HID_Utilities_External.h	/^    char transport[256];					\/\/ device transport (c string)$/;"	m	struct:recDevice
true_size	util/bitVector.h	/^  int size, true_size;$/;"	m	class:bitVector
tryLoadRollingStone	util/map.cpp	/^bool Map::tryLoadRollingStone(FILE *f)$/;"	f	class:Map
type	driver/MAC/HID Support/HID_Utilities.h	/^    IOHIDElementType type;					\/\/ the type defined by IOHIDElementType in IOHIDKeys.h$/;"	m	struct:recElement
type	driver/MAC/HID Support/HID_Utilities_External.h	/^    unsigned long type;						\/\/ the type defined by IOHIDElementType in IOHIDKeys.h$/;"	m	struct:recElement
type	util/map.h	/^  tTerrain type;$/;"	m	class:halfTile
uniqueID	util/graph.h	/^  int uniqueID;$/;"	m	class:graph_object
uniqueIDCounter	util/graph.cpp	/^unsigned graph_object::uniqueIDCounter = 0;$/;"	m	class:graph_object	file:
uniqueIDCounter	util/graph.h	/^  static unsigned int uniqueIDCounter;$/;"	m	class:graph_object
unit	simulation/unit.cpp	/^unit::unit(int _x, int _y, float _r, float _g, float _b, unit *_target)$/;"	f	class:unit
unit	simulation/unit.cpp	/^unit::unit(int _x, int _y, int _r, int _g, int _b, unit *_target)$/;"	f	class:unit
unit	simulation/unit.cpp	/^unit::unit(int _x, int _y, unit *_target)$/;"	f	class:unit
unit	simulation/unit.h	/^class unit {$/;"	c
unitExp	driver/MAC/HID Support/HID_Utilities.h	/^    long unitExp;							\/\/ exponent for units (also not used very often)$/;"	m	struct:recElement
unitExp	driver/MAC/HID Support/HID_Utilities_External.h	/^    long unitExp;							\/\/ exponent for units (also not used very often)$/;"	m	struct:recElement
unitGroup	simulation/unitGroup.cpp	/^unitGroup::unitGroup(mapProvider *)$/;"	f	class:unitGroup
unitGroup	simulation/unitGroup.h	/^class unitGroup {$/;"	c
unitGroups	simulation/unitSimulation.h	/^	std::vector<unitGroup *> unitGroups;$/;"	m	class:unitSimulation
unitID	simulation/unit.cpp	/^int unit::unitID = 0;$/;"	m	class:unit	file:
unitID	simulation/unit.h	/^	static int unitID;$/;"	m	class:unit
unitInfo	simulation/unitSimulation.h	/^	unitInfo() :actionHistory(0) {}$/;"	f	class:unitInfo
unitInfo	simulation/unitSimulation.h	/^class unitInfo {$/;"	c
unitInfoCompare	simulation/unitSimulation.h	/^class unitInfoCompare {$/;"	c
unitLayer	driver/common.h	/^	unitSimulation *unitLayer;$/;"	m	struct:recContext
unitSimulation	simulation/unitSimulation.cpp	/^unitSimulation::unitSimulation(mapAbstraction *_aMap, bool keepStats)$/;"	f	class:unitSimulation
unitSimulation	simulation/unitSimulation.h	/^class unitSimulation : public mapProvider, reservationProvider, public simulationInfo {$/;"	c
unitType	simulation/unit.h	/^	tObjectType unitType;$/;"	m	class:unit
units	driver/MAC/HID Support/HID_Utilities.h	/^    long units;								\/\/ units value is reported in (not used very often)$/;"	m	struct:recElement
units	driver/MAC/HID Support/HID_Utilities_External.h	/^    long units;								\/\/ units value is reported in (not used very often)$/;"	m	struct:recElement
units	simulation/unitSimulation.h	/^	std::vector<unitInfo *> units;$/;"	m	class:unitSimulation
unitsMoved	simulation/unitSimulation.h	/^	bool unitsMoved;$/;"	m	class:unitSimulation
updateLocation	shared/searchUnit.cpp	/^void searchUnit::updateLocation(int _x, int _y, bool success, simulationInfo *)$/;"	f	class:searchUnit
updateLocation	simulation/unit.cpp	/^void billiardBallUnit::updateLocation(int _x, int _y, bool success, simulationInfo *)$/;"	f	class:billiardBallUnit
updateLocation	simulation/unit.cpp	/^void randomUnit::updateLocation(int _x, int _y, bool success, simulationInfo *)$/;"	f	class:randomUnit
updateLocation	simulation/unit.cpp	/^void rhrUnit::updateLocation(int _x, int _y, bool success, simulationInfo *)$/;"	f	class:rhrUnit
updateLocation	simulation/unit.cpp	/^void teleportUnit::updateLocation(int _x, int _y, bool, simulationInfo *)$/;"	f	class:teleportUnit
updateLocation	simulation/unit.h	/^	virtual void updateLocation(int _x, int _y, bool, simulationInfo *) { x = _x; y = _y; }$/;"	f	class:unit
updateLocation	simulation/unitGroup.cpp	/^void unitGroup::updateLocation(unit *u, mapProvider *, int _x, int _y,$/;"	f	class:unitGroup
updateMap	simulation/unitSimulation.cpp	/^void unitSimulation::updateMap()$/;"	f	class:unitSimulation
updateModelView	driver/MAC/mac_main.cpp	/^void updateModelView(pRecContext pContextInfo)$/;"	f
updateModelView	driver/main.cpp	/^void updateModelView (pRecContext pContextInfo)$/;"	f
updateNextBound	util/GenericIDAStar.cpp	/^void GenericIDAStar::updateNextBound(double currBound, double fCost)$/;"	f	class:GenericIDAStar
updateProjection	driver/MAC/mac_main.cpp	/^void updateProjection(pRecContext pContextInfo)$/;"	f
updateProjection	driver/main.cpp	/^void updateProjection(pRecContext pContextInfo)$/;"	f
updateRotation	driver/MAC/mac_main.cpp	/^void updateRotation(double deltaTime, GLfloat * fRot, GLfloat * fVel, GLfloat * fAccel, GLfloat * objectRotation )$/;"	f
updateWeight	shared/aStar.cpp	/^void aStar::updateWeight(node *currOpenNode, node *neighbor, edge *e)$/;"	f	class:aStar
updated	util/map.h	/^  bool updated;$/;"	m	class:Map
updatemapAbstraction	simulation/unitSimulation.cpp	/^bool unitSimulation::updatemapAbstraction()$/;"	f	class:unitSimulation
usage	driver/MAC/HID Support/HID_Config_Utilities.h	/^    long usage;$/;"	m	struct:recSaveHID
usage	driver/MAC/HID Support/HID_Utilities.h	/^    long usage;								\/\/ usage page from IOUSBHID Parser.h which defines general usage$/;"	m	struct:recDevice
usage	driver/MAC/HID Support/HID_Utilities.h	/^    long usage;								\/\/ usage within above page from IOUSBHIDParser.h which defines specific usage$/;"	m	struct:recElement
usage	driver/MAC/HID Support/HID_Utilities_External.h	/^    long usage;								\/\/ usage page from IOUSBHID Parser.h which defines general usage$/;"	m	struct:recDevice
usage	driver/MAC/HID Support/HID_Utilities_External.h	/^    long usage;								\/\/ usage within above page from IOUSBHIDParser.h which defines specific usage$/;"	m	struct:recElement
usage	driver/MAC/HID Support/HID_Utilities_External.h	/^    long usage;$/;"	m	struct:recSaveHID
usageE	driver/MAC/HID Support/HID_Config_Utilities.h	/^    long usageE;$/;"	m	struct:recSaveHID
usageE	driver/MAC/HID Support/HID_Utilities_External.h	/^    long usageE;$/;"	m	struct:recSaveHID
usagePage	driver/MAC/HID Support/HID_Config_Utilities.h	/^    long usagePage;$/;"	m	struct:recSaveHID
usagePage	driver/MAC/HID Support/HID_Utilities.h	/^    long usagePage;							\/\/ usage page from IOUSBHIDParser.h which defines general usage$/;"	m	struct:recElement
usagePage	driver/MAC/HID Support/HID_Utilities.h	/^    long usagePage;							\/\/ usage within above page from IOUSBHID Parser.h which defines specific usage$/;"	m	struct:recDevice
usagePage	driver/MAC/HID Support/HID_Utilities_External.h	/^    long usagePage;							\/\/ usage page from IOUSBHIDParser.h which defines general usage$/;"	m	struct:recElement
usagePage	driver/MAC/HID Support/HID_Utilities_External.h	/^    long usagePage;							\/\/ usage within above page from IOUSBHID Parser.h which defines specific usage$/;"	m	struct:recDevice
usagePage	driver/MAC/HID Support/HID_Utilities_External.h	/^    long usagePage;$/;"	m	struct:recSaveHID
usagePageE	driver/MAC/HID Support/HID_Config_Utilities.h	/^    long usagePageE;$/;"	m	struct:recSaveHID
usagePageE	driver/MAC/HID Support/HID_Utilities_External.h	/^    long usagePageE;$/;"	m	struct:recSaveHID
usePathMax	util/GenericIDAStar.h	/^	bool usePathMax;$/;"	m	class:GenericIDAStar
userData	driver/common.h	/^	void *userData;$/;"	m	class:joystickCallbackData
userMax	driver/MAC/HID Support/HID_Utilities.h	/^    long userMax;							$/;"	m	struct:recElement
userMax	driver/MAC/HID Support/HID_Utilities_External.h	/^    long userMax;							$/;"	m	struct:recElement
userMin	driver/MAC/HID Support/HID_Utilities.h	/^    long userMin; 							\/\/ user set value to scale to (scale call)$/;"	m	struct:recElement
userMin	driver/MAC/HID Support/HID_Utilities_External.h	/^    long userMin; 							\/\/ user set value to scale to (scale call)$/;"	m	struct:recElement
value	driver/MAC/HID Support/HIDSupport.h	/^    long value;$/;"	m	struct:actionRec
value	util/statCollection.h	/^	statValue value;$/;"	m	class:stat
values	util/mapOverlay.h	/^	std::vector<double> values;$/;"	m	class:MapOverlay
vendorID	driver/MAC/HID Support/HID_Config_Utilities.h	/^    long vendorID;$/;"	m	struct:recSaveHID
vendorID	driver/MAC/HID Support/HID_Utilities.h	/^    long vendorID;							\/\/ id for device vendor, unique across all devices$/;"	m	struct:recDevice
vendorID	driver/MAC/HID Support/HID_Utilities_External.h	/^    long vendorID;							\/\/ id for device vendor, unique across all devices$/;"	m	struct:recDevice
vendorID	driver/MAC/HID Support/HID_Utilities_External.h	/^    long vendorID;$/;"	m	struct:recSaveHID
verbose	abstraction/graphAbstraction.cpp	/^const int verbose = kQuiet;\/\/kRepairGraph;$/;"	v
verbose	driver/common.cpp	/^static bool const verbose = false;$/;"	v	file:
verbose	jump/JumpPointAbstraction.h	/^		bool verbose;$/;"	m	class:JumpPointAbstraction
verbose	policies/ExpansionPolicy.h	/^		bool verbose;$/;"	m	class:ExpansionPolicy
verbose	policies/InsertionPolicy.h	/^		bool verbose;$/;"	m	class:InsertionPolicy
verbose	policies/RefinementPolicy.h	/^		bool verbose;$/;"	m	class:RefinementPolicy
verbose	shared/aStar.cpp	/^static const bool verbose = false;$/;"	v	file:
verbose	shared/searchAlgorithm.cpp	/^static const int verbose = 0;$/;"	v	file:
verbose	shared/searchAlgorithm.h	/^	int verbose;$/;"	m	class:searchAlgorithm
verbose	shared/searchUnit.cpp	/^static const bool verbose = false;$/;"	v	file:
verbose	simulation/unitSimulation.cpp	/^const bool verbose = false;$/;"	v
verbose	util/map.cpp	/^static const bool verbose = false; $/;"	v	file:
verifyGraph	util/graph.cpp	/^bool graph::verifyGraph() const$/;"	f	class:graph
verifyHierarchy	abstraction/mapFlatAbstraction.cpp	/^void mapFlatAbstraction::verifyHierarchy()$/;"	f	class:mapFlatAbstraction
verifyHierarchy	abstraction/mapQuadTreeAbstraction.cpp	/^void mapQuadTreeAbstraction::verifyHierarchy()$/;"	f	class:mapQuadTreeAbstraction
verifyHierarchy	jump/JumpPointAbstraction.cpp	/^JumpPointAbstraction::verifyHierarchy()$/;"	f	class:JumpPointAbstraction
version	driver/MAC/HID Support/HID_Utilities.h	/^    long version;							\/\/ version of product$/;"	m	struct:recDevice
version	driver/MAC/HID Support/HID_Utilities_External.h	/^    long version;							\/\/ version of product$/;"	m	struct:recDevice
version	extras/ScenarioManager.h	/^		int version;$/;"	m	class:AbstractScenarioManager
viewDir	driver/common.h	/^	recVec viewDir; \/\/ View direction vector$/;"	m	struct:__anon8
viewHeight	driver/common.h	/^	GLint viewWidth,viewHeight; \/\/ current window\/screen height and width$/;"	m	struct:__anon8
viewOriginX	driver/common.h	/^	GLfloat viewOriginX, viewOriginY; \/\/ always 0 $/;"	m	struct:__anon8
viewOriginY	driver/common.h	/^	GLfloat viewOriginX, viewOriginY; \/\/ always 0 $/;"	m	struct:__anon8
viewPos	driver/common.h	/^	recVec viewPos; \/\/ View position$/;"	m	struct:__anon8
viewTime	simulation/unitSimulation.h	/^	double currTime, viewTime;$/;"	m	class:unitSimulation
viewUp	driver/common.h	/^	recVec viewUp; \/\/ View up direction$/;"	m	struct:__anon8
viewWidth	driver/common.h	/^	GLint viewWidth,viewHeight; \/\/ current window\/screen height and width$/;"	m	struct:__anon8
wh	shared/aStar3.h	/^	double wh;$/;"	m	class:aStarOld
what	extras/ScenarioManager.h	/^		const char* what() const throw()$/;"	f	class:TooManyTriesException
wheels	driver/MAC/HID Support/HID_Utilities.h	/^    long wheels;							\/\/ number of wheels (calculated, not reported by device)$/;"	m	struct:recDevice
wheels	driver/MAC/HID Support/HID_Utilities_External.h	/^    long wheels;							\/\/ number of wheels (calculated, not reported by device)$/;"	m	struct:recDevice
which	policies/GridMapExpansionPolicy.h	/^		int which;$/;"	m	class:GridMapExpansionPolicy
which	policies/IncidentEdgesExpansionPolicy.h	/^		int which;$/;"	m	class:IncidentEdgesExpansionPolicy
which_map	simulation/unitSimulation.h	/^	int which_map;						\/\/ the number of the group to display info for$/;"	m	class:unitSimulation
width	driver/MAC/mac_main.cpp	/^	int width, height;$/;"	m	class:movieFrame	file:
width	driver/main.h	/^   float width;$/;"	m	struct:CGSize
width	util/graph.h	/^  double width;$/;"	m	class:node
width	util/map.h	/^	int width, height;$/;"	m	class:Map
widthBFS	abstraction/graphAbstraction.cpp	/^int graphAbstraction::widthBFS(node *child, node *parent)$/;"	f	class:graphAbstraction
windowEDMUPP	driver/common.h	/^	DMExtendedNotificationUPP  windowEDMUPP;$/;"	m	struct:recContext
windowEvtHndlr	driver/MAC/mac_main.cpp	/^static pascal OSStatus windowEvtHndlr (EventHandlerCallRef myHandler, EventRef event, void* userData)$/;"	f	file:
worldRotation	driver/common.h	/^	GLfloat worldRotation [4];$/;"	m	struct:recContext
wrapping	driver/MAC/HID Support/HID_Utilities.h	/^    Boolean wrapping;						\/\/ does element wrap around (one value higher than max is min)$/;"	m	struct:recElement
wrapping	driver/MAC/HID Support/HID_Utilities_External.h	/^    unsigned char wrapping;						\/\/ does element wrap around (one value higher than max is min)$/;"	m	struct:recElement
writeScenarioFile	extras/ScenarioManager.cpp	/^AbstractScenarioManager::writeScenarioFile(const char* filelocation)$/;"	f	class:AbstractScenarioManager
x	apps/entry_jps/Entry.h	/^  int16_t x;$/;"	m	struct:xyLoc
x	apps/entry_jps_plus/Entry.h	/^  int16_t x;$/;"	m	struct:xyLoc
x	driver/main.h	/^   float x;$/;"	m	struct:CGPoint
x	simulation/unit.h	/^	int x, y;$/;"	m	class:unit
x	simulation/unitSimulation.h	/^  int x, y;$/;"	m	class:timeStep
x	util/glUtil.h	/^  GLdouble x,y,z;$/;"	m	class:recVec
x	util/glUtil.h	/^  GLfloat x, y, z;$/;"	m	class:point3d
xyLoc	apps/entry_jps/Entry.h	/^struct xyLoc {$/;"	s
xyLoc	apps/entry_jps_plus/Entry.h	/^struct xyLoc {$/;"	s
xyRatio	driver/common.h	/^	unsigned long xyRatio;$/;"	m	struct:recContext
y	apps/entry_jps/Entry.h	/^  int16_t y;$/;"	m	struct:xyLoc
y	apps/entry_jps_plus/Entry.h	/^  int16_t y;$/;"	m	struct:xyLoc
y	driver/main.h	/^   float y;$/;"	m	struct:CGPoint
y	simulation/unit.h	/^	int x, y;$/;"	m	class:unit
y	simulation/unitSimulation.h	/^  int x, y;$/;"	m	class:timeStep
y	util/glUtil.h	/^  GLdouble x,y,z;$/;"	m	class:recVec
y	util/glUtil.h	/^  GLfloat x, y, z;$/;"	m	class:point3d
z	util/glUtil.h	/^  GLdouble x,y,z;$/;"	m	class:recVec
z	util/glUtil.h	/^  GLfloat x, y, z;$/;"	m	class:point3d
~AbstractScenarioManager	extras/ScenarioManager.cpp	/^AbstractScenarioManager::~AbstractScenarioManager()$/;"	f	class:AbstractScenarioManager
~CorridorFilter	filters/CorridorFilter.cpp	/^CorridorFilter::~CorridorFilter()$/;"	f	class:CorridorFilter
~DebugUtility	util/DebugUtility.cpp	/^DebugUtility::~DebugUtility()$/;"	f	class:DebugUtility
~ExpansionPolicy	policies/ExpansionPolicy.cpp	/^ExpansionPolicy::~ExpansionPolicy() $/;"	f	class:ExpansionPolicy
~Experiment	extras/Experiment.cpp	/^Experiment::~Experiment()$/;"	f	class:Experiment
~FlexibleAStar	shared/FlexibleAStar.cpp	/^FlexibleAStar::~FlexibleAStar()$/;"	f	class:FlexibleAStar
~FlexibleAStarFactory	shared/FlexibleAStarFactory.cpp	/^FlexibleAStarFactory::~FlexibleAStarFactory()$/;"	f	class:FlexibleAStarFactory
~GenericIDAStar	util/GenericIDAStar.h	/^	virtual ~GenericIDAStar() {}$/;"	f	class:GenericIDAStar
~GraphSearchEnvironment	util/SearchEnvironment.h	/^	~GraphSearchEnvironment() {}$/;"	f	class:GraphSearchEnvironment
~GridMapExpansionPolicy	policies/GridMapExpansionPolicy.cpp	/^GridMapExpansionPolicy::~GridMapExpansionPolicy()$/;"	f	class:GridMapExpansionPolicy
~Heuristic	heuristics/Heuristic.h	/^		virtual ~Heuristic() { }$/;"	f	class:Heuristic
~HogConfig	util/HogConfig.cpp	/^HogConfig::~HogConfig()$/;"	f	class:HogConfig
~IEdgeFactory	util/IEdgeFactory.h	/^		virtual ~IEdgeFactory() {}$/;"	f	class:IEdgeFactory
~IExpansionPolicyFactory	policies/IExpansionPolicyFactory.h	/^		virtual ~IExpansionPolicyFactory() { }$/;"	f	class:IExpansionPolicyFactory
~IHeuristicFactory	heuristics/IHeuristicFactory.h	/^		virtual ~IHeuristicFactory() { }$/;"	f	class:IHeuristicFactory
~INodeFactory	util/INodeFactory.h	/^		virtual ~INodeFactory() {}$/;"	f	class:INodeFactory
~ISearchAlgorithmFactory	shared/ISearchAlgorithmFactory.h	/^		virtual ~ISearchAlgorithmFactory() { }$/;"	f	class:ISearchAlgorithmFactory
~IncidentEdgesExpansionPolicy	policies/IncidentEdgesExpansionPolicy.cpp	/^IncidentEdgesExpansionPolicy::~IncidentEdgesExpansionPolicy()$/;"	f	class:IncidentEdgesExpansionPolicy
~IncidentEdgesPolicyFactory	policies/IncidentEdgesPolicyFactory.cpp	/^IncidentEdgesPolicyFactory::~IncidentEdgesPolicyFactory()$/;"	f	class:IncidentEdgesPolicyFactory
~InsertionPolicy	policies/InsertionPolicy.cpp	/^InsertionPolicy::~InsertionPolicy()$/;"	f	class:InsertionPolicy
~JumpInfo	jump/JumpInfo.cpp	/^JumpInfo::~JumpInfo()  $/;"	f	class:JumpInfo
~JumpPointAbstraction	jump/JumpPointAbstraction.cpp	/^JumpPointAbstraction::~JumpPointAbstraction()$/;"	f	class:JumpPointAbstraction
~JumpPointExpansionPolicy	jump/JumpPointExpansionPolicy.cpp	/^JumpPointExpansionPolicy::~JumpPointExpansionPolicy()$/;"	f	class:JumpPointExpansionPolicy
~JumpPointLocator	jump/JumpPointLocator.cpp	/^JumpPointLocator::~JumpPointLocator()$/;"	f	class:JumpPointLocator
~JumpPointRefinementPolicy	jump/JumpPointRefinementPolicy.cpp	/^JumpPointRefinementPolicy::~JumpPointRefinementPolicy()$/;"	f	class:JumpPointRefinementPolicy
~JumpPointSearch	jump/JumpPointSearch.cpp	/^JumpPointSearch::~JumpPointSearch()$/;"	f	class:JumpPointSearch
~ManhattanHeuristic	heuristics/ManhattanHeuristic.cpp	/^ManhattanHeuristic::~ManhattanHeuristic()$/;"	f	class:ManhattanHeuristic
~ManhattanHeuristicFactory	heuristics/ManhattanHeuristicFactory.cpp	/^ManhattanHeuristicFactory::~ManhattanHeuristicFactory()$/;"	f	class:ManhattanHeuristicFactory
~Map	util/map.cpp	/^Map::~Map()$/;"	f	class:Map
~MapSearchEnvironment	util/SearchEnvironment.h	/^	~MapSearchEnvironment() {}$/;"	f	class:MapSearchEnvironment
~NoFilter	filters/NoFilter.h	/^		virtual ~NoFilter() { } $/;"	f	class:NoFilter
~NoInsertionPolicy	policies/NoInsertionPolicy.cpp	/^NoInsertionPolicy::~NoInsertionPolicy()$/;"	f	class:NoInsertionPolicy
~NoRefinementPolicy	policies/NoRefinementPolicy.cpp	/^NoRefinementPolicy::~NoRefinementPolicy()$/;"	f	class:NoRefinementPolicy
~NodeFilter	filters/NodeFilter.h	/^		virtual ~NodeFilter() { }$/;"	f	class:NodeFilter
~OctileDistanceRefinementPolicy	policies/OctileDistanceRefinementPolicy.cpp	/^OctileDistanceRefinementPolicy::~OctileDistanceRefinementPolicy()$/;"	f	class:OctileDistanceRefinementPolicy
~OctileExpansionPolicy	policies/OctileExpansionPolicy.cpp	/^OctileExpansionPolicy::~OctileExpansionPolicy()$/;"	f	class:OctileExpansionPolicy
~OctileHeuristic	heuristics/OctileHeuristic.cpp	/^OctileHeuristic::~OctileHeuristic()$/;"	f	class:OctileHeuristic
~OctileHeuristicFactory	heuristics/OctileHeuristicFactory.cpp	/^OctileHeuristicFactory::~OctileHeuristicFactory()$/;"	f	class:OctileHeuristicFactory
~OfflineJumpPointLocator	jump/OfflineJumpPointLocator.cpp	/^OfflineJumpPointLocator::~OfflineJumpPointLocator()$/;"	f	class:OfflineJumpPointLocator
~OnlineJumpPointLocator	jump/OnlineJumpPointLocator.cpp	/^OnlineJumpPointLocator::~OnlineJumpPointLocator()$/;"	f	class:OnlineJumpPointLocator
~ProblemInstance	util/ProblemInstance.cpp	/^ProblemInstance::~ProblemInstance()$/;"	f	class:ProblemInstance
~RecursiveJumpPointExpansionPolicy	jump/RecursiveJumpPointExpansionPolicy.cpp	/^RecursiveJumpPointExpansionPolicy::~RecursiveJumpPointExpansionPolicy()$/;"	f	class:RecursiveJumpPointExpansionPolicy
~RefinementPolicy	policies/RefinementPolicy.cpp	/^RefinementPolicy::~RefinementPolicy()$/;"	f	class:RefinementPolicy
~ScenarioManager	extras/ScenarioManager.cpp	/^ScenarioManager::~ScenarioManager()$/;"	f	class:ScenarioManager
~SearchEnvironment	util/SearchEnvironment.h	/^	virtual ~SearchEnvironment() {}$/;"	f	class:SearchEnvironment
~SelectiveExpansionPolicy	policies/SelectiveExpansionPolicy.cpp	/^SelectiveExpansionPolicy::~SelectiveExpansionPolicy()$/;"	f	class:SelectiveExpansionPolicy
~TextBox	driver/TextBox.cpp	/^TextBox::~TextBox()$/;"	f	class:TextBox
~TileExpansionPolicy	policies/TileExpansionPolicy.cpp	/^TileExpansionPolicy::~TileExpansionPolicy()$/;"	f	class:TileExpansionPolicy
~Timer	apps/entry_jps/Timer.h	/^	~Timer(){}$/;"	f	class:Timer
~Timer	apps/entry_jps_plus/Timer.h	/^	~Timer(){}$/;"	f	class:Timer
~Timer	extras/timer.h	/^	~Timer(){}$/;"	f	class:Timer
~aStar	shared/aStar.h	/^	virtual ~aStar() {}$/;"	f	class:aStar
~aStarOld	shared/aStar3.h	/^	virtual ~aStarOld() {}$/;"	f	class:aStarOld
~altheap	util/altheap.cpp	/^altheap::~altheap()$/;"	f	class:altheap
~bitVector	util/bitVector.cpp	/^bitVector::~bitVector()$/;"	f	class:bitVector
~graph	util/graph.cpp	/^graph::~graph()$/;"	f	class:graph
~graphAbstraction	abstraction/graphAbstraction.cpp	/^graphAbstraction::~graphAbstraction()$/;"	f	class:graphAbstraction
~graph_object	util/graph.h	/^  virtual ~graph_object() { gobjCount--; }$/;"	f	class:graph_object
~heap	util/heap.cpp	/^heap::~heap()$/;"	f	class:heap
~heap2	util/heap2.h	/^heap2<OBJ, HashKey, EqKey, CmpKey>::~heap2()$/;"	f	class:heap2
~mapAbstraction	abstraction/mapAbstraction.cpp	/^mapAbstraction::~mapAbstraction()$/;"	f	class:mapAbstraction
~mapFlatAbstraction	abstraction/mapFlatAbstraction.cpp	/^mapFlatAbstraction::~mapFlatAbstraction()$/;"	f	class:mapFlatAbstraction
~mapProvider	abstraction/mapProvider.h	/^	virtual ~mapProvider() {};$/;"	f	class:mapProvider
~mapQuadTreeAbstraction	abstraction/mapQuadTreeAbstraction.cpp	/^mapQuadTreeAbstraction::~mapQuadTreeAbstraction()$/;"	f	class:mapQuadTreeAbstraction
~movieFrame	driver/MAC/mac_main.cpp	/^	~movieFrame() { DisposePtr(image); }$/;"	f	class:movieFrame
~path	util/path.cpp	/^path::~path() $/;"	f	class:path
~reservationProvider	simulation/reservationProvider.h	/^	virtual ~reservationProvider() {};$/;"	f	class:reservationProvider
~searchAlgorithm	shared/searchAlgorithm.h	/^	virtual ~searchAlgorithm() {}$/;"	f	class:searchAlgorithm
~searchUnit	shared/searchUnit.cpp	/^searchUnit::~searchUnit()$/;"	f	class:searchUnit
~simulationInfo	simulation/unitSimulation.h	/^	virtual ~simulationInfo() {};$/;"	f	class:simulationInfo
~statCollection	util/statCollection.cpp	/^statCollection::statCollection() :categories(), owners(), stats() { printOutput = false; } statCollection::~statCollection() { for (unsigned int x = 0; x < categories.size(); x++) { delete [] categories[x]; categories[x] = 0; } for (unsigned int x = 0; x < owners.size(); x++) { delete [] owners[x]; owners[x] = 0; } for (unsigned int x = 0; x < excludeFilters.size(); x++) { delete [] excludeFilters[x]; excludeFilters[x] = 0; } for (unsigned int x = 0; x < includeFilters.size(); x++) { delete [] includeFilters[x]; includeFilters[x] = 0; } } \/** * Add a new stat entry for the given category, owner and value.  *\/ void statCollection::addStat(const char *category, const char *owner, double value) { if (!passFilter(category)) return; int catID, ownerID; catID = addCategory(category); ownerID = addOwner(owner); stats.resize(stats.size()+1);$/;"	f	class:statCollection
~unit	simulation/unit.cpp	/^unit::~unit()$/;"	f	class:unit
~unitGroup	simulation/unitGroup.h	/^	virtual ~unitGroup() {}$/;"	f	class:unitGroup
~unitSimulation	simulation/unitSimulation.cpp	/^unitSimulation::~unitSimulation()$/;"	f	class:unitSimulation
